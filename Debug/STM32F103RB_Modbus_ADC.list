
STM32F103RB_Modbus_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004880  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800498c  0800498c  0000598c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a4c  08004a4c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004a4c  08004a4c  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004a4c  08004a4c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a4c  08004a4c  00005a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a50  08004a50  00005a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004a54  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000068  08004abc  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08004abc  000065b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a250  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002005  00000000  00000000  000102e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  000122e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000746  00000000  00000000  00012c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001872c  00000000  00000000  000133be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be4f  00000000  00000000  0002baea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089572  00000000  00000000  00037939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0eab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d10  00000000  00000000  000c0ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000c3c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004974 	.word	0x08004974

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004974 	.word	0x08004974

0800014c <RS485_TX_ENABLE>:

/* RS485 제어 핀 매크로 */
//#define RS485_TX_ENABLE() HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET)
//#define RS485_RX_ENABLE() HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET)

void RS485_TX_ENABLE() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000156:	4805      	ldr	r0, [pc, #20]	@ (800016c <RS485_TX_ENABLE+0x20>)
 8000158:	f002 f83d 	bl	80021d6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000162:	4802      	ldr	r0, [pc, #8]	@ (800016c <RS485_TX_ENABLE+0x20>)
 8000164:	f002 f837 	bl	80021d6 <HAL_GPIO_WritePin>
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}
 800016c:	40010c00 	.word	0x40010c00

08000170 <HAL_UART_RxCpltCallback>:
void RS485_RX_ENABLE() {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
}

__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]

    if (huart->Instance == USART1) {
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a27      	ldr	r2, [pc, #156]	@ (800021c <HAL_UART_RxCpltCallback+0xac>)
 800017e:	4293      	cmp	r3, r2
 8000180:	d123      	bne.n	80001ca <HAL_UART_RxCpltCallback+0x5a>

        // 수신된 데이터를 버퍼에 저장
        ModbusReceiveBuffer[ModbusReceiveIndex++] = UART1_RxBuffer;
 8000182:	4b27      	ldr	r3, [pc, #156]	@ (8000220 <HAL_UART_RxCpltCallback+0xb0>)
 8000184:	881b      	ldrh	r3, [r3, #0]
 8000186:	b29b      	uxth	r3, r3
 8000188:	1c5a      	adds	r2, r3, #1
 800018a:	b291      	uxth	r1, r2
 800018c:	4a24      	ldr	r2, [pc, #144]	@ (8000220 <HAL_UART_RxCpltCallback+0xb0>)
 800018e:	8011      	strh	r1, [r2, #0]
 8000190:	461a      	mov	r2, r3
 8000192:	4b24      	ldr	r3, [pc, #144]	@ (8000224 <HAL_UART_RxCpltCallback+0xb4>)
 8000194:	7819      	ldrb	r1, [r3, #0]
 8000196:	4b24      	ldr	r3, [pc, #144]	@ (8000228 <HAL_UART_RxCpltCallback+0xb8>)
 8000198:	5499      	strb	r1, [r3, r2]

        // 패킷 종료 조건 확인 (예: 일정 시간 내에 데이터가 수신되지 않으면 패킷 종료로 간주)
        if (ModbusReceiveIndex >= EXPECTED_PACKET_LENGTH) {
 800019a:	4b21      	ldr	r3, [pc, #132]	@ (8000220 <HAL_UART_RxCpltCallback+0xb0>)
 800019c:	881b      	ldrh	r3, [r3, #0]
 800019e:	b29b      	uxth	r3, r3
 80001a0:	2b07      	cmp	r3, #7
 80001a2:	d909      	bls.n	80001b8 <HAL_UART_RxCpltCallback+0x48>
            // 패킷 처리 함수 호출
            ProcessModbusPacket(ModbusReceiveBuffer, ModbusReceiveIndex);
 80001a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000220 <HAL_UART_RxCpltCallback+0xb0>)
 80001a6:	881b      	ldrh	r3, [r3, #0]
 80001a8:	b29b      	uxth	r3, r3
 80001aa:	4619      	mov	r1, r3
 80001ac:	481e      	ldr	r0, [pc, #120]	@ (8000228 <HAL_UART_RxCpltCallback+0xb8>)
 80001ae:	f000 f881 	bl	80002b4 <ProcessModbusPacket>
            ModbusReceiveIndex = 0;  // 인덱스 초기화
 80001b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000220 <HAL_UART_RxCpltCallback+0xb0>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	801a      	strh	r2, [r3, #0]
        }

        printf("HAL_UART_RxCpltCallback  \r\n");
 80001b8:	481c      	ldr	r0, [pc, #112]	@ (800022c <HAL_UART_RxCpltCallback+0xbc>)
 80001ba:	f003 fd6f 	bl	8003c9c <puts>
        // 다음 바이트 수신 준비
        HAL_UART_Receive_IT(&huart1, &UART1_RxBuffer, 1);
 80001be:	2201      	movs	r2, #1
 80001c0:	4918      	ldr	r1, [pc, #96]	@ (8000224 <HAL_UART_RxCpltCallback+0xb4>)
 80001c2:	481b      	ldr	r0, [pc, #108]	@ (8000230 <HAL_UART_RxCpltCallback+0xc0>)
 80001c4:	f002 feb1 	bl	8002f2a <HAL_UART_Receive_IT>
			ModbusReceiveIndex = 0;  // 인덱스 초기화
		}

		HAL_UART_Receive_IT(&huart2, &UART1_RxBuffer, 1);
    }
}
 80001c8:	e024      	b.n	8000214 <HAL_UART_RxCpltCallback+0xa4>
    }else if (huart->Instance == USART2) {
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4a19      	ldr	r2, [pc, #100]	@ (8000234 <HAL_UART_RxCpltCallback+0xc4>)
 80001d0:	4293      	cmp	r3, r2
 80001d2:	d11f      	bne.n	8000214 <HAL_UART_RxCpltCallback+0xa4>
		ModbusReceiveBuffer[ModbusReceiveIndex++] = UART1_RxBuffer;
 80001d4:	4b12      	ldr	r3, [pc, #72]	@ (8000220 <HAL_UART_RxCpltCallback+0xb0>)
 80001d6:	881b      	ldrh	r3, [r3, #0]
 80001d8:	b29b      	uxth	r3, r3
 80001da:	1c5a      	adds	r2, r3, #1
 80001dc:	b291      	uxth	r1, r2
 80001de:	4a10      	ldr	r2, [pc, #64]	@ (8000220 <HAL_UART_RxCpltCallback+0xb0>)
 80001e0:	8011      	strh	r1, [r2, #0]
 80001e2:	461a      	mov	r2, r3
 80001e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000224 <HAL_UART_RxCpltCallback+0xb4>)
 80001e6:	7819      	ldrb	r1, [r3, #0]
 80001e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000228 <HAL_UART_RxCpltCallback+0xb8>)
 80001ea:	5499      	strb	r1, [r3, r2]
		if (ModbusReceiveIndex >= EXPECTED_PACKET_LENGTH) {
 80001ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000220 <HAL_UART_RxCpltCallback+0xb0>)
 80001ee:	881b      	ldrh	r3, [r3, #0]
 80001f0:	b29b      	uxth	r3, r3
 80001f2:	2b07      	cmp	r3, #7
 80001f4:	d909      	bls.n	800020a <HAL_UART_RxCpltCallback+0x9a>
			ProcessModbusPacket(ModbusReceiveBuffer, ModbusReceiveIndex);
 80001f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000220 <HAL_UART_RxCpltCallback+0xb0>)
 80001f8:	881b      	ldrh	r3, [r3, #0]
 80001fa:	b29b      	uxth	r3, r3
 80001fc:	4619      	mov	r1, r3
 80001fe:	480a      	ldr	r0, [pc, #40]	@ (8000228 <HAL_UART_RxCpltCallback+0xb8>)
 8000200:	f000 f858 	bl	80002b4 <ProcessModbusPacket>
			ModbusReceiveIndex = 0;  // 인덱스 초기화
 8000204:	4b06      	ldr	r3, [pc, #24]	@ (8000220 <HAL_UART_RxCpltCallback+0xb0>)
 8000206:	2200      	movs	r2, #0
 8000208:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &UART1_RxBuffer, 1);
 800020a:	2201      	movs	r2, #1
 800020c:	4905      	ldr	r1, [pc, #20]	@ (8000224 <HAL_UART_RxCpltCallback+0xb4>)
 800020e:	480a      	ldr	r0, [pc, #40]	@ (8000238 <HAL_UART_RxCpltCallback+0xc8>)
 8000210:	f002 fe8b 	bl	8002f2a <HAL_UART_Receive_IT>
}
 8000214:	bf00      	nop
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	40013800 	.word	0x40013800
 8000220:	20000246 	.word	0x20000246
 8000224:	20000244 	.word	0x20000244
 8000228:	20000144 	.word	0x20000144
 800022c:	08004990 	.word	0x08004990
 8000230:	200000b4 	.word	0x200000b4
 8000234:	40004400 	.word	0x40004400
 8000238:	200000fc 	.word	0x200000fc

0800023c <ModbusCRC>:

uint16_t ModbusCRC(uint8_t *buf, int len) {
 800023c:	b480      	push	{r7}
 800023e:	b087      	sub	sp, #28
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 8000246:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800024a:	82fb      	strh	r3, [r7, #22]
    for (int pos = 0; pos < len; pos++) {
 800024c:	2300      	movs	r3, #0
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	e026      	b.n	80002a0 <ModbusCRC+0x64>
        crc ^= (uint16_t)buf[pos];
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	461a      	mov	r2, r3
 800025c:	8afb      	ldrh	r3, [r7, #22]
 800025e:	4053      	eors	r3, r2
 8000260:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--) {
 8000262:	2308      	movs	r3, #8
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	e015      	b.n	8000294 <ModbusCRC+0x58>
            if ((crc & 1) != 0) {
 8000268:	8afb      	ldrh	r3, [r7, #22]
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d00a      	beq.n	8000288 <ModbusCRC+0x4c>
                crc >>= 1;
 8000272:	8afb      	ldrh	r3, [r7, #22]
 8000274:	085b      	lsrs	r3, r3, #1
 8000276:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 8000278:	8afb      	ldrh	r3, [r7, #22]
 800027a:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800027e:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8000282:	43db      	mvns	r3, r3
 8000284:	82fb      	strh	r3, [r7, #22]
 8000286:	e002      	b.n	800028e <ModbusCRC+0x52>
            } else {
                crc >>= 1;
 8000288:	8afb      	ldrh	r3, [r7, #22]
 800028a:	085b      	lsrs	r3, r3, #1
 800028c:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--) {
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	3b01      	subs	r3, #1
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1e6      	bne.n	8000268 <ModbusCRC+0x2c>
    for (int pos = 0; pos < len; pos++) {
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	3301      	adds	r3, #1
 800029e:	613b      	str	r3, [r7, #16]
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	dbd4      	blt.n	8000252 <ModbusCRC+0x16>
            }
        }
    }
    return crc;
 80002a8:	8afb      	ldrh	r3, [r7, #22]
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	371c      	adds	r7, #28
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr

080002b4 <ProcessModbusPacket>:

void ProcessModbusPacket(uint8_t *buf, int len) {
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	b088      	sub	sp, #32
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
 80002be:	6039      	str	r1, [r7, #0]
    // CRC 확인
    uint16_t crc = ModbusCRC(buf, len - 2);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	3b02      	subs	r3, #2
 80002c4:	4619      	mov	r1, r3
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f7ff ffb8 	bl	800023c <ModbusCRC>
 80002cc:	4603      	mov	r3, r0
 80002ce:	837b      	strh	r3, [r7, #26]
//        // CRC 오류 처리
//        return;
//    }

    // 슬레이브 주소 확인
    uint8_t slaveAddress = buf[0];
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	767b      	strb	r3, [r7, #25]
    if (slaveAddress != SLAVE_ADDRESS) {
 80002d6:	7e7b      	ldrb	r3, [r7, #25]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	f040 809e 	bne.w	800041a <ProcessModbusPacket+0x166>
        // 슬레이브 주소 불일치
        return;
    }

    // 함수 코드 확인 및 처리
    uint8_t functionCode = buf[1];
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	785b      	ldrb	r3, [r3, #1]
 80002e2:	763b      	strb	r3, [r7, #24]
    switch (functionCode) {
 80002e4:	7e3b      	ldrb	r3, [r7, #24]
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	f040 8098 	bne.w	800041c <ProcessModbusPacket+0x168>
        case 0x03:  // Read Holding Registers
            // 시작 주소 및 레지스터 수 읽기
            uint16_t startAddress = (buf[2] << 8) | buf[3];
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3302      	adds	r3, #2
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	b21b      	sxth	r3, r3
 80002f4:	021b      	lsls	r3, r3, #8
 80002f6:	b21a      	sxth	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3303      	adds	r3, #3
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	b21b      	sxth	r3, r3
 8000300:	4313      	orrs	r3, r2
 8000302:	b21b      	sxth	r3, r3
 8000304:	82fb      	strh	r3, [r7, #22]
            uint16_t numRegisters = (buf[4] << 8) | buf[5];
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	3304      	adds	r3, #4
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	b21b      	sxth	r3, r3
 800030e:	021b      	lsls	r3, r3, #8
 8000310:	b21a      	sxth	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	3305      	adds	r3, #5
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	b21b      	sxth	r3, r3
 800031a:	4313      	orrs	r3, r2
 800031c:	b21b      	sxth	r3, r3
 800031e:	82bb      	strh	r3, [r7, #20]

            // 응답 패킷 준비
            uint8_t response[5 + 2 * numRegisters];
 8000320:	8abb      	ldrh	r3, [r7, #20]
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	1d5e      	adds	r6, r3, #5
 8000326:	466b      	mov	r3, sp
 8000328:	469a      	mov	sl, r3
 800032a:	1e73      	subs	r3, r6, #1
 800032c:	613b      	str	r3, [r7, #16]
 800032e:	4632      	mov	r2, r6
 8000330:	2300      	movs	r3, #0
 8000332:	4690      	mov	r8, r2
 8000334:	4699      	mov	r9, r3
 8000336:	f04f 0200 	mov.w	r2, #0
 800033a:	f04f 0300 	mov.w	r3, #0
 800033e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800034a:	4632      	mov	r2, r6
 800034c:	2300      	movs	r3, #0
 800034e:	4614      	mov	r4, r2
 8000350:	461d      	mov	r5, r3
 8000352:	f04f 0200 	mov.w	r2, #0
 8000356:	f04f 0300 	mov.w	r3, #0
 800035a:	00eb      	lsls	r3, r5, #3
 800035c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000360:	00e2      	lsls	r2, r4, #3
 8000362:	4633      	mov	r3, r6
 8000364:	3307      	adds	r3, #7
 8000366:	08db      	lsrs	r3, r3, #3
 8000368:	00db      	lsls	r3, r3, #3
 800036a:	ebad 0d03 	sub.w	sp, sp, r3
 800036e:	466b      	mov	r3, sp
 8000370:	3300      	adds	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
            response[0] = slaveAddress;
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	7e7a      	ldrb	r2, [r7, #25]
 8000378:	701a      	strb	r2, [r3, #0]
            response[1] = functionCode;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	7e3a      	ldrb	r2, [r7, #24]
 800037e:	705a      	strb	r2, [r3, #1]
            response[2] = numRegisters * 2;  // 바이트 수
 8000380:	8abb      	ldrh	r3, [r7, #20]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	b2da      	uxtb	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	709a      	strb	r2, [r3, #2]
            for (int i = 0; i < numRegisters; i++) {
 800038c:	2300      	movs	r3, #0
 800038e:	61fb      	str	r3, [r7, #28]
 8000390:	e01c      	b.n	80003cc <ProcessModbusPacket+0x118>
            	uint16_t regValue = ReadHoldingRegister(startAddress + i);
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	b29a      	uxth	r2, r3
 8000396:	8afb      	ldrh	r3, [r7, #22]
 8000398:	4413      	add	r3, r2
 800039a:	b29b      	uxth	r3, r3
 800039c:	4618      	mov	r0, r3
 800039e:	f000 f843 	bl	8000428 <ReadHoldingRegister>
 80003a2:	4603      	mov	r3, r0
 80003a4:	817b      	strh	r3, [r7, #10]
                response[3 + i * 2] = regValue >> 8;
 80003a6:	897b      	ldrh	r3, [r7, #10]
 80003a8:	0a1b      	lsrs	r3, r3, #8
 80003aa:	b29a      	uxth	r2, r3
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	3303      	adds	r3, #3
 80003b2:	b2d1      	uxtb	r1, r2
 80003b4:	68fa      	ldr	r2, [r7, #12]
 80003b6:	54d1      	strb	r1, [r2, r3]
                response[4 + i * 2] = regValue & 0xFF;
 80003b8:	69fb      	ldr	r3, [r7, #28]
 80003ba:	3302      	adds	r3, #2
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	897a      	ldrh	r2, [r7, #10]
 80003c0:	b2d1      	uxtb	r1, r2
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	54d1      	strb	r1, [r2, r3]
            for (int i = 0; i < numRegisters; i++) {
 80003c6:	69fb      	ldr	r3, [r7, #28]
 80003c8:	3301      	adds	r3, #1
 80003ca:	61fb      	str	r3, [r7, #28]
 80003cc:	8abb      	ldrh	r3, [r7, #20]
 80003ce:	69fa      	ldr	r2, [r7, #28]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	dbde      	blt.n	8000392 <ProcessModbusPacket+0xde>
            }

            // CRC 추가
            crc = ModbusCRC(response, 3 + 2 * numRegisters);
 80003d4:	8abb      	ldrh	r3, [r7, #20]
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	3303      	adds	r3, #3
 80003da:	4619      	mov	r1, r3
 80003dc:	68f8      	ldr	r0, [r7, #12]
 80003de:	f7ff ff2d 	bl	800023c <ModbusCRC>
 80003e2:	4603      	mov	r3, r0
 80003e4:	837b      	strh	r3, [r7, #26]
            response[3 + 2 * numRegisters] = crc & 0xFF;
 80003e6:	8abb      	ldrh	r3, [r7, #20]
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	3303      	adds	r3, #3
 80003ec:	8b7a      	ldrh	r2, [r7, #26]
 80003ee:	b2d1      	uxtb	r1, r2
 80003f0:	68fa      	ldr	r2, [r7, #12]
 80003f2:	54d1      	strb	r1, [r2, r3]
            response[4 + 2 * numRegisters] = crc >> 8;
 80003f4:	8b7b      	ldrh	r3, [r7, #26]
 80003f6:	0a1b      	lsrs	r3, r3, #8
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	8abb      	ldrh	r3, [r7, #20]
 80003fc:	3302      	adds	r3, #2
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	b2d1      	uxtb	r1, r2
 8000402:	68fa      	ldr	r2, [r7, #12]
 8000404:	54d1      	strb	r1, [r2, r3]

            // 응답 전송
            HAL_UART_Transmit(&huart1, response, sizeof(response), HAL_MAX_DELAY);
 8000406:	b2b2      	uxth	r2, r6
 8000408:	f04f 33ff 	mov.w	r3, #4294967295
 800040c:	68f9      	ldr	r1, [r7, #12]
 800040e:	4805      	ldr	r0, [pc, #20]	@ (8000424 <ProcessModbusPacket+0x170>)
 8000410:	f002 fd00 	bl	8002e14 <HAL_UART_Transmit>
            break;
 8000414:	bf00      	nop
 8000416:	46d5      	mov	sp, sl
 8000418:	e000      	b.n	800041c <ProcessModbusPacket+0x168>
        return;
 800041a:	bf00      	nop

        // 다른 함수 코드 처리
    }
}
 800041c:	3720      	adds	r7, #32
 800041e:	46bd      	mov	sp, r7
 8000420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000424:	200000b4 	.word	0x200000b4

08000428 <ReadHoldingRegister>:

	// 응답 전송
	HAL_UART_Transmit(&huart1, response, sizeof(response), HAL_MAX_DELAY);
}

uint16_t ReadHoldingRegister(uint16_t address) {
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	80fb      	strh	r3, [r7, #6]
    // 실제 레지스터 읽기 로직을 여기에 추가
    // 예제에서는 address에 따라 임의의 값을 반환

	uint16_t regVal = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	81fb      	strh	r3, [r7, #14]
	regVal = uwADCxConvertedValue[address];
 8000436:	88fb      	ldrh	r3, [r7, #6]
 8000438:	4a04      	ldr	r2, [pc, #16]	@ (800044c <ReadHoldingRegister+0x24>)
 800043a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800043e:	81fb      	strh	r3, [r7, #14]
    return regVal;
 8000440:	89fb      	ldrh	r3, [r7, #14]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	20000248 	.word	0x20000248

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	b089      	sub	sp, #36	@ 0x24
 8000454:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000456:	f000 fd15 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045a:	f000 f8d3 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045e:	f000 f9bb 	bl	80007d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000462:	f000 f927 	bl	80006b4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000466:	f000 f963 	bl	8000730 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800046a:	f000 f98b 	bl	8000784 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &UART1_RxBuffer, 1);
 800046e:	2201      	movs	r2, #1
 8000470:	495a      	ldr	r1, [pc, #360]	@ (80005dc <main+0x18c>)
 8000472:	485b      	ldr	r0, [pc, #364]	@ (80005e0 <main+0x190>)
 8000474:	f002 fd59 	bl	8002f2a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); // Relay Off
 8000478:	2201      	movs	r2, #1
 800047a:	2140      	movs	r1, #64	@ 0x40
 800047c:	4859      	ldr	r0, [pc, #356]	@ (80005e4 <main+0x194>)
 800047e:	f001 feaa 	bl	80021d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); // Relay Off
 8000482:	2201      	movs	r2, #1
 8000484:	2180      	movs	r1, #128	@ 0x80
 8000486:	4857      	ldr	r0, [pc, #348]	@ (80005e4 <main+0x194>)
 8000488:	f001 fea5 	bl	80021d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Relay Off
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000492:	4854      	ldr	r0, [pc, #336]	@ (80005e4 <main+0x194>)
 8000494:	f001 fe9f 	bl	80021d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); // Relay Off
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800049e:	4851      	ldr	r0, [pc, #324]	@ (80005e4 <main+0x194>)
 80004a0:	f001 fe99 	bl	80021d6 <HAL_GPIO_WritePin>

  uint16_t len = modbus_build_request(0x01, 0x0000, 0x0001, 1, tx_buf);
 80004a4:	4b50      	ldr	r3, [pc, #320]	@ (80005e8 <main+0x198>)
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	2301      	movs	r3, #1
 80004aa:	2201      	movs	r2, #1
 80004ac:	2100      	movs	r1, #0
 80004ae:	2001      	movs	r0, #1
 80004b0:	f000 fa85 	bl	80009be <modbus_build_request>
 80004b4:	4603      	mov	r3, r0
 80004b6:	80bb      	strh	r3, [r7, #4]

  RS485_TX_ENABLE();
 80004b8:	f7ff fe48 	bl	800014c <RS485_TX_ENABLE>
  HAL_UART_Transmit(&huart1, tx_buf, len, 100);
 80004bc:	88ba      	ldrh	r2, [r7, #4]
 80004be:	2364      	movs	r3, #100	@ 0x64
 80004c0:	4949      	ldr	r1, [pc, #292]	@ (80005e8 <main+0x198>)
 80004c2:	4847      	ldr	r0, [pc, #284]	@ (80005e0 <main+0x190>)
 80004c4:	f002 fca6 	bl	8002e14 <HAL_UART_Transmit>
  HAL_Delay(1000);
 80004c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004cc:	f000 fd3c 	bl	8000f48 <HAL_Delay>
  /* USER CODE BEGIN WHILE */

  /* ### - 1 - Initialize ADC peripheral(CubeMX ?��?�� ?��?��) ##################### */

  /* ### - 2 - Start calibration ############################################ */
  if (HAL_ADCEx_Calibration_Start (&hadc1) != HAL_OK)
 80004d0:	4846      	ldr	r0, [pc, #280]	@ (80005ec <main+0x19c>)
 80004d2:	f001 fa77 	bl	80019c4 <HAL_ADCEx_Calibration_Start>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <main+0x90>
  {
	  Error_Handler ();
 80004dc:	f000 fa2c 	bl	8000938 <Error_Handler>
  }

  if (HAL_ADC_Start_IT (&hadc1) != HAL_OK)
 80004e0:	4842      	ldr	r0, [pc, #264]	@ (80005ec <main+0x19c>)
 80004e2:	f001 f80d 	bl	8001500 <HAL_ADC_Start_IT>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <main+0xa0>
  {
     Error_Handler ();
 80004ec:	f000 fa24 	bl	8000938 <Error_Handler>
//
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);

	 /* ### - 4 - Start the conversion process ################################*/
	 if (HAL_ADC_Start (&hadc1) != HAL_OK)
 80004f0:	483e      	ldr	r0, [pc, #248]	@ (80005ec <main+0x19c>)
 80004f2:	f000 fe25 	bl	8001140 <HAL_ADC_Start>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <main+0xb0>
	  {
		/* Start Conversation Error */
		Error_Handler ();
 80004fc:	f000 fa1c 	bl	8000938 <Error_Handler>
	  }

	 for (uint8_t i = 0; i < 10; i++)
 8000500:	2300      	movs	r3, #0
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	e018      	b.n	8000538 <main+0xe8>
	  {
            /* ### - 5 - Wait for the end of conversion ############################*/
            HAL_ADC_PollForConversion (&hadc1, 100);
 8000506:	2164      	movs	r1, #100	@ 0x64
 8000508:	4838      	ldr	r0, [pc, #224]	@ (80005ec <main+0x19c>)
 800050a:	f000 fef3 	bl	80012f4 <HAL_ADC_PollForConversion>

            /* Check if the continuous conversion of regular channel is finished */
            if ((HAL_ADC_GetState (&hadc1) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC)
 800050e:	4837      	ldr	r0, [pc, #220]	@ (80005ec <main+0x19c>)
 8000510:	f001 f9b0 	bl	8001874 <HAL_ADC_GetState>
 8000514:	4603      	mov	r3, r0
 8000516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800051a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800051e:	d108      	bne.n	8000532 <main+0xe2>
              {
                /* ### - 6 - Get the converted value of regular channel ##############*/
                uwADCxConvertedValue[i] = HAL_ADC_GetValue (&hadc1);
 8000520:	4832      	ldr	r0, [pc, #200]	@ (80005ec <main+0x19c>)
 8000522:	f001 f8a3 	bl	800166c <HAL_ADC_GetValue>
 8000526:	4602      	mov	r2, r0
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	b291      	uxth	r1, r2
 800052c:	4a30      	ldr	r2, [pc, #192]	@ (80005f0 <main+0x1a0>)
 800052e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	 for (uint8_t i = 0; i < 10; i++)
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	3301      	adds	r3, #1
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b09      	cmp	r3, #9
 800053c:	d9e3      	bls.n	8000506 <main+0xb6>
              }
          }

        /* ### - 7 - Stop the conversion process #################################*/
        HAL_ADC_Stop (&hadc1);
 800053e:	482b      	ldr	r0, [pc, #172]	@ (80005ec <main+0x19c>)
 8000540:	f000 feac 	bl	800129c <HAL_ADC_Stop>
        //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

        // 500ms 마다 LED 토글
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // PA5 핀에 연결된 LED 제어 (핀 이름은 실제 설정에 맞게 변경)
 8000544:	2120      	movs	r1, #32
 8000546:	482b      	ldr	r0, [pc, #172]	@ (80005f4 <main+0x1a4>)
 8000548:	f001 fe5d 	bl	8002206 <HAL_GPIO_TogglePin>
        HAL_Delay(500); // 500ms 지연
 800054c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000550:	f000 fcfa 	bl	8000f48 <HAL_Delay>


        // 버튼(B1, 예를 들어 PC13)이 눌렸는지 확인 (Pull-up 저항 사용 가정, 누르면 LOW)
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000554:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000558:	4822      	ldr	r0, [pc, #136]	@ (80005e4 <main+0x194>)
 800055a:	f001 fe25 	bl	80021a8 <HAL_GPIO_ReadPin>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d132      	bne.n	80005ca <main+0x17a>
		{
			printf("%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x\r\n", rx_buf[0], rx_buf[1], rx_buf[2], rx_buf[3], rx_buf[4], rx_buf[5], rx_buf[6], rx_buf[7] );
 8000564:	4b24      	ldr	r3, [pc, #144]	@ (80005f8 <main+0x1a8>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	461d      	mov	r5, r3
 800056a:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <main+0x1a8>)
 800056c:	785b      	ldrb	r3, [r3, #1]
 800056e:	461e      	mov	r6, r3
 8000570:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <main+0x1a8>)
 8000572:	789b      	ldrb	r3, [r3, #2]
 8000574:	469c      	mov	ip, r3
 8000576:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <main+0x1a8>)
 8000578:	78db      	ldrb	r3, [r3, #3]
 800057a:	461a      	mov	r2, r3
 800057c:	4b1e      	ldr	r3, [pc, #120]	@ (80005f8 <main+0x1a8>)
 800057e:	791b      	ldrb	r3, [r3, #4]
 8000580:	4619      	mov	r1, r3
 8000582:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <main+0x1a8>)
 8000584:	795b      	ldrb	r3, [r3, #5]
 8000586:	4618      	mov	r0, r3
 8000588:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <main+0x1a8>)
 800058a:	799b      	ldrb	r3, [r3, #6]
 800058c:	461c      	mov	r4, r3
 800058e:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <main+0x1a8>)
 8000590:	79db      	ldrb	r3, [r3, #7]
 8000592:	9304      	str	r3, [sp, #16]
 8000594:	9403      	str	r4, [sp, #12]
 8000596:	9002      	str	r0, [sp, #8]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	4663      	mov	r3, ip
 800059e:	4632      	mov	r2, r6
 80005a0:	4629      	mov	r1, r5
 80005a2:	4816      	ldr	r0, [pc, #88]	@ (80005fc <main+0x1ac>)
 80005a4:	f003 fb12 	bl	8003bcc <iprintf>
			//HAL_UART_Transmit(&huart2, (uint8_t *)"Blue Button Pressed..\r\n", 23, HAL_MAX_DELAY);
			//RS485_TX_ENABLE();
			HAL_UART_Transmit(&huart2, &UART1_RxBuffer, 10, 100);
 80005a8:	2364      	movs	r3, #100	@ 0x64
 80005aa:	220a      	movs	r2, #10
 80005ac:	490b      	ldr	r1, [pc, #44]	@ (80005dc <main+0x18c>)
 80005ae:	4814      	ldr	r0, [pc, #80]	@ (8000600 <main+0x1b0>)
 80005b0:	f002 fc30 	bl	8002e14 <HAL_UART_Transmit>
			//HAL_Delay(500);

			// 버튼 눌렸을 때 처리 (Debouncing은 추가 구현 필요)
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // LED 켜기
 80005b4:	2201      	movs	r2, #1
 80005b6:	2120      	movs	r1, #32
 80005b8:	480e      	ldr	r0, [pc, #56]	@ (80005f4 <main+0x1a4>)
 80005ba:	f001 fe0c 	bl	80021d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); // Relay Off
 80005be:	2200      	movs	r2, #0
 80005c0:	2180      	movs	r1, #128	@ 0x80
 80005c2:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <main+0x194>)
 80005c4:	f001 fe07 	bl	80021d6 <HAL_GPIO_WritePin>
 80005c8:	e004      	b.n	80005d4 <main+0x184>

		}else {

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); // Relay On
 80005ca:	2201      	movs	r2, #1
 80005cc:	2180      	movs	r1, #128	@ 0x80
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <main+0x194>)
 80005d0:	f001 fe01 	bl	80021d6 <HAL_GPIO_WritePin>
		}

        HAL_Delay(100);
 80005d4:	2064      	movs	r0, #100	@ 0x64
 80005d6:	f000 fcb7 	bl	8000f48 <HAL_Delay>
	 if (HAL_ADC_Start (&hadc1) != HAL_OK)
 80005da:	e789      	b.n	80004f0 <main+0xa0>
 80005dc:	20000244 	.word	0x20000244
 80005e0:	200000b4 	.word	0x200000b4
 80005e4:	40011000 	.word	0x40011000
 80005e8:	20000260 	.word	0x20000260
 80005ec:	20000084 	.word	0x20000084
 80005f0:	20000248 	.word	0x20000248
 80005f4:	40010800 	.word	0x40010800
 80005f8:	20000360 	.word	0x20000360
 80005fc:	080049ac 	.word	0x080049ac
 8000600:	200000fc 	.word	0x200000fc

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	@ 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800060e:	2228      	movs	r2, #40	@ 0x28
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fc22 	bl	8003e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000644:	2300      	movs	r3, #0
 8000646:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000648:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fe12 	bl	800227c <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800065e:	f000 f96b 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000672:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2102      	movs	r1, #2
 800067e:	4618      	mov	r0, r3
 8000680:	f002 f87e 	bl	8002780 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800068a:	f000 f955 	bl	8000938 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800068e:	2302      	movs	r3, #2
 8000690:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000696:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f002 f9fe 	bl	8002a9c <HAL_RCCEx_PeriphCLKConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006a6:	f000 f947 	bl	8000938 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	@ 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006c4:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <MX_ADC1_Init+0x74>)
 80006c6:	4a19      	ldr	r2, [pc, #100]	@ (800072c <MX_ADC1_Init+0x78>)
 80006c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <MX_ADC1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d0:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <MX_ADC1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_ADC1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_ADC1_Init+0x74>)
 80006de:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80006e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e4:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_ADC1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_ADC1_Init+0x74>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f0:	480d      	ldr	r0, [pc, #52]	@ (8000728 <MX_ADC1_Init+0x74>)
 80006f2:	f000 fc4d 	bl	8000f90 <HAL_ADC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f91c 	bl	8000938 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000700:	2301      	movs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000704:	2301      	movs	r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_ADC1_Init+0x74>)
 8000712:	f000 ffb7 	bl	8001684 <HAL_ADC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800071c:	f000 f90c 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000084 	.word	0x20000084
 800072c:	40012400 	.word	0x40012400

08000730 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_USART1_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 800073c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000740:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_USART1_UART_Init+0x4c>)
 8000768:	f002 fb04 	bl	8002d74 <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 f8e1 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000b4 	.word	0x200000b4
 8000780:	40013800 	.word	0x40013800

08000784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <MX_USART2_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000790:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007bc:	f002 fada 	bl	8002d74 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f8b7 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000fc 	.word	0x200000fc
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ec:	4b42      	ldr	r3, [pc, #264]	@ (80008f8 <MX_GPIO_Init+0x120>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a41      	ldr	r2, [pc, #260]	@ (80008f8 <MX_GPIO_Init+0x120>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b3f      	ldr	r3, [pc, #252]	@ (80008f8 <MX_GPIO_Init+0x120>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0310 	and.w	r3, r3, #16
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000804:	4b3c      	ldr	r3, [pc, #240]	@ (80008f8 <MX_GPIO_Init+0x120>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a3b      	ldr	r2, [pc, #236]	@ (80008f8 <MX_GPIO_Init+0x120>)
 800080a:	f043 0320 	orr.w	r3, r3, #32
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b39      	ldr	r3, [pc, #228]	@ (80008f8 <MX_GPIO_Init+0x120>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0320 	and.w	r3, r3, #32
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b36      	ldr	r3, [pc, #216]	@ (80008f8 <MX_GPIO_Init+0x120>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a35      	ldr	r2, [pc, #212]	@ (80008f8 <MX_GPIO_Init+0x120>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b33      	ldr	r3, [pc, #204]	@ (80008f8 <MX_GPIO_Init+0x120>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	4b30      	ldr	r3, [pc, #192]	@ (80008f8 <MX_GPIO_Init+0x120>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a2f      	ldr	r2, [pc, #188]	@ (80008f8 <MX_GPIO_Init+0x120>)
 800083a:	f043 0308 	orr.w	r3, r3, #8
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b2d      	ldr	r3, [pc, #180]	@ (80008f8 <MX_GPIO_Init+0x120>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0308 	and.w	r3, r3, #8
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2120      	movs	r1, #32
 8000850:	482a      	ldr	r0, [pc, #168]	@ (80008fc <MX_GPIO_Init+0x124>)
 8000852:	f001 fcc0 	bl	80021d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RE_Pin|DE_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800085c:	4828      	ldr	r0, [pc, #160]	@ (8000900 <MX_GPIO_Init+0x128>)
 800085e:	f001 fcba 	bl	80021d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000868:	4826      	ldr	r0, [pc, #152]	@ (8000904 <MX_GPIO_Init+0x12c>)
 800086a:	f001 fcb4 	bl	80021d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000874:	4b24      	ldr	r3, [pc, #144]	@ (8000908 <MX_GPIO_Init+0x130>)
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	4820      	ldr	r0, [pc, #128]	@ (8000904 <MX_GPIO_Init+0x12c>)
 8000884:	f001 fb0c 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000888:	2320      	movs	r3, #32
 800088a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2302      	movs	r3, #2
 8000896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	4817      	ldr	r0, [pc, #92]	@ (80008fc <MX_GPIO_Init+0x124>)
 80008a0:	f001 fafe 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RE_Pin DE_Pin */
  GPIO_InitStruct.Pin = RE_Pin|DE_Pin;
 80008a4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	4619      	mov	r1, r3
 80008bc:	4810      	ldr	r0, [pc, #64]	@ (8000900 <MX_GPIO_Init+0x128>)
 80008be:	f001 faef 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80008c2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2302      	movs	r3, #2
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4619      	mov	r1, r3
 80008da:	480a      	ldr	r0, [pc, #40]	@ (8000904 <MX_GPIO_Init+0x12c>)
 80008dc:	f001 fae0 	bl	8001ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	2028      	movs	r0, #40	@ 0x28
 80008e6:	f001 f9f2 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ea:	2028      	movs	r0, #40	@ 0x28
 80008ec:	f001 fa0b 	bl	8001d06 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010800 	.word	0x40010800
 8000900:	40010c00 	.word	0x40010c00
 8000904:	40011000 	.word	0x40011000
 8000908:	10110000 	.word	0x10110000

0800090c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	b29a      	uxth	r2, r3
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	68b9      	ldr	r1, [r7, #8]
 8000922:	4804      	ldr	r0, [pc, #16]	@ (8000934 <_write+0x28>)
 8000924:	f002 fa76 	bl	8002e14 <HAL_UART_Transmit>
    return len;
 8000928:	687b      	ldr	r3, [r7, #4]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000fc 	.word	0x200000fc

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <modbus_crc16>:
#include "modbus.h"

uint16_t modbus_crc16(uint8_t *buf, uint16_t len)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000950:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000954:	81fb      	strh	r3, [r7, #14]
    for (uint16_t pos = 0; pos < len; pos++) {
 8000956:	2300      	movs	r3, #0
 8000958:	81bb      	strh	r3, [r7, #12]
 800095a:	e026      	b.n	80009aa <modbus_crc16+0x66>
        crc ^= (uint16_t)buf[pos];
 800095c:	89bb      	ldrh	r3, [r7, #12]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	89fb      	ldrh	r3, [r7, #14]
 8000968:	4053      	eors	r3, r2
 800096a:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	e015      	b.n	800099e <modbus_crc16+0x5a>
            if ((crc & 0x0001) != 0) {
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00a      	beq.n	8000992 <modbus_crc16+0x4e>
                crc >>= 1;
 800097c:	89fb      	ldrh	r3, [r7, #14]
 800097e:	085b      	lsrs	r3, r3, #1
 8000980:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 8000982:	89fb      	ldrh	r3, [r7, #14]
 8000984:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8000988:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 800098c:	43db      	mvns	r3, r3
 800098e:	81fb      	strh	r3, [r7, #14]
 8000990:	e002      	b.n	8000998 <modbus_crc16+0x54>
            } else {
                crc >>= 1;
 8000992:	89fb      	ldrh	r3, [r7, #14]
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	3301      	adds	r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	2b07      	cmp	r3, #7
 80009a2:	dde6      	ble.n	8000972 <modbus_crc16+0x2e>
    for (uint16_t pos = 0; pos < len; pos++) {
 80009a4:	89bb      	ldrh	r3, [r7, #12]
 80009a6:	3301      	adds	r3, #1
 80009a8:	81bb      	strh	r3, [r7, #12]
 80009aa:	89ba      	ldrh	r2, [r7, #12]
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d3d4      	bcc.n	800095c <modbus_crc16+0x18>
            }
        }
    }
    return crc;
 80009b2:	89fb      	ldrh	r3, [r7, #14]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <modbus_build_request>:

uint16_t modbus_build_request(uint8_t slave_id, uint8_t func_code, uint16_t reg_addr, uint16_t reg_count, uint8_t *tx_buf)
{
 80009be:	b590      	push	{r4, r7, lr}
 80009c0:	b085      	sub	sp, #20
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4604      	mov	r4, r0
 80009c6:	4608      	mov	r0, r1
 80009c8:	4611      	mov	r1, r2
 80009ca:	461a      	mov	r2, r3
 80009cc:	4623      	mov	r3, r4
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	4603      	mov	r3, r0
 80009d2:	71bb      	strb	r3, [r7, #6]
 80009d4:	460b      	mov	r3, r1
 80009d6:	80bb      	strh	r3, [r7, #4]
 80009d8:	4613      	mov	r3, r2
 80009da:	807b      	strh	r3, [r7, #2]
    tx_buf[0] = slave_id;
 80009dc:	6a3b      	ldr	r3, [r7, #32]
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	701a      	strb	r2, [r3, #0]
    tx_buf[1] = func_code;
 80009e2:	6a3b      	ldr	r3, [r7, #32]
 80009e4:	3301      	adds	r3, #1
 80009e6:	79ba      	ldrb	r2, [r7, #6]
 80009e8:	701a      	strb	r2, [r3, #0]
    tx_buf[2] = reg_addr >> 8;
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	6a3b      	ldr	r3, [r7, #32]
 80009f2:	3302      	adds	r3, #2
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	701a      	strb	r2, [r3, #0]
    tx_buf[3] = reg_addr & 0xFF;
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	3303      	adds	r3, #3
 80009fc:	88ba      	ldrh	r2, [r7, #4]
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	701a      	strb	r2, [r3, #0]
    tx_buf[4] = reg_count >> 8;
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	701a      	strb	r2, [r3, #0]
    tx_buf[5] = reg_count & 0xFF;
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	3305      	adds	r3, #5
 8000a14:	887a      	ldrh	r2, [r7, #2]
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	701a      	strb	r2, [r3, #0]
    uint16_t crc = modbus_crc16(tx_buf, 6);
 8000a1a:	2106      	movs	r1, #6
 8000a1c:	6a38      	ldr	r0, [r7, #32]
 8000a1e:	f7ff ff91 	bl	8000944 <modbus_crc16>
 8000a22:	4603      	mov	r3, r0
 8000a24:	81fb      	strh	r3, [r7, #14]
    tx_buf[6] = crc & 0xFF;
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	3306      	adds	r3, #6
 8000a2a:	89fa      	ldrh	r2, [r7, #14]
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	701a      	strb	r2, [r3, #0]
    tx_buf[7] = crc >> 8;
 8000a30:	89fb      	ldrh	r3, [r7, #14]
 8000a32:	0a1b      	lsrs	r3, r3, #8
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	3307      	adds	r3, #7
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	701a      	strb	r2, [r3, #0]
    return 8;
 8000a3e:	2308      	movs	r3, #8
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd90      	pop	{r4, r7, pc}

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <HAL_MspInit+0x5c>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a14      	ldr	r2, [pc, #80]	@ (8000aa4 <HAL_MspInit+0x5c>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <HAL_MspInit+0x5c>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x5c>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa4 <HAL_MspInit+0x5c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a70:	61d3      	str	r3, [r2, #28]
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <HAL_MspInit+0x5c>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <HAL_MspInit+0x60>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <HAL_MspInit+0x60>)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010000 	.word	0x40010000

08000aac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0318 	add.w	r3, r7, #24
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8000b70 <HAL_ADC_MspInit+0xc4>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d14d      	bne.n	8000b68 <HAL_ADC_MspInit+0xbc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000acc:	4b29      	ldr	r3, [pc, #164]	@ (8000b74 <HAL_ADC_MspInit+0xc8>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a28      	ldr	r2, [pc, #160]	@ (8000b74 <HAL_ADC_MspInit+0xc8>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b26      	ldr	r3, [pc, #152]	@ (8000b74 <HAL_ADC_MspInit+0xc8>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	4b23      	ldr	r3, [pc, #140]	@ (8000b74 <HAL_ADC_MspInit+0xc8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a22      	ldr	r2, [pc, #136]	@ (8000b74 <HAL_ADC_MspInit+0xc8>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <HAL_ADC_MspInit+0xc8>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0310 	and.w	r3, r3, #16
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <HAL_ADC_MspInit+0xc8>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a1c      	ldr	r2, [pc, #112]	@ (8000b74 <HAL_ADC_MspInit+0xc8>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <HAL_ADC_MspInit+0xc8>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <HAL_ADC_MspInit+0xc8>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a16      	ldr	r2, [pc, #88]	@ (8000b74 <HAL_ADC_MspInit+0xc8>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <HAL_ADC_MspInit+0xc8>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b30:	2303      	movs	r3, #3
 8000b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	f107 0318 	add.w	r3, r7, #24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480f      	ldr	r0, [pc, #60]	@ (8000b78 <HAL_ADC_MspInit+0xcc>)
 8000b3c:	f001 f9b0 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000b40:	23d2      	movs	r3, #210	@ 0xd2
 8000b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b44:	2303      	movs	r3, #3
 8000b46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0318 	add.w	r3, r7, #24
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <HAL_ADC_MspInit+0xd0>)
 8000b50:	f001 f9a6 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b54:	2303      	movs	r3, #3
 8000b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	4619      	mov	r1, r3
 8000b62:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <HAL_ADC_MspInit+0xd4>)
 8000b64:	f001 f99c 	bl	8001ea0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	@ 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40012400 	.word	0x40012400
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40011000 	.word	0x40011000
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	40010c00 	.word	0x40010c00

08000b84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	@ 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0318 	add.w	r3, r7, #24
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a39      	ldr	r2, [pc, #228]	@ (8000c84 <HAL_UART_MspInit+0x100>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d13a      	bne.n	8000c1a <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ba4:	4b38      	ldr	r3, [pc, #224]	@ (8000c88 <HAL_UART_MspInit+0x104>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a37      	ldr	r2, [pc, #220]	@ (8000c88 <HAL_UART_MspInit+0x104>)
 8000baa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b35      	ldr	r3, [pc, #212]	@ (8000c88 <HAL_UART_MspInit+0x104>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b32      	ldr	r3, [pc, #200]	@ (8000c88 <HAL_UART_MspInit+0x104>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a31      	ldr	r2, [pc, #196]	@ (8000c88 <HAL_UART_MspInit+0x104>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8000c88 <HAL_UART_MspInit+0x104>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4828      	ldr	r0, [pc, #160]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000bea:	f001 f959 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4619      	mov	r1, r3
 8000c02:	4822      	ldr	r0, [pc, #136]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000c04:	f001 f94c 	bl	8001ea0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2025      	movs	r0, #37	@ 0x25
 8000c0e:	f001 f85e 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c12:	2025      	movs	r0, #37	@ 0x25
 8000c14:	f001 f877 	bl	8001d06 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c18:	e030      	b.n	8000c7c <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c90 <HAL_UART_MspInit+0x10c>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d12b      	bne.n	8000c7c <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <HAL_UART_MspInit+0x104>)
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	4a17      	ldr	r2, [pc, #92]	@ (8000c88 <HAL_UART_MspInit+0x104>)
 8000c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c2e:	61d3      	str	r3, [r2, #28]
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <HAL_UART_MspInit+0x104>)
 8000c32:	69db      	ldr	r3, [r3, #28]
 8000c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <HAL_UART_MspInit+0x104>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a11      	ldr	r2, [pc, #68]	@ (8000c88 <HAL_UART_MspInit+0x104>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <HAL_UART_MspInit+0x104>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c54:	230c      	movs	r3, #12
 8000c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0318 	add.w	r3, r7, #24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4809      	ldr	r0, [pc, #36]	@ (8000c8c <HAL_UART_MspInit+0x108>)
 8000c68:	f001 f91a 	bl	8001ea0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2026      	movs	r0, #38	@ 0x26
 8000c72:	f001 f82c 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c76:	2026      	movs	r0, #38	@ 0x26
 8000c78:	f001 f845 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	@ 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40013800 	.word	0x40013800
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	40004400 	.word	0x40004400

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <NMI_Handler+0x4>

08000c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <HardFault_Handler+0x4>

08000ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <MemManage_Handler+0x4>

08000cac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce4:	f000 f914 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <USART1_IRQHandler+0x10>)
 8000cf2:	f002 f93f 	bl	8002f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000b4 	.word	0x200000b4

08000d00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d04:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <USART2_IRQHandler+0x10>)
 8000d06:	f002 f935 	bl	8002f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000fc 	.word	0x200000fc

08000d14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d18:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d1c:	f001 fa8c 	bl	8002238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e00a      	b.n	8000d4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d36:	f3af 8000 	nop.w
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	60ba      	str	r2, [r7, #8]
 8000d42:	b2ca      	uxtb	r2, r1
 8000d44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf0      	blt.n	8000d36 <_read+0x12>
  }

  return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d84:	605a      	str	r2, [r3, #4]
  return 0;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <_isatty>:

int _isatty(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b085      	sub	sp, #20
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
	...

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	@ (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f003 f882 	bl	8003ef8 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20005000 	.word	0x20005000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	20000460 	.word	0x20000460
 8000e28:	200005b8 	.word	0x200005b8

08000e2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e38:	f7ff fff8 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e3c:	480b      	ldr	r0, [pc, #44]	@ (8000e6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e3e:	490c      	ldr	r1, [pc, #48]	@ (8000e70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e40:	4a0c      	ldr	r2, [pc, #48]	@ (8000e74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a09      	ldr	r2, [pc, #36]	@ (8000e78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e54:	4c09      	ldr	r4, [pc, #36]	@ (8000e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e62:	f003 f84f 	bl	8003f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e66:	f7ff faf3 	bl	8000450 <main>
  bx lr
 8000e6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e74:	08004a54 	.word	0x08004a54
  ldr r2, =_sbss
 8000e78:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e7c:	200005b4 	.word	0x200005b4

08000e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_2_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <HAL_Init+0x28>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <HAL_Init+0x28>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 ff0f 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fdd2 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 ff27 	bl	8001d22 <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 feef 	bl	8001cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	@ (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <HAL_IncTick+0x1c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b05      	ldr	r3, [pc, #20]	@ (8000f30 <HAL_IncTick+0x20>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a03      	ldr	r2, [pc, #12]	@ (8000f30 <HAL_IncTick+0x20>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000464 	.word	0x20000464

08000f34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b02      	ldr	r3, [pc, #8]	@ (8000f44 <HAL_GetTick+0x10>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	20000464 	.word	0x20000464

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff fff0 	bl	8000f34 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffe0 	bl	8000f34 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008

08000f90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e0be      	b.n	8001130 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d109      	bne.n	8000fd4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fd6c 	bl	8000aac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fcb3 	bl	8001940 <ADC_ConversionStop_Disable>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f040 8099 	bne.w	800111e <HAL_ADC_Init+0x18e>
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f040 8095 	bne.w	800111e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ffc:	f023 0302 	bic.w	r3, r3, #2
 8001000:	f043 0202 	orr.w	r2, r3, #2
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001010:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7b1b      	ldrb	r3, [r3, #12]
 8001016:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001018:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	4313      	orrs	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001028:	d003      	beq.n	8001032 <HAL_ADC_Init+0xa2>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d102      	bne.n	8001038 <HAL_ADC_Init+0xa8>
 8001032:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001036:	e000      	b.n	800103a <HAL_ADC_Init+0xaa>
 8001038:	2300      	movs	r3, #0
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7d1b      	ldrb	r3, [r3, #20]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d119      	bne.n	800107c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7b1b      	ldrb	r3, [r3, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d109      	bne.n	8001064 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	3b01      	subs	r3, #1
 8001056:	035a      	lsls	r2, r3, #13
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	e00b      	b.n	800107c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001068:	f043 0220 	orr.w	r2, r3, #32
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001074:	f043 0201 	orr.w	r2, r3, #1
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	430a      	orrs	r2, r1
 800108e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <HAL_ADC_Init+0x1a8>)
 8001098:	4013      	ands	r3, r2
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	68b9      	ldr	r1, [r7, #8]
 80010a0:	430b      	orrs	r3, r1
 80010a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010ac:	d003      	beq.n	80010b6 <HAL_ADC_Init+0x126>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d104      	bne.n	80010c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	051b      	lsls	r3, r3, #20
 80010be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <HAL_ADC_Init+0x1ac>)
 80010dc:	4013      	ands	r3, r2
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d10b      	bne.n	80010fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ee:	f023 0303 	bic.w	r3, r3, #3
 80010f2:	f043 0201 	orr.w	r2, r3, #1
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010fa:	e018      	b.n	800112e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001100:	f023 0312 	bic.w	r3, r3, #18
 8001104:	f043 0210 	orr.w	r2, r3, #16
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001110:	f043 0201 	orr.w	r2, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800111c:	e007      	b.n	800112e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001122:	f043 0210 	orr.w	r2, r3, #16
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800112e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	ffe1f7fd 	.word	0xffe1f7fd
 800113c:	ff1f0efe 	.word	0xff1f0efe

08001140 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <HAL_ADC_Start+0x1a>
 8001156:	2302      	movs	r3, #2
 8001158:	e098      	b.n	800128c <HAL_ADC_Start+0x14c>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 fb92 	bl	800188c <ADC_Enable>
 8001168:	4603      	mov	r3, r0
 800116a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f040 8087 	bne.w	8001282 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800117c:	f023 0301 	bic.w	r3, r3, #1
 8001180:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a41      	ldr	r2, [pc, #260]	@ (8001294 <HAL_ADC_Start+0x154>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d105      	bne.n	800119e <HAL_ADC_Start+0x5e>
 8001192:	4b41      	ldr	r3, [pc, #260]	@ (8001298 <HAL_ADC_Start+0x158>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d115      	bne.n	80011ca <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d026      	beq.n	8001206 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011c0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011c8:	e01d      	b.n	8001206 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a2f      	ldr	r2, [pc, #188]	@ (8001298 <HAL_ADC_Start+0x158>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d004      	beq.n	80011ea <HAL_ADC_Start+0xaa>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001294 <HAL_ADC_Start+0x154>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d10d      	bne.n	8001206 <HAL_ADC_Start+0xc6>
 80011ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <HAL_ADC_Start+0x158>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d007      	beq.n	8001206 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001216:	f023 0206 	bic.w	r2, r3, #6
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800121e:	e002      	b.n	8001226 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f06f 0202 	mvn.w	r2, #2
 8001236:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001242:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001246:	d113      	bne.n	8001270 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800124c:	4a11      	ldr	r2, [pc, #68]	@ (8001294 <HAL_ADC_Start+0x154>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d105      	bne.n	800125e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <HAL_ADC_Start+0x158>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800125a:	2b00      	cmp	r3, #0
 800125c:	d108      	bne.n	8001270 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	e00c      	b.n	800128a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	e003      	b.n	800128a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40012800 	.word	0x40012800
 8001298:	40012400 	.word	0x40012400

0800129c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d101      	bne.n	80012b6 <HAL_ADC_Stop+0x1a>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e01a      	b.n	80012ec <HAL_ADC_Stop+0x50>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 fb3e 	bl	8001940 <ADC_ConversionStop_Disable>
 80012c4:	4603      	mov	r3, r0
 80012c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d109      	bne.n	80012e2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012d6:	f023 0301 	bic.w	r3, r3, #1
 80012da:	f043 0201 	orr.w	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800130a:	f7ff fe13 	bl	8000f34 <HAL_GetTick>
 800130e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00b      	beq.n	8001336 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001322:	f043 0220 	orr.w	r2, r3, #32
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0d3      	b.n	80014de <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d131      	bne.n	80013a8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800134a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800134e:	2b00      	cmp	r3, #0
 8001350:	d12a      	bne.n	80013a8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001352:	e021      	b.n	8001398 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135a:	d01d      	beq.n	8001398 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <HAL_ADC_PollForConversion+0x7e>
 8001362:	f7ff fde7 	bl	8000f34 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d212      	bcs.n	8001398 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10b      	bne.n	8001398 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001384:	f043 0204 	orr.w	r2, r3, #4
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e0a2      	b.n	80014de <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0d6      	beq.n	8001354 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013a6:	e070      	b.n	800148a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80013a8:	4b4f      	ldr	r3, [pc, #316]	@ (80014e8 <HAL_ADC_PollForConversion+0x1f4>)
 80013aa:	681c      	ldr	r4, [r3, #0]
 80013ac:	2002      	movs	r0, #2
 80013ae:	f001 fc2b 	bl	8002c08 <HAL_RCCEx_GetPeriphCLKFreq>
 80013b2:	4603      	mov	r3, r0
 80013b4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6919      	ldr	r1, [r3, #16]
 80013be:	4b4b      	ldr	r3, [pc, #300]	@ (80014ec <HAL_ADC_PollForConversion+0x1f8>)
 80013c0:	400b      	ands	r3, r1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_ADC_PollForConversion+0x104>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68d9      	ldr	r1, [r3, #12]
 80013cc:	4b48      	ldr	r3, [pc, #288]	@ (80014f0 <HAL_ADC_PollForConversion+0x1fc>)
 80013ce:	400b      	ands	r3, r1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d111      	bne.n	80013f8 <HAL_ADC_PollForConversion+0x104>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6919      	ldr	r1, [r3, #16]
 80013da:	4b46      	ldr	r3, [pc, #280]	@ (80014f4 <HAL_ADC_PollForConversion+0x200>)
 80013dc:	400b      	ands	r3, r1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d108      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x100>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68d9      	ldr	r1, [r3, #12]
 80013e8:	4b43      	ldr	r3, [pc, #268]	@ (80014f8 <HAL_ADC_PollForConversion+0x204>)
 80013ea:	400b      	ands	r3, r1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x100>
 80013f0:	2314      	movs	r3, #20
 80013f2:	e020      	b.n	8001436 <HAL_ADC_PollForConversion+0x142>
 80013f4:	2329      	movs	r3, #41	@ 0x29
 80013f6:	e01e      	b.n	8001436 <HAL_ADC_PollForConversion+0x142>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6919      	ldr	r1, [r3, #16]
 80013fe:	4b3d      	ldr	r3, [pc, #244]	@ (80014f4 <HAL_ADC_PollForConversion+0x200>)
 8001400:	400b      	ands	r3, r1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d106      	bne.n	8001414 <HAL_ADC_PollForConversion+0x120>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68d9      	ldr	r1, [r3, #12]
 800140c:	4b3a      	ldr	r3, [pc, #232]	@ (80014f8 <HAL_ADC_PollForConversion+0x204>)
 800140e:	400b      	ands	r3, r1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00d      	beq.n	8001430 <HAL_ADC_PollForConversion+0x13c>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6919      	ldr	r1, [r3, #16]
 800141a:	4b38      	ldr	r3, [pc, #224]	@ (80014fc <HAL_ADC_PollForConversion+0x208>)
 800141c:	400b      	ands	r3, r1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d108      	bne.n	8001434 <HAL_ADC_PollForConversion+0x140>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68d9      	ldr	r1, [r3, #12]
 8001428:	4b34      	ldr	r3, [pc, #208]	@ (80014fc <HAL_ADC_PollForConversion+0x208>)
 800142a:	400b      	ands	r3, r1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_ADC_PollForConversion+0x140>
 8001430:	2354      	movs	r3, #84	@ 0x54
 8001432:	e000      	b.n	8001436 <HAL_ADC_PollForConversion+0x142>
 8001434:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800143c:	e021      	b.n	8001482 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001444:	d01a      	beq.n	800147c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d007      	beq.n	800145c <HAL_ADC_PollForConversion+0x168>
 800144c:	f7ff fd72 	bl	8000f34 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d20f      	bcs.n	800147c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d90b      	bls.n	800147c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001468:	f043 0204 	orr.w	r2, r3, #4
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e030      	b.n	80014de <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3301      	adds	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	429a      	cmp	r2, r3
 8001488:	d8d9      	bhi.n	800143e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f06f 0212 	mvn.w	r2, #18
 8001492:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001498:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80014aa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80014ae:	d115      	bne.n	80014dc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d111      	bne.n	80014dc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d105      	bne.n	80014dc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd90      	pop	{r4, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000000 	.word	0x20000000
 80014ec:	24924924 	.word	0x24924924
 80014f0:	00924924 	.word	0x00924924
 80014f4:	12492492 	.word	0x12492492
 80014f8:	00492492 	.word	0x00492492
 80014fc:	00249249 	.word	0x00249249

08001500 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <HAL_ADC_Start_IT+0x1a>
 8001516:	2302      	movs	r3, #2
 8001518:	e0a0      	b.n	800165c <HAL_ADC_Start_IT+0x15c>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f9b2 	bl	800188c <ADC_Enable>
 8001528:	4603      	mov	r3, r0
 800152a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f040 808f 	bne.w	8001652 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001538:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a45      	ldr	r2, [pc, #276]	@ (8001664 <HAL_ADC_Start_IT+0x164>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d105      	bne.n	800155e <HAL_ADC_Start_IT+0x5e>
 8001552:	4b45      	ldr	r3, [pc, #276]	@ (8001668 <HAL_ADC_Start_IT+0x168>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d115      	bne.n	800158a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001562:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001574:	2b00      	cmp	r3, #0
 8001576:	d026      	beq.n	80015c6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001580:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001588:	e01d      	b.n	80015c6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a33      	ldr	r2, [pc, #204]	@ (8001668 <HAL_ADC_Start_IT+0x168>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d004      	beq.n	80015aa <HAL_ADC_Start_IT+0xaa>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001664 <HAL_ADC_Start_IT+0x164>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d10d      	bne.n	80015c6 <HAL_ADC_Start_IT+0xc6>
 80015aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001668 <HAL_ADC_Start_IT+0x168>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d006      	beq.n	80015e0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d6:	f023 0206 	bic.w	r2, r3, #6
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015de:	e002      	b.n	80015e6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f06f 0202 	mvn.w	r2, #2
 80015f6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0220 	orr.w	r2, r2, #32
 8001606:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001612:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001616:	d113      	bne.n	8001640 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800161c:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <HAL_ADC_Start_IT+0x164>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d105      	bne.n	800162e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <HAL_ADC_Start_IT+0x168>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	e00c      	b.n	800165a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	e003      	b.n	800165a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800165a:	7bfb      	ldrb	r3, [r7, #15]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40012800 	.word	0x40012800
 8001668:	40012400 	.word	0x40012400

0800166c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x20>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e0dc      	b.n	800185e <HAL_ADC_ConfigChannel+0x1da>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b06      	cmp	r3, #6
 80016b2:	d81c      	bhi.n	80016ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	3b05      	subs	r3, #5
 80016c6:	221f      	movs	r2, #31
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4019      	ands	r1, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	3b05      	subs	r3, #5
 80016e0:	fa00 f203 	lsl.w	r2, r0, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ec:	e03c      	b.n	8001768 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d81c      	bhi.n	8001730 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	3b23      	subs	r3, #35	@ 0x23
 8001708:	221f      	movs	r2, #31
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	4019      	ands	r1, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	3b23      	subs	r3, #35	@ 0x23
 8001722:	fa00 f203 	lsl.w	r2, r0, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	631a      	str	r2, [r3, #48]	@ 0x30
 800172e:	e01b      	b.n	8001768 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b41      	subs	r3, #65	@ 0x41
 8001742:	221f      	movs	r2, #31
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	4019      	ands	r1, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	3b41      	subs	r3, #65	@ 0x41
 800175c:	fa00 f203 	lsl.w	r2, r0, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b09      	cmp	r3, #9
 800176e:	d91c      	bls.n	80017aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68d9      	ldr	r1, [r3, #12]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	3b1e      	subs	r3, #30
 8001782:	2207      	movs	r2, #7
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	4019      	ands	r1, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6898      	ldr	r0, [r3, #8]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	3b1e      	subs	r3, #30
 800179c:	fa00 f203 	lsl.w	r2, r0, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	e019      	b.n	80017de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6919      	ldr	r1, [r3, #16]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	2207      	movs	r2, #7
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4019      	ands	r1, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6898      	ldr	r0, [r3, #8]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	fa00 f203 	lsl.w	r2, r0, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d003      	beq.n	80017ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017ea:	2b11      	cmp	r3, #17
 80017ec:	d132      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001868 <HAL_ADC_ConfigChannel+0x1e4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d125      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d126      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001814:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b10      	cmp	r3, #16
 800181c:	d11a      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800181e:	4b13      	ldr	r3, [pc, #76]	@ (800186c <HAL_ADC_ConfigChannel+0x1e8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a13      	ldr	r2, [pc, #76]	@ (8001870 <HAL_ADC_ConfigChannel+0x1ec>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	0c9a      	lsrs	r2, r3, #18
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001834:	e002      	b.n	800183c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3b01      	subs	r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f9      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x1b2>
 8001842:	e007      	b.n	8001854 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001848:	f043 0220 	orr.w	r2, r3, #32
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	40012400 	.word	0x40012400
 800186c:	20000000 	.word	0x20000000
 8001870:	431bde83 	.word	0x431bde83

08001874 <HAL_ADC_GetState>:
  * @brief  return the ADC state
  * @param  hadc: ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
	...

0800188c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d040      	beq.n	800192c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0201 	orr.w	r2, r2, #1
 80018b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001938 <ADC_Enable+0xac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1f      	ldr	r2, [pc, #124]	@ (800193c <ADC_Enable+0xb0>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	0c9b      	lsrs	r3, r3, #18
 80018c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018c8:	e002      	b.n	80018d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f9      	bne.n	80018ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018d6:	f7ff fb2d 	bl	8000f34 <HAL_GetTick>
 80018da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018dc:	e01f      	b.n	800191e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018de:	f7ff fb29 	bl	8000f34 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d918      	bls.n	800191e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d011      	beq.n	800191e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fe:	f043 0210 	orr.w	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190a:	f043 0201 	orr.w	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e007      	b.n	800192e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d1d8      	bne.n	80018de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000000 	.word	0x20000000
 800193c:	431bde83 	.word	0x431bde83

08001940 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b01      	cmp	r3, #1
 8001958:	d12e      	bne.n	80019b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0201 	bic.w	r2, r2, #1
 8001968:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800196a:	f7ff fae3 	bl	8000f34 <HAL_GetTick>
 800196e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001970:	e01b      	b.n	80019aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001972:	f7ff fadf 	bl	8000f34 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d914      	bls.n	80019aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b01      	cmp	r3, #1
 800198c:	d10d      	bne.n	80019aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001992:	f043 0210 	orr.w	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199e:	f043 0201 	orr.w	r2, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e007      	b.n	80019ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d0dc      	beq.n	8001972 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_ADCEx_Calibration_Start+0x1e>
 80019de:	2302      	movs	r3, #2
 80019e0:	e097      	b.n	8001b12 <HAL_ADCEx_Calibration_Start+0x14e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffa8 	bl	8001940 <ADC_ConversionStop_Disable>
 80019f0:	4603      	mov	r3, r0
 80019f2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff49 	bl	800188c <ADC_Enable>
 80019fa:	4603      	mov	r3, r0
 80019fc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f040 8081 	bne.w	8001b08 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a0e:	f023 0302 	bic.w	r3, r3, #2
 8001a12:	f043 0202 	orr.w	r2, r3, #2
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a1a:	4b40      	ldr	r3, [pc, #256]	@ (8001b1c <HAL_ADCEx_Calibration_Start+0x158>)
 8001a1c:	681c      	ldr	r4, [r3, #0]
 8001a1e:	2002      	movs	r0, #2
 8001a20:	f001 f8f2 	bl	8002c08 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a24:	4603      	mov	r3, r0
 8001a26:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001a2a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001a2c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001a2e:	e002      	b.n	8001a36 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f9      	bne.n	8001a30 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0208 	orr.w	r2, r2, #8
 8001a4a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001a4c:	f7ff fa72 	bl	8000f34 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a52:	e01b      	b.n	8001a8c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a54:	f7ff fa6e 	bl	8000f34 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b0a      	cmp	r3, #10
 8001a60:	d914      	bls.n	8001a8c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00d      	beq.n	8001a8c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a74:	f023 0312 	bic.w	r3, r3, #18
 8001a78:	f043 0210 	orr.w	r2, r3, #16
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e042      	b.n	8001b12 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1dc      	bne.n	8001a54 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0204 	orr.w	r2, r2, #4
 8001aa8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001aaa:	f7ff fa43 	bl	8000f34 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ab0:	e01b      	b.n	8001aea <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001ab2:	f7ff fa3f 	bl	8000f34 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b0a      	cmp	r3, #10
 8001abe:	d914      	bls.n	8001aea <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00d      	beq.n	8001aea <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad2:	f023 0312 	bic.w	r3, r3, #18
 8001ad6:	f043 0210 	orr.w	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e013      	b.n	8001b12 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1dc      	bne.n	8001ab2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afc:	f023 0303 	bic.w	r3, r3, #3
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000000 	.word	0x20000000

08001b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b52:	4a04      	ldr	r2, [pc, #16]	@ (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	60d3      	str	r3, [r2, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b6c:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <__NVIC_GetPriorityGrouping+0x18>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	f003 0307 	and.w	r3, r3, #7
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	db0b      	blt.n	8001bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	f003 021f 	and.w	r2, r3, #31
 8001b9c:	4906      	ldr	r1, [pc, #24]	@ (8001bb8 <__NVIC_EnableIRQ+0x34>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	095b      	lsrs	r3, r3, #5
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8001baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	e000e100 	.word	0xe000e100

08001bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0a      	blt.n	8001be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	490c      	ldr	r1, [pc, #48]	@ (8001c08 <__NVIC_SetPriority+0x4c>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be4:	e00a      	b.n	8001bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4908      	ldr	r1, [pc, #32]	@ (8001c0c <__NVIC_SetPriority+0x50>)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	3b04      	subs	r3, #4
 8001bf4:	0112      	lsls	r2, r2, #4
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	761a      	strb	r2, [r3, #24]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000e100 	.word	0xe000e100
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	@ 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f1c3 0307 	rsb	r3, r3, #7
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	bf28      	it	cs
 8001c2e:	2304      	movcs	r3, #4
 8001c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3304      	adds	r3, #4
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d902      	bls.n	8001c40 <NVIC_EncodePriority+0x30>
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3b03      	subs	r3, #3
 8001c3e:	e000      	b.n	8001c42 <NVIC_EncodePriority+0x32>
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	4313      	orrs	r3, r2
         );
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	@ 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f7ff ff90 	bl	8001bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	@ (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff2d 	bl	8001b20 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff42 	bl	8001b68 <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff90 	bl	8001c10 <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5f 	bl	8001bbc <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff35 	bl	8001b84 <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa2 	bl	8001c74 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b085      	sub	sp, #20
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d008      	beq.n	8001d64 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2204      	movs	r2, #4
 8001d56:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e020      	b.n	8001da6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 020e 	bic.w	r2, r2, #14
 8001d72:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d92:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d005      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2204      	movs	r2, #4
 8001dcc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	e051      	b.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 020e 	bic.w	r2, r2, #14
 8001de2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a22      	ldr	r2, [pc, #136]	@ (8001e84 <HAL_DMA_Abort_IT+0xd4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d029      	beq.n	8001e52 <HAL_DMA_Abort_IT+0xa2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a21      	ldr	r2, [pc, #132]	@ (8001e88 <HAL_DMA_Abort_IT+0xd8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d022      	beq.n	8001e4e <HAL_DMA_Abort_IT+0x9e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001e8c <HAL_DMA_Abort_IT+0xdc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01a      	beq.n	8001e48 <HAL_DMA_Abort_IT+0x98>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1e      	ldr	r2, [pc, #120]	@ (8001e90 <HAL_DMA_Abort_IT+0xe0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d012      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x92>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1c      	ldr	r2, [pc, #112]	@ (8001e94 <HAL_DMA_Abort_IT+0xe4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00a      	beq.n	8001e3c <HAL_DMA_Abort_IT+0x8c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001e98 <HAL_DMA_Abort_IT+0xe8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d102      	bne.n	8001e36 <HAL_DMA_Abort_IT+0x86>
 8001e30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e34:	e00e      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e3a:	e00b      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e40:	e008      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e46:	e005      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e4c:	e002      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e4e:	2310      	movs	r3, #16
 8001e50:	e000      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e52:	2301      	movs	r3, #1
 8001e54:	4a11      	ldr	r2, [pc, #68]	@ (8001e9c <HAL_DMA_Abort_IT+0xec>)
 8001e56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
    } 
  }
  return status;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40020008 	.word	0x40020008
 8001e88:	4002001c 	.word	0x4002001c
 8001e8c:	40020030 	.word	0x40020030
 8001e90:	40020044 	.word	0x40020044
 8001e94:	40020058 	.word	0x40020058
 8001e98:	4002006c 	.word	0x4002006c
 8001e9c:	40020000 	.word	0x40020000

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b08b      	sub	sp, #44	@ 0x2c
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb2:	e169      	b.n	8002188 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	f040 8158 	bne.w	8002182 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a9a      	ldr	r2, [pc, #616]	@ (8002140 <HAL_GPIO_Init+0x2a0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d05e      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001edc:	4a98      	ldr	r2, [pc, #608]	@ (8002140 <HAL_GPIO_Init+0x2a0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d875      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001ee2:	4a98      	ldr	r2, [pc, #608]	@ (8002144 <HAL_GPIO_Init+0x2a4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d058      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001ee8:	4a96      	ldr	r2, [pc, #600]	@ (8002144 <HAL_GPIO_Init+0x2a4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d86f      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001eee:	4a96      	ldr	r2, [pc, #600]	@ (8002148 <HAL_GPIO_Init+0x2a8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d052      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001ef4:	4a94      	ldr	r2, [pc, #592]	@ (8002148 <HAL_GPIO_Init+0x2a8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d869      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001efa:	4a94      	ldr	r2, [pc, #592]	@ (800214c <HAL_GPIO_Init+0x2ac>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d04c      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001f00:	4a92      	ldr	r2, [pc, #584]	@ (800214c <HAL_GPIO_Init+0x2ac>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d863      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001f06:	4a92      	ldr	r2, [pc, #584]	@ (8002150 <HAL_GPIO_Init+0x2b0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d046      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001f0c:	4a90      	ldr	r2, [pc, #576]	@ (8002150 <HAL_GPIO_Init+0x2b0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d85d      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001f12:	2b12      	cmp	r3, #18
 8001f14:	d82a      	bhi.n	8001f6c <HAL_GPIO_Init+0xcc>
 8001f16:	2b12      	cmp	r3, #18
 8001f18:	d859      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f20 <HAL_GPIO_Init+0x80>)
 8001f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f20:	08001f9b 	.word	0x08001f9b
 8001f24:	08001f75 	.word	0x08001f75
 8001f28:	08001f87 	.word	0x08001f87
 8001f2c:	08001fc9 	.word	0x08001fc9
 8001f30:	08001fcf 	.word	0x08001fcf
 8001f34:	08001fcf 	.word	0x08001fcf
 8001f38:	08001fcf 	.word	0x08001fcf
 8001f3c:	08001fcf 	.word	0x08001fcf
 8001f40:	08001fcf 	.word	0x08001fcf
 8001f44:	08001fcf 	.word	0x08001fcf
 8001f48:	08001fcf 	.word	0x08001fcf
 8001f4c:	08001fcf 	.word	0x08001fcf
 8001f50:	08001fcf 	.word	0x08001fcf
 8001f54:	08001fcf 	.word	0x08001fcf
 8001f58:	08001fcf 	.word	0x08001fcf
 8001f5c:	08001fcf 	.word	0x08001fcf
 8001f60:	08001fcf 	.word	0x08001fcf
 8001f64:	08001f7d 	.word	0x08001f7d
 8001f68:	08001f91 	.word	0x08001f91
 8001f6c:	4a79      	ldr	r2, [pc, #484]	@ (8002154 <HAL_GPIO_Init+0x2b4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f72:	e02c      	b.n	8001fce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	623b      	str	r3, [r7, #32]
          break;
 8001f7a:	e029      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	3304      	adds	r3, #4
 8001f82:	623b      	str	r3, [r7, #32]
          break;
 8001f84:	e024      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e01f      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	330c      	adds	r3, #12
 8001f96:	623b      	str	r3, [r7, #32]
          break;
 8001f98:	e01a      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	623b      	str	r3, [r7, #32]
          break;
 8001fa6:	e013      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d105      	bne.n	8001fbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	611a      	str	r2, [r3, #16]
          break;
 8001fba:	e009      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	615a      	str	r2, [r3, #20]
          break;
 8001fc6:	e003      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
          break;
 8001fcc:	e000      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          break;
 8001fce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2bff      	cmp	r3, #255	@ 0xff
 8001fd4:	d801      	bhi.n	8001fda <HAL_GPIO_Init+0x13a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	e001      	b.n	8001fde <HAL_GPIO_Init+0x13e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2bff      	cmp	r3, #255	@ 0xff
 8001fe4:	d802      	bhi.n	8001fec <HAL_GPIO_Init+0x14c>
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	e002      	b.n	8001ff2 <HAL_GPIO_Init+0x152>
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	3b08      	subs	r3, #8
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	210f      	movs	r1, #15
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	401a      	ands	r2, r3
 8002004:	6a39      	ldr	r1, [r7, #32]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	431a      	orrs	r2, r3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80b1 	beq.w	8002182 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002020:	4b4d      	ldr	r3, [pc, #308]	@ (8002158 <HAL_GPIO_Init+0x2b8>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4a4c      	ldr	r2, [pc, #304]	@ (8002158 <HAL_GPIO_Init+0x2b8>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6193      	str	r3, [r2, #24]
 800202c:	4b4a      	ldr	r3, [pc, #296]	@ (8002158 <HAL_GPIO_Init+0x2b8>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002038:	4a48      	ldr	r2, [pc, #288]	@ (800215c <HAL_GPIO_Init+0x2bc>)
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002044:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a40      	ldr	r2, [pc, #256]	@ (8002160 <HAL_GPIO_Init+0x2c0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d013      	beq.n	800208c <HAL_GPIO_Init+0x1ec>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a3f      	ldr	r2, [pc, #252]	@ (8002164 <HAL_GPIO_Init+0x2c4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00d      	beq.n	8002088 <HAL_GPIO_Init+0x1e8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a3e      	ldr	r2, [pc, #248]	@ (8002168 <HAL_GPIO_Init+0x2c8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d007      	beq.n	8002084 <HAL_GPIO_Init+0x1e4>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a3d      	ldr	r2, [pc, #244]	@ (800216c <HAL_GPIO_Init+0x2cc>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d101      	bne.n	8002080 <HAL_GPIO_Init+0x1e0>
 800207c:	2303      	movs	r3, #3
 800207e:	e006      	b.n	800208e <HAL_GPIO_Init+0x1ee>
 8002080:	2304      	movs	r3, #4
 8002082:	e004      	b.n	800208e <HAL_GPIO_Init+0x1ee>
 8002084:	2302      	movs	r3, #2
 8002086:	e002      	b.n	800208e <HAL_GPIO_Init+0x1ee>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_GPIO_Init+0x1ee>
 800208c:	2300      	movs	r3, #0
 800208e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002090:	f002 0203 	and.w	r2, r2, #3
 8002094:	0092      	lsls	r2, r2, #2
 8002096:	4093      	lsls	r3, r2
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800209e:	492f      	ldr	r1, [pc, #188]	@ (800215c <HAL_GPIO_Init+0x2bc>)
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	3302      	adds	r3, #2
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d006      	beq.n	80020c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002170 <HAL_GPIO_Init+0x2d0>)
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	492c      	ldr	r1, [pc, #176]	@ (8002170 <HAL_GPIO_Init+0x2d0>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]
 80020c4:	e006      	b.n	80020d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <HAL_GPIO_Init+0x2d0>)
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	4928      	ldr	r1, [pc, #160]	@ (8002170 <HAL_GPIO_Init+0x2d0>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020e0:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <HAL_GPIO_Init+0x2d0>)
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	4922      	ldr	r1, [pc, #136]	@ (8002170 <HAL_GPIO_Init+0x2d0>)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60cb      	str	r3, [r1, #12]
 80020ec:	e006      	b.n	80020fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ee:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <HAL_GPIO_Init+0x2d0>)
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	491e      	ldr	r1, [pc, #120]	@ (8002170 <HAL_GPIO_Init+0x2d0>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d006      	beq.n	8002116 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002108:	4b19      	ldr	r3, [pc, #100]	@ (8002170 <HAL_GPIO_Init+0x2d0>)
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	4918      	ldr	r1, [pc, #96]	@ (8002170 <HAL_GPIO_Init+0x2d0>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
 8002114:	e006      	b.n	8002124 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002116:	4b16      	ldr	r3, [pc, #88]	@ (8002170 <HAL_GPIO_Init+0x2d0>)
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	43db      	mvns	r3, r3
 800211e:	4914      	ldr	r1, [pc, #80]	@ (8002170 <HAL_GPIO_Init+0x2d0>)
 8002120:	4013      	ands	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d021      	beq.n	8002174 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002130:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <HAL_GPIO_Init+0x2d0>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	490e      	ldr	r1, [pc, #56]	@ (8002170 <HAL_GPIO_Init+0x2d0>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
 800213c:	e021      	b.n	8002182 <HAL_GPIO_Init+0x2e2>
 800213e:	bf00      	nop
 8002140:	10320000 	.word	0x10320000
 8002144:	10310000 	.word	0x10310000
 8002148:	10220000 	.word	0x10220000
 800214c:	10210000 	.word	0x10210000
 8002150:	10120000 	.word	0x10120000
 8002154:	10110000 	.word	0x10110000
 8002158:	40021000 	.word	0x40021000
 800215c:	40010000 	.word	0x40010000
 8002160:	40010800 	.word	0x40010800
 8002164:	40010c00 	.word	0x40010c00
 8002168:	40011000 	.word	0x40011000
 800216c:	40011400 	.word	0x40011400
 8002170:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002174:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <HAL_GPIO_Init+0x304>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	43db      	mvns	r3, r3
 800217c:	4909      	ldr	r1, [pc, #36]	@ (80021a4 <HAL_GPIO_Init+0x304>)
 800217e:	4013      	ands	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	3301      	adds	r3, #1
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218e:	fa22 f303 	lsr.w	r3, r2, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	f47f ae8e 	bne.w	8001eb4 <HAL_GPIO_Init+0x14>
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	372c      	adds	r7, #44	@ 0x2c
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	40010400 	.word	0x40010400

080021a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e001      	b.n	80021ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	807b      	strh	r3, [r7, #2]
 80021e2:	4613      	mov	r3, r2
 80021e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021e6:	787b      	ldrb	r3, [r7, #1]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ec:	887a      	ldrh	r2, [r7, #2]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021f2:	e003      	b.n	80021fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021f4:	887b      	ldrh	r3, [r7, #2]
 80021f6:	041a      	lsls	r2, r3, #16
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	611a      	str	r2, [r3, #16]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr

08002206 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002206:	b480      	push	{r7}
 8002208:	b085      	sub	sp, #20
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002218:	887a      	ldrh	r2, [r7, #2]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4013      	ands	r3, r2
 800221e:	041a      	lsls	r2, r3, #16
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43d9      	mvns	r1, r3
 8002224:	887b      	ldrh	r3, [r7, #2]
 8002226:	400b      	ands	r3, r1
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	611a      	str	r2, [r3, #16]
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002242:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d006      	beq.n	800225c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800224e:	4a05      	ldr	r2, [pc, #20]	@ (8002264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002254:	88fb      	ldrh	r3, [r7, #6]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f806 	bl	8002268 <HAL_GPIO_EXTI_Callback>
  }
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40010400 	.word	0x40010400

08002268 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e272      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8087 	beq.w	80023aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800229c:	4b92      	ldr	r3, [pc, #584]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d00c      	beq.n	80022c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022a8:	4b8f      	ldr	r3, [pc, #572]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d112      	bne.n	80022da <HAL_RCC_OscConfig+0x5e>
 80022b4:	4b8c      	ldr	r3, [pc, #560]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c0:	d10b      	bne.n	80022da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c2:	4b89      	ldr	r3, [pc, #548]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d06c      	beq.n	80023a8 <HAL_RCC_OscConfig+0x12c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d168      	bne.n	80023a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e24c      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x76>
 80022e4:	4b80      	ldr	r3, [pc, #512]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a7f      	ldr	r2, [pc, #508]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	e02e      	b.n	8002350 <HAL_RCC_OscConfig+0xd4>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x98>
 80022fa:	4b7b      	ldr	r3, [pc, #492]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a7a      	ldr	r2, [pc, #488]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002300:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b78      	ldr	r3, [pc, #480]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a77      	ldr	r2, [pc, #476]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e01d      	b.n	8002350 <HAL_RCC_OscConfig+0xd4>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0xbc>
 800231e:	4b72      	ldr	r3, [pc, #456]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a71      	ldr	r2, [pc, #452]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b6f      	ldr	r3, [pc, #444]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a6e      	ldr	r2, [pc, #440]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e00b      	b.n	8002350 <HAL_RCC_OscConfig+0xd4>
 8002338:	4b6b      	ldr	r3, [pc, #428]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6a      	ldr	r2, [pc, #424]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800233e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b68      	ldr	r3, [pc, #416]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a67      	ldr	r2, [pc, #412]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800234a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800234e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d013      	beq.n	8002380 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe fdec 	bl	8000f34 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002360:	f7fe fde8 	bl	8000f34 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	@ 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e200      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b5d      	ldr	r3, [pc, #372]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0xe4>
 800237e:	e014      	b.n	80023aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7fe fdd8 	bl	8000f34 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002388:	f7fe fdd4 	bl	8000f34 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	@ 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e1ec      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239a:	4b53      	ldr	r3, [pc, #332]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x10c>
 80023a6:	e000      	b.n	80023aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d063      	beq.n	800247e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b6:	4b4c      	ldr	r3, [pc, #304]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023c2:	4b49      	ldr	r3, [pc, #292]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d11c      	bne.n	8002408 <HAL_RCC_OscConfig+0x18c>
 80023ce:	4b46      	ldr	r3, [pc, #280]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d116      	bne.n	8002408 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023da:	4b43      	ldr	r3, [pc, #268]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_RCC_OscConfig+0x176>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d001      	beq.n	80023f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e1c0      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f2:	4b3d      	ldr	r3, [pc, #244]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4939      	ldr	r1, [pc, #228]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002406:	e03a      	b.n	800247e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002410:	4b36      	ldr	r3, [pc, #216]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe fd8d 	bl	8000f34 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241e:	f7fe fd89 	bl	8000f34 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e1a1      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002430:	4b2d      	ldr	r3, [pc, #180]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	4b2a      	ldr	r3, [pc, #168]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4927      	ldr	r1, [pc, #156]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800244c:	4313      	orrs	r3, r2
 800244e:	600b      	str	r3, [r1, #0]
 8002450:	e015      	b.n	800247e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002452:	4b26      	ldr	r3, [pc, #152]	@ (80024ec <HAL_RCC_OscConfig+0x270>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe fd6c 	bl	8000f34 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002460:	f7fe fd68 	bl	8000f34 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e180      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002472:	4b1d      	ldr	r3, [pc, #116]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d03a      	beq.n	8002500 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d019      	beq.n	80024c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002492:	4b17      	ldr	r3, [pc, #92]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002498:	f7fe fd4c 	bl	8000f34 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a0:	f7fe fd48 	bl	8000f34 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e160      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b2:	4b0d      	ldr	r3, [pc, #52]	@ (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024be:	2001      	movs	r0, #1
 80024c0:	f000 face 	bl	8002a60 <RCC_Delay>
 80024c4:	e01c      	b.n	8002500 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c6:	4b0a      	ldr	r3, [pc, #40]	@ (80024f0 <HAL_RCC_OscConfig+0x274>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7fe fd32 	bl	8000f34 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d2:	e00f      	b.n	80024f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d4:	f7fe fd2e 	bl	8000f34 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d908      	bls.n	80024f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e146      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	42420000 	.word	0x42420000
 80024f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	4b92      	ldr	r3, [pc, #584]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e9      	bne.n	80024d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80a6 	beq.w	800265a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002512:	4b8b      	ldr	r3, [pc, #556]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10d      	bne.n	800253a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	4b88      	ldr	r3, [pc, #544]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	4a87      	ldr	r2, [pc, #540]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002528:	61d3      	str	r3, [r2, #28]
 800252a:	4b85      	ldr	r3, [pc, #532]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002536:	2301      	movs	r3, #1
 8002538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253a:	4b82      	ldr	r3, [pc, #520]	@ (8002744 <HAL_RCC_OscConfig+0x4c8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d118      	bne.n	8002578 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002546:	4b7f      	ldr	r3, [pc, #508]	@ (8002744 <HAL_RCC_OscConfig+0x4c8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a7e      	ldr	r2, [pc, #504]	@ (8002744 <HAL_RCC_OscConfig+0x4c8>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002552:	f7fe fcef 	bl	8000f34 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255a:	f7fe fceb 	bl	8000f34 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b64      	cmp	r3, #100	@ 0x64
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e103      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	4b75      	ldr	r3, [pc, #468]	@ (8002744 <HAL_RCC_OscConfig+0x4c8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x312>
 8002580:	4b6f      	ldr	r3, [pc, #444]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4a6e      	ldr	r2, [pc, #440]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6213      	str	r3, [r2, #32]
 800258c:	e02d      	b.n	80025ea <HAL_RCC_OscConfig+0x36e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x334>
 8002596:	4b6a      	ldr	r3, [pc, #424]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a69      	ldr	r2, [pc, #420]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	6213      	str	r3, [r2, #32]
 80025a2:	4b67      	ldr	r3, [pc, #412]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a66      	ldr	r2, [pc, #408]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	f023 0304 	bic.w	r3, r3, #4
 80025ac:	6213      	str	r3, [r2, #32]
 80025ae:	e01c      	b.n	80025ea <HAL_RCC_OscConfig+0x36e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d10c      	bne.n	80025d2 <HAL_RCC_OscConfig+0x356>
 80025b8:	4b61      	ldr	r3, [pc, #388]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4a60      	ldr	r2, [pc, #384]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	6213      	str	r3, [r2, #32]
 80025c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6213      	str	r3, [r2, #32]
 80025d0:	e00b      	b.n	80025ea <HAL_RCC_OscConfig+0x36e>
 80025d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	6213      	str	r3, [r2, #32]
 80025de:	4b58      	ldr	r3, [pc, #352]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4a57      	ldr	r2, [pc, #348]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	f023 0304 	bic.w	r3, r3, #4
 80025e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d015      	beq.n	800261e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f2:	f7fe fc9f 	bl	8000f34 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fe fc9b 	bl	8000f34 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e0b1      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002610:	4b4b      	ldr	r3, [pc, #300]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ee      	beq.n	80025fa <HAL_RCC_OscConfig+0x37e>
 800261c:	e014      	b.n	8002648 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7fe fc89 	bl	8000f34 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002624:	e00a      	b.n	800263c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7fe fc85 	bl	8000f34 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e09b      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263c:	4b40      	ldr	r3, [pc, #256]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ee      	bne.n	8002626 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d105      	bne.n	800265a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264e:	4b3c      	ldr	r3, [pc, #240]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	4a3b      	ldr	r2, [pc, #236]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002658:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8087 	beq.w	8002772 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002664:	4b36      	ldr	r3, [pc, #216]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b08      	cmp	r3, #8
 800266e:	d061      	beq.n	8002734 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d146      	bne.n	8002706 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002678:	4b33      	ldr	r3, [pc, #204]	@ (8002748 <HAL_RCC_OscConfig+0x4cc>)
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7fe fc59 	bl	8000f34 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002686:	f7fe fc55 	bl	8000f34 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e06d      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002698:	4b29      	ldr	r3, [pc, #164]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ac:	d108      	bne.n	80026c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026ae:	4b24      	ldr	r3, [pc, #144]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	4921      	ldr	r1, [pc, #132]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a19      	ldr	r1, [r3, #32]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d0:	430b      	orrs	r3, r1
 80026d2:	491b      	ldr	r1, [pc, #108]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002748 <HAL_RCC_OscConfig+0x4cc>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fe fc29 	bl	8000f34 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fe fc25 	bl	8000f34 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e03d      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f8:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x46a>
 8002704:	e035      	b.n	8002772 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <HAL_RCC_OscConfig+0x4cc>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe fc12 	bl	8000f34 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe fc0e 	bl	8000f34 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e026      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x498>
 8002732:	e01e      	b.n	8002772 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d107      	bne.n	800274c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e019      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
 8002740:	40021000 	.word	0x40021000
 8002744:	40007000 	.word	0x40007000
 8002748:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <HAL_RCC_OscConfig+0x500>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	429a      	cmp	r2, r3
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000

08002780 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0d0      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002794:	4b6a      	ldr	r3, [pc, #424]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d910      	bls.n	80027c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b67      	ldr	r3, [pc, #412]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 0207 	bic.w	r2, r3, #7
 80027aa:	4965      	ldr	r1, [pc, #404]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b63      	ldr	r3, [pc, #396]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0b8      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027dc:	4b59      	ldr	r3, [pc, #356]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a58      	ldr	r2, [pc, #352]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f4:	4b53      	ldr	r3, [pc, #332]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4a52      	ldr	r2, [pc, #328]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002800:	4b50      	ldr	r3, [pc, #320]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	494d      	ldr	r1, [pc, #308]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d040      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d115      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	4b41      	ldr	r3, [pc, #260]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e073      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	4b3d      	ldr	r3, [pc, #244]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e06b      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285e:	4b39      	ldr	r3, [pc, #228]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4936      	ldr	r1, [pc, #216]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002870:	f7fe fb60 	bl	8000f34 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	e00a      	b.n	800288e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002878:	f7fe fb5c 	bl	8000f34 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e053      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4b2d      	ldr	r3, [pc, #180]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 020c 	and.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	429a      	cmp	r2, r3
 800289e:	d1eb      	bne.n	8002878 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a0:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d210      	bcs.n	80028d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b24      	ldr	r3, [pc, #144]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 0207 	bic.w	r2, r3, #7
 80028b6:	4922      	ldr	r1, [pc, #136]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e032      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028dc:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4916      	ldr	r1, [pc, #88]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	490e      	ldr	r1, [pc, #56]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800290e:	f000 f821 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	490a      	ldr	r1, [pc, #40]	@ (8002948 <HAL_RCC_ClockConfig+0x1c8>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	4a09      	ldr	r2, [pc, #36]	@ (800294c <HAL_RCC_ClockConfig+0x1cc>)
 8002928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_RCC_ClockConfig+0x1d0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fabe 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40022000 	.word	0x40022000
 8002944:	40021000 	.word	0x40021000
 8002948:	080049d8 	.word	0x080049d8
 800294c:	20000000 	.word	0x20000000
 8002950:	20000004 	.word	0x20000004

08002954 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800296e:	4b1e      	ldr	r3, [pc, #120]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b04      	cmp	r3, #4
 800297c:	d002      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x30>
 800297e:	2b08      	cmp	r3, #8
 8002980:	d003      	beq.n	800298a <HAL_RCC_GetSysClockFreq+0x36>
 8002982:	e027      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002984:	4b19      	ldr	r3, [pc, #100]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002986:	613b      	str	r3, [r7, #16]
      break;
 8002988:	e027      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	0c9b      	lsrs	r3, r3, #18
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	4a17      	ldr	r2, [pc, #92]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002994:	5cd3      	ldrb	r3, [r2, r3]
 8002996:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029a2:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	0c5b      	lsrs	r3, r3, #17
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	4a11      	ldr	r2, [pc, #68]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a0d      	ldr	r2, [pc, #52]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x98>)
 80029b6:	fb03 f202 	mul.w	r2, r3, r2
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e004      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a0c      	ldr	r2, [pc, #48]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	613b      	str	r3, [r7, #16]
      break;
 80029d2:	e002      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029d4:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x98>)
 80029d6:	613b      	str	r3, [r7, #16]
      break;
 80029d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029da:	693b      	ldr	r3, [r7, #16]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	007a1200 	.word	0x007a1200
 80029f0:	080049f0 	.word	0x080049f0
 80029f4:	08004a00 	.word	0x08004a00
 80029f8:	003d0900 	.word	0x003d0900

080029fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a00:	4b02      	ldr	r3, [pc, #8]	@ (8002a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	20000000 	.word	0x20000000

08002a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a14:	f7ff fff2 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4903      	ldr	r1, [pc, #12]	@ (8002a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000
 8002a34:	080049e8 	.word	0x080049e8

08002a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a3c:	f7ff ffde 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	0adb      	lsrs	r3, r3, #11
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	4903      	ldr	r1, [pc, #12]	@ (8002a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a4e:	5ccb      	ldrb	r3, [r1, r3]
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	080049e8 	.word	0x080049e8

08002a60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a68:	4b0a      	ldr	r3, [pc, #40]	@ (8002a94 <RCC_Delay+0x34>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a98 <RCC_Delay+0x38>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	0a5b      	lsrs	r3, r3, #9
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a7c:	bf00      	nop
  }
  while (Delay --);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1e5a      	subs	r2, r3, #1
 8002a82:	60fa      	str	r2, [r7, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f9      	bne.n	8002a7c <RCC_Delay+0x1c>
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	20000000 	.word	0x20000000
 8002a98:	10624dd3 	.word	0x10624dd3

08002a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d07d      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002abc:	4b4f      	ldr	r3, [pc, #316]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10d      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	4a4b      	ldr	r2, [pc, #300]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad2:	61d3      	str	r3, [r2, #28]
 8002ad4:	4b49      	ldr	r3, [pc, #292]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	4b46      	ldr	r3, [pc, #280]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d118      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af0:	4b43      	ldr	r3, [pc, #268]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a42      	ldr	r2, [pc, #264]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002afa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afc:	f7fe fa1a 	bl	8000f34 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b02:	e008      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b04:	f7fe fa16 	bl	8000f34 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	@ 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e06d      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	4b3a      	ldr	r3, [pc, #232]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b22:	4b36      	ldr	r3, [pc, #216]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d02e      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d027      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b40:	4b2e      	ldr	r3, [pc, #184]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b50:	4b2c      	ldr	r3, [pc, #176]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b56:	4a29      	ldr	r2, [pc, #164]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d014      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fe f9e5 	bl	8000f34 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe f9e1 	bl	8000f34 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e036      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ee      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b90:	4b1a      	ldr	r3, [pc, #104]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4917      	ldr	r1, [pc, #92]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba8:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	4a13      	ldr	r2, [pc, #76]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	490b      	ldr	r1, [pc, #44]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bde:	4b07      	ldr	r3, [pc, #28]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	4904      	ldr	r1, [pc, #16]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40007000 	.word	0x40007000
 8002c04:	42420440 	.word	0x42420440

08002c08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	2300      	movs	r3, #0
 8002c22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	f200 808a 	bhi.w	8002d46 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d045      	beq.n	8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d075      	beq.n	8002d2a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002c3e:	e082      	b.n	8002d46 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002c40:	4b46      	ldr	r3, [pc, #280]	@ (8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c46:	4b45      	ldr	r3, [pc, #276]	@ (8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d07b      	beq.n	8002d4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	0c9b      	lsrs	r3, r3, #18
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	4a41      	ldr	r2, [pc, #260]	@ (8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002c5c:	5cd3      	ldrb	r3, [r2, r3]
 8002c5e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d015      	beq.n	8002c96 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	0c5b      	lsrs	r3, r3, #17
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	4a3b      	ldr	r2, [pc, #236]	@ (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00d      	beq.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c84:	4a38      	ldr	r2, [pc, #224]	@ (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	61fb      	str	r3, [r7, #28]
 8002c94:	e004      	b.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4a34      	ldr	r2, [pc, #208]	@ (8002d6c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ca8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cac:	d102      	bne.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	61bb      	str	r3, [r7, #24]
      break;
 8002cb2:	e04a      	b.n	8002d4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	61bb      	str	r3, [r7, #24]
      break;
 8002cc2:	e042      	b.n	8002d4a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002cc4:	4b25      	ldr	r3, [pc, #148]	@ (8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cd4:	d108      	bne.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002ce0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e01f      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cf2:	d109      	bne.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002cf4:	4b19      	ldr	r3, [pc, #100]	@ (8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002d00:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	e00f      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d12:	d11c      	bne.n	8002d4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d14:	4b11      	ldr	r3, [pc, #68]	@ (8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d016      	beq.n	8002d4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002d20:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002d24:	61bb      	str	r3, [r7, #24]
      break;
 8002d26:	e012      	b.n	8002d4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d28:	e011      	b.n	8002d4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002d2a:	f7ff fe85 	bl	8002a38 <HAL_RCC_GetPCLK2Freq>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	0b9b      	lsrs	r3, r3, #14
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	61bb      	str	r3, [r7, #24]
      break;
 8002d44:	e004      	b.n	8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d46:	bf00      	nop
 8002d48:	e002      	b.n	8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e000      	b.n	8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d4e:	bf00      	nop
    }
  }
  return (frequency);
 8002d50:	69bb      	ldr	r3, [r7, #24]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3720      	adds	r7, #32
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	08004a04 	.word	0x08004a04
 8002d64:	08004a14 	.word	0x08004a14
 8002d68:	007a1200 	.word	0x007a1200
 8002d6c:	003d0900 	.word	0x003d0900
 8002d70:	aaaaaaab 	.word	0xaaaaaaab

08002d74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e042      	b.n	8002e0c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fd fef2 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2224      	movs	r2, #36	@ 0x24
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002db6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fdb7 	bl	800392c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ddc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	@ 0x28
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	4613      	mov	r3, r2
 8002e22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d175      	bne.n	8002f20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <HAL_UART_Transmit+0x2c>
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e06e      	b.n	8002f22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2221      	movs	r2, #33	@ 0x21
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e52:	f7fe f86f 	bl	8000f34 <HAL_GetTick>
 8002e56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	88fa      	ldrh	r2, [r7, #6]
 8002e5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	88fa      	ldrh	r2, [r7, #6]
 8002e62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e6c:	d108      	bne.n	8002e80 <HAL_UART_Transmit+0x6c>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d104      	bne.n	8002e80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	e003      	b.n	8002e88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e88:	e02e      	b.n	8002ee8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2180      	movs	r1, #128	@ 0x80
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fb1c 	bl	80034d2 <UART_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e03a      	b.n	8002f22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10b      	bne.n	8002eca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ec0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	e007      	b.n	8002eda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	781a      	ldrb	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1cb      	bne.n	8002e8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2140      	movs	r1, #64	@ 0x40
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fae8 	bl	80034d2 <UART_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e006      	b.n	8002f22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	e000      	b.n	8002f22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f20:	2302      	movs	r3, #2
  }
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	4613      	mov	r3, r2
 8002f36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d112      	bne.n	8002f6a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_UART_Receive_IT+0x26>
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e00b      	b.n	8002f6c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fb0f 	bl	8003584 <UART_Start_Receive_IT>
 8002f66:	4603      	mov	r3, r0
 8002f68:	e000      	b.n	8002f6c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b0ba      	sub	sp, #232	@ 0xe8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_UART_IRQHandler+0x66>
 8002fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fbec 	bl	80037b0 <UART_Receive_IT>
      return;
 8002fd8:	e25b      	b.n	8003492 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80de 	beq.w	80031a0 <HAL_UART_IRQHandler+0x22c>
 8002fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d106      	bne.n	8002ffe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ff4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80d1 	beq.w	80031a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_UART_IRQHandler+0xae>
 800300a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800300e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_UART_IRQHandler+0xd2>
 800302e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	f043 0202 	orr.w	r2, r3, #2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00b      	beq.n	800306a <HAL_UART_IRQHandler+0xf6>
 8003052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	f043 0204 	orr.w	r2, r3, #4
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800306a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d011      	beq.n	800309a <HAL_UART_IRQHandler+0x126>
 8003076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	f043 0208 	orr.w	r2, r3, #8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 81f2 	beq.w	8003488 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_UART_IRQHandler+0x14e>
 80030b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fb77 	bl	80037b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <HAL_UART_IRQHandler+0x17a>
 80030e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d04f      	beq.n	800318e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fa81 	bl	80035f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d041      	beq.n	8003186 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3314      	adds	r3, #20
 8003108:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003118:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800311c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3314      	adds	r3, #20
 800312a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800312e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003132:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800313a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1d9      	bne.n	8003102 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d013      	beq.n	800317e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315a:	4a7e      	ldr	r2, [pc, #504]	@ (8003354 <HAL_UART_IRQHandler+0x3e0>)
 800315c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe fe24 	bl	8001db0 <HAL_DMA_Abort_IT>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d016      	beq.n	800319c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003178:	4610      	mov	r0, r2
 800317a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317c:	e00e      	b.n	800319c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f993 	bl	80034aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003184:	e00a      	b.n	800319c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f98f 	bl	80034aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318c:	e006      	b.n	800319c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f98b 	bl	80034aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800319a:	e175      	b.n	8003488 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319c:	bf00      	nop
    return;
 800319e:	e173      	b.n	8003488 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	f040 814f 	bne.w	8003448 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8148 	beq.w	8003448 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8141 	beq.w	8003448 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 80b6 	beq.w	8003358 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8145 	beq.w	800348c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800320a:	429a      	cmp	r2, r3
 800320c:	f080 813e 	bcs.w	800348c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003216:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b20      	cmp	r3, #32
 8003220:	f000 8088 	beq.w	8003334 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800323a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800323e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003242:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	330c      	adds	r3, #12
 800324c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003250:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003254:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800325c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003260:	e841 2300 	strex	r3, r2, [r1]
 8003264:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003268:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1d9      	bne.n	8003224 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3314      	adds	r3, #20
 8003276:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003278:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800327a:	e853 3f00 	ldrex	r3, [r3]
 800327e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003280:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003282:	f023 0301 	bic.w	r3, r3, #1
 8003286:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3314      	adds	r3, #20
 8003290:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003294:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003298:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800329c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80032a0:	e841 2300 	strex	r3, r2, [r1]
 80032a4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80032a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e1      	bne.n	8003270 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3314      	adds	r3, #20
 80032b2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3314      	adds	r3, #20
 80032cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032d0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032d8:	e841 2300 	strex	r3, r2, [r1]
 80032dc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80032de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e3      	bne.n	80032ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	330c      	adds	r3, #12
 80032f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003304:	f023 0310 	bic.w	r3, r3, #16
 8003308:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	330c      	adds	r3, #12
 8003312:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003316:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003318:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800331c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800331e:	e841 2300 	strex	r3, r2, [r1]
 8003322:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1e3      	bne.n	80032f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe fd03 	bl	8001d3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003342:	b29b      	uxth	r3, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	b29b      	uxth	r3, r3
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f8b6 	bl	80034bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003350:	e09c      	b.n	800348c <HAL_UART_IRQHandler+0x518>
 8003352:	bf00      	nop
 8003354:	080036bb 	.word	0x080036bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003360:	b29b      	uxth	r3, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 808e 	beq.w	8003490 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8089 	beq.w	8003490 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	330c      	adds	r3, #12
 8003384:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800338e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003390:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003394:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80033a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80033a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e3      	bne.n	800337e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3314      	adds	r3, #20
 80033bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	623b      	str	r3, [r7, #32]
   return(result);
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3314      	adds	r3, #20
 80033d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033da:	633a      	str	r2, [r7, #48]	@ 0x30
 80033dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e3      	bne.n	80033b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	60fb      	str	r3, [r7, #12]
   return(result);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0310 	bic.w	r3, r3, #16
 8003412:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	330c      	adds	r3, #12
 800341c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003420:	61fa      	str	r2, [r7, #28]
 8003422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	69b9      	ldr	r1, [r7, #24]
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	e841 2300 	strex	r3, r2, [r1]
 800342c:	617b      	str	r3, [r7, #20]
   return(result);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e3      	bne.n	80033fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800343a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800343e:	4619      	mov	r1, r3
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f83b 	bl	80034bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003446:	e023      	b.n	8003490 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800344c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003450:	2b00      	cmp	r3, #0
 8003452:	d009      	beq.n	8003468 <HAL_UART_IRQHandler+0x4f4>
 8003454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f93e 	bl	80036e2 <UART_Transmit_IT>
    return;
 8003466:	e014      	b.n	8003492 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800346c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00e      	beq.n	8003492 <HAL_UART_IRQHandler+0x51e>
 8003474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f97d 	bl	8003780 <UART_EndTransmit_IT>
    return;
 8003486:	e004      	b.n	8003492 <HAL_UART_IRQHandler+0x51e>
    return;
 8003488:	bf00      	nop
 800348a:	e002      	b.n	8003492 <HAL_UART_IRQHandler+0x51e>
      return;
 800348c:	bf00      	nop
 800348e:	e000      	b.n	8003492 <HAL_UART_IRQHandler+0x51e>
      return;
 8003490:	bf00      	nop
  }
}
 8003492:	37e8      	adds	r7, #232	@ 0xe8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b086      	sub	sp, #24
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	4613      	mov	r3, r2
 80034e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e2:	e03b      	b.n	800355c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ea:	d037      	beq.n	800355c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ec:	f7fd fd22 	bl	8000f34 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	6a3a      	ldr	r2, [r7, #32]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d302      	bcc.n	8003502 <UART_WaitOnFlagUntilTimeout+0x30>
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e03a      	b.n	800357c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d023      	beq.n	800355c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b80      	cmp	r3, #128	@ 0x80
 8003518:	d020      	beq.n	800355c <UART_WaitOnFlagUntilTimeout+0x8a>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b40      	cmp	r3, #64	@ 0x40
 800351e:	d01d      	beq.n	800355c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b08      	cmp	r3, #8
 800352c:	d116      	bne.n	800355c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f856 	bl	80035f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2208      	movs	r2, #8
 800354e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e00f      	b.n	800357c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	429a      	cmp	r2, r3
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	429a      	cmp	r2, r3
 8003578:	d0b4      	beq.n	80034e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	4613      	mov	r3, r2
 8003590:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	88fa      	ldrh	r2, [r7, #6]
 80035a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2222      	movs	r2, #34	@ 0x22
 80035ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0201 	orr.w	r2, r2, #1
 80035d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0220 	orr.w	r2, r2, #32
 80035e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b095      	sub	sp, #84	@ 0x54
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800360e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800361e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003620:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003624:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800362c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e5      	bne.n	80035fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3314      	adds	r3, #20
 8003638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	e853 3f00 	ldrex	r3, [r3]
 8003640:	61fb      	str	r3, [r7, #28]
   return(result);
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f023 0301 	bic.w	r3, r3, #1
 8003648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3314      	adds	r3, #20
 8003650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003652:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003654:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e5      	bne.n	8003632 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	2b01      	cmp	r3, #1
 800366c:	d119      	bne.n	80036a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	330c      	adds	r3, #12
 8003674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	60bb      	str	r3, [r7, #8]
   return(result);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f023 0310 	bic.w	r3, r3, #16
 8003684:	647b      	str	r3, [r7, #68]	@ 0x44
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	330c      	adds	r3, #12
 800368c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800368e:	61ba      	str	r2, [r7, #24]
 8003690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	6979      	ldr	r1, [r7, #20]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	613b      	str	r3, [r7, #16]
   return(result);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e5      	bne.n	800366e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036b0:	bf00      	nop
 80036b2:	3754      	adds	r7, #84	@ 0x54
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff fee8 	bl	80034aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b21      	cmp	r3, #33	@ 0x21
 80036f4:	d13e      	bne.n	8003774 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036fe:	d114      	bne.n	800372a <UART_Transmit_IT+0x48>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d110      	bne.n	800372a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800371c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	1c9a      	adds	r2, r3, #2
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	621a      	str	r2, [r3, #32]
 8003728:	e008      	b.n	800373c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	1c59      	adds	r1, r3, #1
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6211      	str	r1, [r2, #32]
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29b      	uxth	r3, r3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4619      	mov	r1, r3
 800374a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10f      	bne.n	8003770 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800375e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800376e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e000      	b.n	8003776 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003774:	2302      	movs	r3, #2
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003796:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff fe79 	bl	8003498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08c      	sub	sp, #48	@ 0x30
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b22      	cmp	r3, #34	@ 0x22
 80037c2:	f040 80ae 	bne.w	8003922 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ce:	d117      	bne.n	8003800 <UART_Receive_IT+0x50>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d113      	bne.n	8003800 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f8:	1c9a      	adds	r2, r3, #2
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80037fe:	e026      	b.n	800384e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003806:	2300      	movs	r3, #0
 8003808:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003812:	d007      	beq.n	8003824 <UART_Receive_IT+0x74>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <UART_Receive_IT+0x82>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e008      	b.n	8003844 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800383e:	b2da      	uxtb	r2, r3
 8003840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003842:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29b      	uxth	r3, r3
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4619      	mov	r1, r3
 800385c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800385e:	2b00      	cmp	r3, #0
 8003860:	d15d      	bne.n	800391e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0220 	bic.w	r2, r2, #32
 8003870:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003880:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d135      	bne.n	8003914 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	330c      	adds	r3, #12
 80038b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	613b      	str	r3, [r7, #16]
   return(result);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f023 0310 	bic.w	r3, r3, #16
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	330c      	adds	r3, #12
 80038cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ce:	623a      	str	r2, [r7, #32]
 80038d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	69f9      	ldr	r1, [r7, #28]
 80038d4:	6a3a      	ldr	r2, [r7, #32]
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	61bb      	str	r3, [r7, #24]
   return(result);
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e5      	bne.n	80038ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d10a      	bne.n	8003906 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800390a:	4619      	mov	r1, r3
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff fdd5 	bl	80034bc <HAL_UARTEx_RxEventCallback>
 8003912:	e002      	b.n	800391a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7fc fc2b 	bl	8000170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e002      	b.n	8003924 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3730      	adds	r7, #48	@ 0x30
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003966:	f023 030c 	bic.w	r3, r3, #12
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	430b      	orrs	r3, r1
 8003972:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a2c      	ldr	r2, [pc, #176]	@ (8003a40 <UART_SetConfig+0x114>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d103      	bne.n	800399c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003994:	f7ff f850 	bl	8002a38 <HAL_RCC_GetPCLK2Freq>
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	e002      	b.n	80039a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800399c:	f7ff f838 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 80039a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009a      	lsls	r2, r3, #2
 80039ac:	441a      	add	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	4a22      	ldr	r2, [pc, #136]	@ (8003a44 <UART_SetConfig+0x118>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	0119      	lsls	r1, r3, #4
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	009a      	lsls	r2, r3, #2
 80039cc:	441a      	add	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a44 <UART_SetConfig+0x118>)
 80039da:	fba3 0302 	umull	r0, r3, r3, r2
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2064      	movs	r0, #100	@ 0x64
 80039e2:	fb00 f303 	mul.w	r3, r0, r3
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	3332      	adds	r3, #50	@ 0x32
 80039ec:	4a15      	ldr	r2, [pc, #84]	@ (8003a44 <UART_SetConfig+0x118>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039f8:	4419      	add	r1, r3
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	009a      	lsls	r2, r3, #2
 8003a04:	441a      	add	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a10:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <UART_SetConfig+0x118>)
 8003a12:	fba3 0302 	umull	r0, r3, r3, r2
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	2064      	movs	r0, #100	@ 0x64
 8003a1a:	fb00 f303 	mul.w	r3, r0, r3
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	3332      	adds	r3, #50	@ 0x32
 8003a24:	4a07      	ldr	r2, [pc, #28]	@ (8003a44 <UART_SetConfig+0x118>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	f003 020f 	and.w	r2, r3, #15
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	440a      	add	r2, r1
 8003a36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40013800 	.word	0x40013800
 8003a44:	51eb851f 	.word	0x51eb851f

08003a48 <std>:
 8003a48:	2300      	movs	r3, #0
 8003a4a:	b510      	push	{r4, lr}
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a56:	6083      	str	r3, [r0, #8]
 8003a58:	8181      	strh	r1, [r0, #12]
 8003a5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a5c:	81c2      	strh	r2, [r0, #14]
 8003a5e:	6183      	str	r3, [r0, #24]
 8003a60:	4619      	mov	r1, r3
 8003a62:	2208      	movs	r2, #8
 8003a64:	305c      	adds	r0, #92	@ 0x5c
 8003a66:	f000 f9f9 	bl	8003e5c <memset>
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <std+0x58>)
 8003a6c:	6224      	str	r4, [r4, #32]
 8003a6e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a70:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa4 <std+0x5c>)
 8003a72:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a74:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa8 <std+0x60>)
 8003a76:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a78:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <std+0x64>)
 8003a7a:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab0 <std+0x68>)
 8003a7e:	429c      	cmp	r4, r3
 8003a80:	d006      	beq.n	8003a90 <std+0x48>
 8003a82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003a86:	4294      	cmp	r4, r2
 8003a88:	d002      	beq.n	8003a90 <std+0x48>
 8003a8a:	33d0      	adds	r3, #208	@ 0xd0
 8003a8c:	429c      	cmp	r4, r3
 8003a8e:	d105      	bne.n	8003a9c <std+0x54>
 8003a90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a98:	f000 ba58 	b.w	8003f4c <__retarget_lock_init_recursive>
 8003a9c:	bd10      	pop	{r4, pc}
 8003a9e:	bf00      	nop
 8003aa0:	08003cad 	.word	0x08003cad
 8003aa4:	08003ccf 	.word	0x08003ccf
 8003aa8:	08003d07 	.word	0x08003d07
 8003aac:	08003d2b 	.word	0x08003d2b
 8003ab0:	20000468 	.word	0x20000468

08003ab4 <stdio_exit_handler>:
 8003ab4:	4a02      	ldr	r2, [pc, #8]	@ (8003ac0 <stdio_exit_handler+0xc>)
 8003ab6:	4903      	ldr	r1, [pc, #12]	@ (8003ac4 <stdio_exit_handler+0x10>)
 8003ab8:	4803      	ldr	r0, [pc, #12]	@ (8003ac8 <stdio_exit_handler+0x14>)
 8003aba:	f000 b869 	b.w	8003b90 <_fwalk_sglue>
 8003abe:	bf00      	nop
 8003ac0:	2000000c 	.word	0x2000000c
 8003ac4:	080047e1 	.word	0x080047e1
 8003ac8:	2000001c 	.word	0x2000001c

08003acc <cleanup_stdio>:
 8003acc:	6841      	ldr	r1, [r0, #4]
 8003ace:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <cleanup_stdio+0x34>)
 8003ad0:	b510      	push	{r4, lr}
 8003ad2:	4299      	cmp	r1, r3
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	d001      	beq.n	8003adc <cleanup_stdio+0x10>
 8003ad8:	f000 fe82 	bl	80047e0 <_fflush_r>
 8003adc:	68a1      	ldr	r1, [r4, #8]
 8003ade:	4b09      	ldr	r3, [pc, #36]	@ (8003b04 <cleanup_stdio+0x38>)
 8003ae0:	4299      	cmp	r1, r3
 8003ae2:	d002      	beq.n	8003aea <cleanup_stdio+0x1e>
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	f000 fe7b 	bl	80047e0 <_fflush_r>
 8003aea:	68e1      	ldr	r1, [r4, #12]
 8003aec:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <cleanup_stdio+0x3c>)
 8003aee:	4299      	cmp	r1, r3
 8003af0:	d004      	beq.n	8003afc <cleanup_stdio+0x30>
 8003af2:	4620      	mov	r0, r4
 8003af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003af8:	f000 be72 	b.w	80047e0 <_fflush_r>
 8003afc:	bd10      	pop	{r4, pc}
 8003afe:	bf00      	nop
 8003b00:	20000468 	.word	0x20000468
 8003b04:	200004d0 	.word	0x200004d0
 8003b08:	20000538 	.word	0x20000538

08003b0c <global_stdio_init.part.0>:
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <global_stdio_init.part.0+0x30>)
 8003b10:	4c0b      	ldr	r4, [pc, #44]	@ (8003b40 <global_stdio_init.part.0+0x34>)
 8003b12:	4a0c      	ldr	r2, [pc, #48]	@ (8003b44 <global_stdio_init.part.0+0x38>)
 8003b14:	4620      	mov	r0, r4
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	2104      	movs	r1, #4
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f7ff ff94 	bl	8003a48 <std>
 8003b20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b24:	2201      	movs	r2, #1
 8003b26:	2109      	movs	r1, #9
 8003b28:	f7ff ff8e 	bl	8003a48 <std>
 8003b2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b30:	2202      	movs	r2, #2
 8003b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b36:	2112      	movs	r1, #18
 8003b38:	f7ff bf86 	b.w	8003a48 <std>
 8003b3c:	200005a0 	.word	0x200005a0
 8003b40:	20000468 	.word	0x20000468
 8003b44:	08003ab5 	.word	0x08003ab5

08003b48 <__sfp_lock_acquire>:
 8003b48:	4801      	ldr	r0, [pc, #4]	@ (8003b50 <__sfp_lock_acquire+0x8>)
 8003b4a:	f000 ba00 	b.w	8003f4e <__retarget_lock_acquire_recursive>
 8003b4e:	bf00      	nop
 8003b50:	200005a9 	.word	0x200005a9

08003b54 <__sfp_lock_release>:
 8003b54:	4801      	ldr	r0, [pc, #4]	@ (8003b5c <__sfp_lock_release+0x8>)
 8003b56:	f000 b9fb 	b.w	8003f50 <__retarget_lock_release_recursive>
 8003b5a:	bf00      	nop
 8003b5c:	200005a9 	.word	0x200005a9

08003b60 <__sinit>:
 8003b60:	b510      	push	{r4, lr}
 8003b62:	4604      	mov	r4, r0
 8003b64:	f7ff fff0 	bl	8003b48 <__sfp_lock_acquire>
 8003b68:	6a23      	ldr	r3, [r4, #32]
 8003b6a:	b11b      	cbz	r3, 8003b74 <__sinit+0x14>
 8003b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b70:	f7ff bff0 	b.w	8003b54 <__sfp_lock_release>
 8003b74:	4b04      	ldr	r3, [pc, #16]	@ (8003b88 <__sinit+0x28>)
 8003b76:	6223      	str	r3, [r4, #32]
 8003b78:	4b04      	ldr	r3, [pc, #16]	@ (8003b8c <__sinit+0x2c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f5      	bne.n	8003b6c <__sinit+0xc>
 8003b80:	f7ff ffc4 	bl	8003b0c <global_stdio_init.part.0>
 8003b84:	e7f2      	b.n	8003b6c <__sinit+0xc>
 8003b86:	bf00      	nop
 8003b88:	08003acd 	.word	0x08003acd
 8003b8c:	200005a0 	.word	0x200005a0

08003b90 <_fwalk_sglue>:
 8003b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b94:	4607      	mov	r7, r0
 8003b96:	4688      	mov	r8, r1
 8003b98:	4614      	mov	r4, r2
 8003b9a:	2600      	movs	r6, #0
 8003b9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ba0:	f1b9 0901 	subs.w	r9, r9, #1
 8003ba4:	d505      	bpl.n	8003bb2 <_fwalk_sglue+0x22>
 8003ba6:	6824      	ldr	r4, [r4, #0]
 8003ba8:	2c00      	cmp	r4, #0
 8003baa:	d1f7      	bne.n	8003b9c <_fwalk_sglue+0xc>
 8003bac:	4630      	mov	r0, r6
 8003bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bb2:	89ab      	ldrh	r3, [r5, #12]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d907      	bls.n	8003bc8 <_fwalk_sglue+0x38>
 8003bb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	d003      	beq.n	8003bc8 <_fwalk_sglue+0x38>
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	47c0      	blx	r8
 8003bc6:	4306      	orrs	r6, r0
 8003bc8:	3568      	adds	r5, #104	@ 0x68
 8003bca:	e7e9      	b.n	8003ba0 <_fwalk_sglue+0x10>

08003bcc <iprintf>:
 8003bcc:	b40f      	push	{r0, r1, r2, r3}
 8003bce:	b507      	push	{r0, r1, r2, lr}
 8003bd0:	4906      	ldr	r1, [pc, #24]	@ (8003bec <iprintf+0x20>)
 8003bd2:	ab04      	add	r3, sp, #16
 8003bd4:	6808      	ldr	r0, [r1, #0]
 8003bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bda:	6881      	ldr	r1, [r0, #8]
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	f000 fad7 	bl	8004190 <_vfiprintf_r>
 8003be2:	b003      	add	sp, #12
 8003be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003be8:	b004      	add	sp, #16
 8003bea:	4770      	bx	lr
 8003bec:	20000018 	.word	0x20000018

08003bf0 <_puts_r>:
 8003bf0:	6a03      	ldr	r3, [r0, #32]
 8003bf2:	b570      	push	{r4, r5, r6, lr}
 8003bf4:	4605      	mov	r5, r0
 8003bf6:	460e      	mov	r6, r1
 8003bf8:	6884      	ldr	r4, [r0, #8]
 8003bfa:	b90b      	cbnz	r3, 8003c00 <_puts_r+0x10>
 8003bfc:	f7ff ffb0 	bl	8003b60 <__sinit>
 8003c00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c02:	07db      	lsls	r3, r3, #31
 8003c04:	d405      	bmi.n	8003c12 <_puts_r+0x22>
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	0598      	lsls	r0, r3, #22
 8003c0a:	d402      	bmi.n	8003c12 <_puts_r+0x22>
 8003c0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c0e:	f000 f99e 	bl	8003f4e <__retarget_lock_acquire_recursive>
 8003c12:	89a3      	ldrh	r3, [r4, #12]
 8003c14:	0719      	lsls	r1, r3, #28
 8003c16:	d502      	bpl.n	8003c1e <_puts_r+0x2e>
 8003c18:	6923      	ldr	r3, [r4, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d135      	bne.n	8003c8a <_puts_r+0x9a>
 8003c1e:	4621      	mov	r1, r4
 8003c20:	4628      	mov	r0, r5
 8003c22:	f000 f8c5 	bl	8003db0 <__swsetup_r>
 8003c26:	b380      	cbz	r0, 8003c8a <_puts_r+0x9a>
 8003c28:	f04f 35ff 	mov.w	r5, #4294967295
 8003c2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c2e:	07da      	lsls	r2, r3, #31
 8003c30:	d405      	bmi.n	8003c3e <_puts_r+0x4e>
 8003c32:	89a3      	ldrh	r3, [r4, #12]
 8003c34:	059b      	lsls	r3, r3, #22
 8003c36:	d402      	bmi.n	8003c3e <_puts_r+0x4e>
 8003c38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c3a:	f000 f989 	bl	8003f50 <__retarget_lock_release_recursive>
 8003c3e:	4628      	mov	r0, r5
 8003c40:	bd70      	pop	{r4, r5, r6, pc}
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	da04      	bge.n	8003c50 <_puts_r+0x60>
 8003c46:	69a2      	ldr	r2, [r4, #24]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	dc17      	bgt.n	8003c7c <_puts_r+0x8c>
 8003c4c:	290a      	cmp	r1, #10
 8003c4e:	d015      	beq.n	8003c7c <_puts_r+0x8c>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	6022      	str	r2, [r4, #0]
 8003c56:	7019      	strb	r1, [r3, #0]
 8003c58:	68a3      	ldr	r3, [r4, #8]
 8003c5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	60a3      	str	r3, [r4, #8]
 8003c62:	2900      	cmp	r1, #0
 8003c64:	d1ed      	bne.n	8003c42 <_puts_r+0x52>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	da11      	bge.n	8003c8e <_puts_r+0x9e>
 8003c6a:	4622      	mov	r2, r4
 8003c6c:	210a      	movs	r1, #10
 8003c6e:	4628      	mov	r0, r5
 8003c70:	f000 f85f 	bl	8003d32 <__swbuf_r>
 8003c74:	3001      	adds	r0, #1
 8003c76:	d0d7      	beq.n	8003c28 <_puts_r+0x38>
 8003c78:	250a      	movs	r5, #10
 8003c7a:	e7d7      	b.n	8003c2c <_puts_r+0x3c>
 8003c7c:	4622      	mov	r2, r4
 8003c7e:	4628      	mov	r0, r5
 8003c80:	f000 f857 	bl	8003d32 <__swbuf_r>
 8003c84:	3001      	adds	r0, #1
 8003c86:	d1e7      	bne.n	8003c58 <_puts_r+0x68>
 8003c88:	e7ce      	b.n	8003c28 <_puts_r+0x38>
 8003c8a:	3e01      	subs	r6, #1
 8003c8c:	e7e4      	b.n	8003c58 <_puts_r+0x68>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	6022      	str	r2, [r4, #0]
 8003c94:	220a      	movs	r2, #10
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	e7ee      	b.n	8003c78 <_puts_r+0x88>
	...

08003c9c <puts>:
 8003c9c:	4b02      	ldr	r3, [pc, #8]	@ (8003ca8 <puts+0xc>)
 8003c9e:	4601      	mov	r1, r0
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	f7ff bfa5 	b.w	8003bf0 <_puts_r>
 8003ca6:	bf00      	nop
 8003ca8:	20000018 	.word	0x20000018

08003cac <__sread>:
 8003cac:	b510      	push	{r4, lr}
 8003cae:	460c      	mov	r4, r1
 8003cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb4:	f000 f8fc 	bl	8003eb0 <_read_r>
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	bfab      	itete	ge
 8003cbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8003cc0:	181b      	addge	r3, r3, r0
 8003cc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003cc6:	bfac      	ite	ge
 8003cc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003cca:	81a3      	strhlt	r3, [r4, #12]
 8003ccc:	bd10      	pop	{r4, pc}

08003cce <__swrite>:
 8003cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd2:	461f      	mov	r7, r3
 8003cd4:	898b      	ldrh	r3, [r1, #12]
 8003cd6:	4605      	mov	r5, r0
 8003cd8:	05db      	lsls	r3, r3, #23
 8003cda:	460c      	mov	r4, r1
 8003cdc:	4616      	mov	r6, r2
 8003cde:	d505      	bpl.n	8003cec <__swrite+0x1e>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce8:	f000 f8d0 	bl	8003e8c <_lseek_r>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	4632      	mov	r2, r6
 8003cf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cf4:	81a3      	strh	r3, [r4, #12]
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d02:	f000 b8e7 	b.w	8003ed4 <_write_r>

08003d06 <__sseek>:
 8003d06:	b510      	push	{r4, lr}
 8003d08:	460c      	mov	r4, r1
 8003d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d0e:	f000 f8bd 	bl	8003e8c <_lseek_r>
 8003d12:	1c43      	adds	r3, r0, #1
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	bf15      	itete	ne
 8003d18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d22:	81a3      	strheq	r3, [r4, #12]
 8003d24:	bf18      	it	ne
 8003d26:	81a3      	strhne	r3, [r4, #12]
 8003d28:	bd10      	pop	{r4, pc}

08003d2a <__sclose>:
 8003d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d2e:	f000 b89d 	b.w	8003e6c <_close_r>

08003d32 <__swbuf_r>:
 8003d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d34:	460e      	mov	r6, r1
 8003d36:	4614      	mov	r4, r2
 8003d38:	4605      	mov	r5, r0
 8003d3a:	b118      	cbz	r0, 8003d44 <__swbuf_r+0x12>
 8003d3c:	6a03      	ldr	r3, [r0, #32]
 8003d3e:	b90b      	cbnz	r3, 8003d44 <__swbuf_r+0x12>
 8003d40:	f7ff ff0e 	bl	8003b60 <__sinit>
 8003d44:	69a3      	ldr	r3, [r4, #24]
 8003d46:	60a3      	str	r3, [r4, #8]
 8003d48:	89a3      	ldrh	r3, [r4, #12]
 8003d4a:	071a      	lsls	r2, r3, #28
 8003d4c:	d501      	bpl.n	8003d52 <__swbuf_r+0x20>
 8003d4e:	6923      	ldr	r3, [r4, #16]
 8003d50:	b943      	cbnz	r3, 8003d64 <__swbuf_r+0x32>
 8003d52:	4621      	mov	r1, r4
 8003d54:	4628      	mov	r0, r5
 8003d56:	f000 f82b 	bl	8003db0 <__swsetup_r>
 8003d5a:	b118      	cbz	r0, 8003d64 <__swbuf_r+0x32>
 8003d5c:	f04f 37ff 	mov.w	r7, #4294967295
 8003d60:	4638      	mov	r0, r7
 8003d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	6922      	ldr	r2, [r4, #16]
 8003d68:	b2f6      	uxtb	r6, r6
 8003d6a:	1a98      	subs	r0, r3, r2
 8003d6c:	6963      	ldr	r3, [r4, #20]
 8003d6e:	4637      	mov	r7, r6
 8003d70:	4283      	cmp	r3, r0
 8003d72:	dc05      	bgt.n	8003d80 <__swbuf_r+0x4e>
 8003d74:	4621      	mov	r1, r4
 8003d76:	4628      	mov	r0, r5
 8003d78:	f000 fd32 	bl	80047e0 <_fflush_r>
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d1ed      	bne.n	8003d5c <__swbuf_r+0x2a>
 8003d80:	68a3      	ldr	r3, [r4, #8]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	60a3      	str	r3, [r4, #8]
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	6022      	str	r2, [r4, #0]
 8003d8c:	701e      	strb	r6, [r3, #0]
 8003d8e:	6962      	ldr	r2, [r4, #20]
 8003d90:	1c43      	adds	r3, r0, #1
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d004      	beq.n	8003da0 <__swbuf_r+0x6e>
 8003d96:	89a3      	ldrh	r3, [r4, #12]
 8003d98:	07db      	lsls	r3, r3, #31
 8003d9a:	d5e1      	bpl.n	8003d60 <__swbuf_r+0x2e>
 8003d9c:	2e0a      	cmp	r6, #10
 8003d9e:	d1df      	bne.n	8003d60 <__swbuf_r+0x2e>
 8003da0:	4621      	mov	r1, r4
 8003da2:	4628      	mov	r0, r5
 8003da4:	f000 fd1c 	bl	80047e0 <_fflush_r>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d0d9      	beq.n	8003d60 <__swbuf_r+0x2e>
 8003dac:	e7d6      	b.n	8003d5c <__swbuf_r+0x2a>
	...

08003db0 <__swsetup_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4b29      	ldr	r3, [pc, #164]	@ (8003e58 <__swsetup_r+0xa8>)
 8003db4:	4605      	mov	r5, r0
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	460c      	mov	r4, r1
 8003dba:	b118      	cbz	r0, 8003dc4 <__swsetup_r+0x14>
 8003dbc:	6a03      	ldr	r3, [r0, #32]
 8003dbe:	b90b      	cbnz	r3, 8003dc4 <__swsetup_r+0x14>
 8003dc0:	f7ff fece 	bl	8003b60 <__sinit>
 8003dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dc8:	0719      	lsls	r1, r3, #28
 8003dca:	d422      	bmi.n	8003e12 <__swsetup_r+0x62>
 8003dcc:	06da      	lsls	r2, r3, #27
 8003dce:	d407      	bmi.n	8003de0 <__swsetup_r+0x30>
 8003dd0:	2209      	movs	r2, #9
 8003dd2:	602a      	str	r2, [r5, #0]
 8003dd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ddc:	81a3      	strh	r3, [r4, #12]
 8003dde:	e033      	b.n	8003e48 <__swsetup_r+0x98>
 8003de0:	0758      	lsls	r0, r3, #29
 8003de2:	d512      	bpl.n	8003e0a <__swsetup_r+0x5a>
 8003de4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003de6:	b141      	cbz	r1, 8003dfa <__swsetup_r+0x4a>
 8003de8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003dec:	4299      	cmp	r1, r3
 8003dee:	d002      	beq.n	8003df6 <__swsetup_r+0x46>
 8003df0:	4628      	mov	r0, r5
 8003df2:	f000 f8af 	bl	8003f54 <_free_r>
 8003df6:	2300      	movs	r3, #0
 8003df8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003dfa:	89a3      	ldrh	r3, [r4, #12]
 8003dfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003e00:	81a3      	strh	r3, [r4, #12]
 8003e02:	2300      	movs	r3, #0
 8003e04:	6063      	str	r3, [r4, #4]
 8003e06:	6923      	ldr	r3, [r4, #16]
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	89a3      	ldrh	r3, [r4, #12]
 8003e0c:	f043 0308 	orr.w	r3, r3, #8
 8003e10:	81a3      	strh	r3, [r4, #12]
 8003e12:	6923      	ldr	r3, [r4, #16]
 8003e14:	b94b      	cbnz	r3, 8003e2a <__swsetup_r+0x7a>
 8003e16:	89a3      	ldrh	r3, [r4, #12]
 8003e18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e20:	d003      	beq.n	8003e2a <__swsetup_r+0x7a>
 8003e22:	4621      	mov	r1, r4
 8003e24:	4628      	mov	r0, r5
 8003e26:	f000 fd28 	bl	800487a <__smakebuf_r>
 8003e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e2e:	f013 0201 	ands.w	r2, r3, #1
 8003e32:	d00a      	beq.n	8003e4a <__swsetup_r+0x9a>
 8003e34:	2200      	movs	r2, #0
 8003e36:	60a2      	str	r2, [r4, #8]
 8003e38:	6962      	ldr	r2, [r4, #20]
 8003e3a:	4252      	negs	r2, r2
 8003e3c:	61a2      	str	r2, [r4, #24]
 8003e3e:	6922      	ldr	r2, [r4, #16]
 8003e40:	b942      	cbnz	r2, 8003e54 <__swsetup_r+0xa4>
 8003e42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003e46:	d1c5      	bne.n	8003dd4 <__swsetup_r+0x24>
 8003e48:	bd38      	pop	{r3, r4, r5, pc}
 8003e4a:	0799      	lsls	r1, r3, #30
 8003e4c:	bf58      	it	pl
 8003e4e:	6962      	ldrpl	r2, [r4, #20]
 8003e50:	60a2      	str	r2, [r4, #8]
 8003e52:	e7f4      	b.n	8003e3e <__swsetup_r+0x8e>
 8003e54:	2000      	movs	r0, #0
 8003e56:	e7f7      	b.n	8003e48 <__swsetup_r+0x98>
 8003e58:	20000018 	.word	0x20000018

08003e5c <memset>:
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	4402      	add	r2, r0
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d100      	bne.n	8003e66 <memset+0xa>
 8003e64:	4770      	bx	lr
 8003e66:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6a:	e7f9      	b.n	8003e60 <memset+0x4>

08003e6c <_close_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	2300      	movs	r3, #0
 8003e70:	4d05      	ldr	r5, [pc, #20]	@ (8003e88 <_close_r+0x1c>)
 8003e72:	4604      	mov	r4, r0
 8003e74:	4608      	mov	r0, r1
 8003e76:	602b      	str	r3, [r5, #0]
 8003e78:	f7fc ff71 	bl	8000d5e <_close>
 8003e7c:	1c43      	adds	r3, r0, #1
 8003e7e:	d102      	bne.n	8003e86 <_close_r+0x1a>
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	b103      	cbz	r3, 8003e86 <_close_r+0x1a>
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	bd38      	pop	{r3, r4, r5, pc}
 8003e88:	200005a4 	.word	0x200005a4

08003e8c <_lseek_r>:
 8003e8c:	b538      	push	{r3, r4, r5, lr}
 8003e8e:	4604      	mov	r4, r0
 8003e90:	4608      	mov	r0, r1
 8003e92:	4611      	mov	r1, r2
 8003e94:	2200      	movs	r2, #0
 8003e96:	4d05      	ldr	r5, [pc, #20]	@ (8003eac <_lseek_r+0x20>)
 8003e98:	602a      	str	r2, [r5, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f7fc ff83 	bl	8000da6 <_lseek>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	d102      	bne.n	8003eaa <_lseek_r+0x1e>
 8003ea4:	682b      	ldr	r3, [r5, #0]
 8003ea6:	b103      	cbz	r3, 8003eaa <_lseek_r+0x1e>
 8003ea8:	6023      	str	r3, [r4, #0]
 8003eaa:	bd38      	pop	{r3, r4, r5, pc}
 8003eac:	200005a4 	.word	0x200005a4

08003eb0 <_read_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	2200      	movs	r2, #0
 8003eba:	4d05      	ldr	r5, [pc, #20]	@ (8003ed0 <_read_r+0x20>)
 8003ebc:	602a      	str	r2, [r5, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f7fc ff30 	bl	8000d24 <_read>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d102      	bne.n	8003ece <_read_r+0x1e>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	b103      	cbz	r3, 8003ece <_read_r+0x1e>
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	200005a4 	.word	0x200005a4

08003ed4 <_write_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	4608      	mov	r0, r1
 8003eda:	4611      	mov	r1, r2
 8003edc:	2200      	movs	r2, #0
 8003ede:	4d05      	ldr	r5, [pc, #20]	@ (8003ef4 <_write_r+0x20>)
 8003ee0:	602a      	str	r2, [r5, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f7fc fd12 	bl	800090c <_write>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	d102      	bne.n	8003ef2 <_write_r+0x1e>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	b103      	cbz	r3, 8003ef2 <_write_r+0x1e>
 8003ef0:	6023      	str	r3, [r4, #0]
 8003ef2:	bd38      	pop	{r3, r4, r5, pc}
 8003ef4:	200005a4 	.word	0x200005a4

08003ef8 <__errno>:
 8003ef8:	4b01      	ldr	r3, [pc, #4]	@ (8003f00 <__errno+0x8>)
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000018 	.word	0x20000018

08003f04 <__libc_init_array>:
 8003f04:	b570      	push	{r4, r5, r6, lr}
 8003f06:	2600      	movs	r6, #0
 8003f08:	4d0c      	ldr	r5, [pc, #48]	@ (8003f3c <__libc_init_array+0x38>)
 8003f0a:	4c0d      	ldr	r4, [pc, #52]	@ (8003f40 <__libc_init_array+0x3c>)
 8003f0c:	1b64      	subs	r4, r4, r5
 8003f0e:	10a4      	asrs	r4, r4, #2
 8003f10:	42a6      	cmp	r6, r4
 8003f12:	d109      	bne.n	8003f28 <__libc_init_array+0x24>
 8003f14:	f000 fd2e 	bl	8004974 <_init>
 8003f18:	2600      	movs	r6, #0
 8003f1a:	4d0a      	ldr	r5, [pc, #40]	@ (8003f44 <__libc_init_array+0x40>)
 8003f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8003f48 <__libc_init_array+0x44>)
 8003f1e:	1b64      	subs	r4, r4, r5
 8003f20:	10a4      	asrs	r4, r4, #2
 8003f22:	42a6      	cmp	r6, r4
 8003f24:	d105      	bne.n	8003f32 <__libc_init_array+0x2e>
 8003f26:	bd70      	pop	{r4, r5, r6, pc}
 8003f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f2c:	4798      	blx	r3
 8003f2e:	3601      	adds	r6, #1
 8003f30:	e7ee      	b.n	8003f10 <__libc_init_array+0xc>
 8003f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f36:	4798      	blx	r3
 8003f38:	3601      	adds	r6, #1
 8003f3a:	e7f2      	b.n	8003f22 <__libc_init_array+0x1e>
 8003f3c:	08004a4c 	.word	0x08004a4c
 8003f40:	08004a4c 	.word	0x08004a4c
 8003f44:	08004a4c 	.word	0x08004a4c
 8003f48:	08004a50 	.word	0x08004a50

08003f4c <__retarget_lock_init_recursive>:
 8003f4c:	4770      	bx	lr

08003f4e <__retarget_lock_acquire_recursive>:
 8003f4e:	4770      	bx	lr

08003f50 <__retarget_lock_release_recursive>:
 8003f50:	4770      	bx	lr
	...

08003f54 <_free_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4605      	mov	r5, r0
 8003f58:	2900      	cmp	r1, #0
 8003f5a:	d040      	beq.n	8003fde <_free_r+0x8a>
 8003f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f60:	1f0c      	subs	r4, r1, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bfb8      	it	lt
 8003f66:	18e4      	addlt	r4, r4, r3
 8003f68:	f000 f8de 	bl	8004128 <__malloc_lock>
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe0 <_free_r+0x8c>)
 8003f6e:	6813      	ldr	r3, [r2, #0]
 8003f70:	b933      	cbnz	r3, 8003f80 <_free_r+0x2c>
 8003f72:	6063      	str	r3, [r4, #4]
 8003f74:	6014      	str	r4, [r2, #0]
 8003f76:	4628      	mov	r0, r5
 8003f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f7c:	f000 b8da 	b.w	8004134 <__malloc_unlock>
 8003f80:	42a3      	cmp	r3, r4
 8003f82:	d908      	bls.n	8003f96 <_free_r+0x42>
 8003f84:	6820      	ldr	r0, [r4, #0]
 8003f86:	1821      	adds	r1, r4, r0
 8003f88:	428b      	cmp	r3, r1
 8003f8a:	bf01      	itttt	eq
 8003f8c:	6819      	ldreq	r1, [r3, #0]
 8003f8e:	685b      	ldreq	r3, [r3, #4]
 8003f90:	1809      	addeq	r1, r1, r0
 8003f92:	6021      	streq	r1, [r4, #0]
 8003f94:	e7ed      	b.n	8003f72 <_free_r+0x1e>
 8003f96:	461a      	mov	r2, r3
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	b10b      	cbz	r3, 8003fa0 <_free_r+0x4c>
 8003f9c:	42a3      	cmp	r3, r4
 8003f9e:	d9fa      	bls.n	8003f96 <_free_r+0x42>
 8003fa0:	6811      	ldr	r1, [r2, #0]
 8003fa2:	1850      	adds	r0, r2, r1
 8003fa4:	42a0      	cmp	r0, r4
 8003fa6:	d10b      	bne.n	8003fc0 <_free_r+0x6c>
 8003fa8:	6820      	ldr	r0, [r4, #0]
 8003faa:	4401      	add	r1, r0
 8003fac:	1850      	adds	r0, r2, r1
 8003fae:	4283      	cmp	r3, r0
 8003fb0:	6011      	str	r1, [r2, #0]
 8003fb2:	d1e0      	bne.n	8003f76 <_free_r+0x22>
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4408      	add	r0, r1
 8003fba:	6010      	str	r0, [r2, #0]
 8003fbc:	6053      	str	r3, [r2, #4]
 8003fbe:	e7da      	b.n	8003f76 <_free_r+0x22>
 8003fc0:	d902      	bls.n	8003fc8 <_free_r+0x74>
 8003fc2:	230c      	movs	r3, #12
 8003fc4:	602b      	str	r3, [r5, #0]
 8003fc6:	e7d6      	b.n	8003f76 <_free_r+0x22>
 8003fc8:	6820      	ldr	r0, [r4, #0]
 8003fca:	1821      	adds	r1, r4, r0
 8003fcc:	428b      	cmp	r3, r1
 8003fce:	bf01      	itttt	eq
 8003fd0:	6819      	ldreq	r1, [r3, #0]
 8003fd2:	685b      	ldreq	r3, [r3, #4]
 8003fd4:	1809      	addeq	r1, r1, r0
 8003fd6:	6021      	streq	r1, [r4, #0]
 8003fd8:	6063      	str	r3, [r4, #4]
 8003fda:	6054      	str	r4, [r2, #4]
 8003fdc:	e7cb      	b.n	8003f76 <_free_r+0x22>
 8003fde:	bd38      	pop	{r3, r4, r5, pc}
 8003fe0:	200005b0 	.word	0x200005b0

08003fe4 <sbrk_aligned>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	4e0f      	ldr	r6, [pc, #60]	@ (8004024 <sbrk_aligned+0x40>)
 8003fe8:	460c      	mov	r4, r1
 8003fea:	6831      	ldr	r1, [r6, #0]
 8003fec:	4605      	mov	r5, r0
 8003fee:	b911      	cbnz	r1, 8003ff6 <sbrk_aligned+0x12>
 8003ff0:	f000 fca2 	bl	8004938 <_sbrk_r>
 8003ff4:	6030      	str	r0, [r6, #0]
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f000 fc9d 	bl	8004938 <_sbrk_r>
 8003ffe:	1c43      	adds	r3, r0, #1
 8004000:	d103      	bne.n	800400a <sbrk_aligned+0x26>
 8004002:	f04f 34ff 	mov.w	r4, #4294967295
 8004006:	4620      	mov	r0, r4
 8004008:	bd70      	pop	{r4, r5, r6, pc}
 800400a:	1cc4      	adds	r4, r0, #3
 800400c:	f024 0403 	bic.w	r4, r4, #3
 8004010:	42a0      	cmp	r0, r4
 8004012:	d0f8      	beq.n	8004006 <sbrk_aligned+0x22>
 8004014:	1a21      	subs	r1, r4, r0
 8004016:	4628      	mov	r0, r5
 8004018:	f000 fc8e 	bl	8004938 <_sbrk_r>
 800401c:	3001      	adds	r0, #1
 800401e:	d1f2      	bne.n	8004006 <sbrk_aligned+0x22>
 8004020:	e7ef      	b.n	8004002 <sbrk_aligned+0x1e>
 8004022:	bf00      	nop
 8004024:	200005ac 	.word	0x200005ac

08004028 <_malloc_r>:
 8004028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800402c:	1ccd      	adds	r5, r1, #3
 800402e:	f025 0503 	bic.w	r5, r5, #3
 8004032:	3508      	adds	r5, #8
 8004034:	2d0c      	cmp	r5, #12
 8004036:	bf38      	it	cc
 8004038:	250c      	movcc	r5, #12
 800403a:	2d00      	cmp	r5, #0
 800403c:	4606      	mov	r6, r0
 800403e:	db01      	blt.n	8004044 <_malloc_r+0x1c>
 8004040:	42a9      	cmp	r1, r5
 8004042:	d904      	bls.n	800404e <_malloc_r+0x26>
 8004044:	230c      	movs	r3, #12
 8004046:	6033      	str	r3, [r6, #0]
 8004048:	2000      	movs	r0, #0
 800404a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800404e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004124 <_malloc_r+0xfc>
 8004052:	f000 f869 	bl	8004128 <__malloc_lock>
 8004056:	f8d8 3000 	ldr.w	r3, [r8]
 800405a:	461c      	mov	r4, r3
 800405c:	bb44      	cbnz	r4, 80040b0 <_malloc_r+0x88>
 800405e:	4629      	mov	r1, r5
 8004060:	4630      	mov	r0, r6
 8004062:	f7ff ffbf 	bl	8003fe4 <sbrk_aligned>
 8004066:	1c43      	adds	r3, r0, #1
 8004068:	4604      	mov	r4, r0
 800406a:	d158      	bne.n	800411e <_malloc_r+0xf6>
 800406c:	f8d8 4000 	ldr.w	r4, [r8]
 8004070:	4627      	mov	r7, r4
 8004072:	2f00      	cmp	r7, #0
 8004074:	d143      	bne.n	80040fe <_malloc_r+0xd6>
 8004076:	2c00      	cmp	r4, #0
 8004078:	d04b      	beq.n	8004112 <_malloc_r+0xea>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	4639      	mov	r1, r7
 800407e:	4630      	mov	r0, r6
 8004080:	eb04 0903 	add.w	r9, r4, r3
 8004084:	f000 fc58 	bl	8004938 <_sbrk_r>
 8004088:	4581      	cmp	r9, r0
 800408a:	d142      	bne.n	8004112 <_malloc_r+0xea>
 800408c:	6821      	ldr	r1, [r4, #0]
 800408e:	4630      	mov	r0, r6
 8004090:	1a6d      	subs	r5, r5, r1
 8004092:	4629      	mov	r1, r5
 8004094:	f7ff ffa6 	bl	8003fe4 <sbrk_aligned>
 8004098:	3001      	adds	r0, #1
 800409a:	d03a      	beq.n	8004112 <_malloc_r+0xea>
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	442b      	add	r3, r5
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	f8d8 3000 	ldr.w	r3, [r8]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	bb62      	cbnz	r2, 8004104 <_malloc_r+0xdc>
 80040aa:	f8c8 7000 	str.w	r7, [r8]
 80040ae:	e00f      	b.n	80040d0 <_malloc_r+0xa8>
 80040b0:	6822      	ldr	r2, [r4, #0]
 80040b2:	1b52      	subs	r2, r2, r5
 80040b4:	d420      	bmi.n	80040f8 <_malloc_r+0xd0>
 80040b6:	2a0b      	cmp	r2, #11
 80040b8:	d917      	bls.n	80040ea <_malloc_r+0xc2>
 80040ba:	1961      	adds	r1, r4, r5
 80040bc:	42a3      	cmp	r3, r4
 80040be:	6025      	str	r5, [r4, #0]
 80040c0:	bf18      	it	ne
 80040c2:	6059      	strne	r1, [r3, #4]
 80040c4:	6863      	ldr	r3, [r4, #4]
 80040c6:	bf08      	it	eq
 80040c8:	f8c8 1000 	streq.w	r1, [r8]
 80040cc:	5162      	str	r2, [r4, r5]
 80040ce:	604b      	str	r3, [r1, #4]
 80040d0:	4630      	mov	r0, r6
 80040d2:	f000 f82f 	bl	8004134 <__malloc_unlock>
 80040d6:	f104 000b 	add.w	r0, r4, #11
 80040da:	1d23      	adds	r3, r4, #4
 80040dc:	f020 0007 	bic.w	r0, r0, #7
 80040e0:	1ac2      	subs	r2, r0, r3
 80040e2:	bf1c      	itt	ne
 80040e4:	1a1b      	subne	r3, r3, r0
 80040e6:	50a3      	strne	r3, [r4, r2]
 80040e8:	e7af      	b.n	800404a <_malloc_r+0x22>
 80040ea:	6862      	ldr	r2, [r4, #4]
 80040ec:	42a3      	cmp	r3, r4
 80040ee:	bf0c      	ite	eq
 80040f0:	f8c8 2000 	streq.w	r2, [r8]
 80040f4:	605a      	strne	r2, [r3, #4]
 80040f6:	e7eb      	b.n	80040d0 <_malloc_r+0xa8>
 80040f8:	4623      	mov	r3, r4
 80040fa:	6864      	ldr	r4, [r4, #4]
 80040fc:	e7ae      	b.n	800405c <_malloc_r+0x34>
 80040fe:	463c      	mov	r4, r7
 8004100:	687f      	ldr	r7, [r7, #4]
 8004102:	e7b6      	b.n	8004072 <_malloc_r+0x4a>
 8004104:	461a      	mov	r2, r3
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	42a3      	cmp	r3, r4
 800410a:	d1fb      	bne.n	8004104 <_malloc_r+0xdc>
 800410c:	2300      	movs	r3, #0
 800410e:	6053      	str	r3, [r2, #4]
 8004110:	e7de      	b.n	80040d0 <_malloc_r+0xa8>
 8004112:	230c      	movs	r3, #12
 8004114:	4630      	mov	r0, r6
 8004116:	6033      	str	r3, [r6, #0]
 8004118:	f000 f80c 	bl	8004134 <__malloc_unlock>
 800411c:	e794      	b.n	8004048 <_malloc_r+0x20>
 800411e:	6005      	str	r5, [r0, #0]
 8004120:	e7d6      	b.n	80040d0 <_malloc_r+0xa8>
 8004122:	bf00      	nop
 8004124:	200005b0 	.word	0x200005b0

08004128 <__malloc_lock>:
 8004128:	4801      	ldr	r0, [pc, #4]	@ (8004130 <__malloc_lock+0x8>)
 800412a:	f7ff bf10 	b.w	8003f4e <__retarget_lock_acquire_recursive>
 800412e:	bf00      	nop
 8004130:	200005a8 	.word	0x200005a8

08004134 <__malloc_unlock>:
 8004134:	4801      	ldr	r0, [pc, #4]	@ (800413c <__malloc_unlock+0x8>)
 8004136:	f7ff bf0b 	b.w	8003f50 <__retarget_lock_release_recursive>
 800413a:	bf00      	nop
 800413c:	200005a8 	.word	0x200005a8

08004140 <__sfputc_r>:
 8004140:	6893      	ldr	r3, [r2, #8]
 8004142:	b410      	push	{r4}
 8004144:	3b01      	subs	r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	6093      	str	r3, [r2, #8]
 800414a:	da07      	bge.n	800415c <__sfputc_r+0x1c>
 800414c:	6994      	ldr	r4, [r2, #24]
 800414e:	42a3      	cmp	r3, r4
 8004150:	db01      	blt.n	8004156 <__sfputc_r+0x16>
 8004152:	290a      	cmp	r1, #10
 8004154:	d102      	bne.n	800415c <__sfputc_r+0x1c>
 8004156:	bc10      	pop	{r4}
 8004158:	f7ff bdeb 	b.w	8003d32 <__swbuf_r>
 800415c:	6813      	ldr	r3, [r2, #0]
 800415e:	1c58      	adds	r0, r3, #1
 8004160:	6010      	str	r0, [r2, #0]
 8004162:	7019      	strb	r1, [r3, #0]
 8004164:	4608      	mov	r0, r1
 8004166:	bc10      	pop	{r4}
 8004168:	4770      	bx	lr

0800416a <__sfputs_r>:
 800416a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416c:	4606      	mov	r6, r0
 800416e:	460f      	mov	r7, r1
 8004170:	4614      	mov	r4, r2
 8004172:	18d5      	adds	r5, r2, r3
 8004174:	42ac      	cmp	r4, r5
 8004176:	d101      	bne.n	800417c <__sfputs_r+0x12>
 8004178:	2000      	movs	r0, #0
 800417a:	e007      	b.n	800418c <__sfputs_r+0x22>
 800417c:	463a      	mov	r2, r7
 800417e:	4630      	mov	r0, r6
 8004180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004184:	f7ff ffdc 	bl	8004140 <__sfputc_r>
 8004188:	1c43      	adds	r3, r0, #1
 800418a:	d1f3      	bne.n	8004174 <__sfputs_r+0xa>
 800418c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004190 <_vfiprintf_r>:
 8004190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004194:	460d      	mov	r5, r1
 8004196:	4614      	mov	r4, r2
 8004198:	4698      	mov	r8, r3
 800419a:	4606      	mov	r6, r0
 800419c:	b09d      	sub	sp, #116	@ 0x74
 800419e:	b118      	cbz	r0, 80041a8 <_vfiprintf_r+0x18>
 80041a0:	6a03      	ldr	r3, [r0, #32]
 80041a2:	b90b      	cbnz	r3, 80041a8 <_vfiprintf_r+0x18>
 80041a4:	f7ff fcdc 	bl	8003b60 <__sinit>
 80041a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041aa:	07d9      	lsls	r1, r3, #31
 80041ac:	d405      	bmi.n	80041ba <_vfiprintf_r+0x2a>
 80041ae:	89ab      	ldrh	r3, [r5, #12]
 80041b0:	059a      	lsls	r2, r3, #22
 80041b2:	d402      	bmi.n	80041ba <_vfiprintf_r+0x2a>
 80041b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041b6:	f7ff feca 	bl	8003f4e <__retarget_lock_acquire_recursive>
 80041ba:	89ab      	ldrh	r3, [r5, #12]
 80041bc:	071b      	lsls	r3, r3, #28
 80041be:	d501      	bpl.n	80041c4 <_vfiprintf_r+0x34>
 80041c0:	692b      	ldr	r3, [r5, #16]
 80041c2:	b99b      	cbnz	r3, 80041ec <_vfiprintf_r+0x5c>
 80041c4:	4629      	mov	r1, r5
 80041c6:	4630      	mov	r0, r6
 80041c8:	f7ff fdf2 	bl	8003db0 <__swsetup_r>
 80041cc:	b170      	cbz	r0, 80041ec <_vfiprintf_r+0x5c>
 80041ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041d0:	07dc      	lsls	r4, r3, #31
 80041d2:	d504      	bpl.n	80041de <_vfiprintf_r+0x4e>
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	b01d      	add	sp, #116	@ 0x74
 80041da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041de:	89ab      	ldrh	r3, [r5, #12]
 80041e0:	0598      	lsls	r0, r3, #22
 80041e2:	d4f7      	bmi.n	80041d4 <_vfiprintf_r+0x44>
 80041e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041e6:	f7ff feb3 	bl	8003f50 <__retarget_lock_release_recursive>
 80041ea:	e7f3      	b.n	80041d4 <_vfiprintf_r+0x44>
 80041ec:	2300      	movs	r3, #0
 80041ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80041f0:	2320      	movs	r3, #32
 80041f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041f6:	2330      	movs	r3, #48	@ 0x30
 80041f8:	f04f 0901 	mov.w	r9, #1
 80041fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004200:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80043ac <_vfiprintf_r+0x21c>
 8004204:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004208:	4623      	mov	r3, r4
 800420a:	469a      	mov	sl, r3
 800420c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004210:	b10a      	cbz	r2, 8004216 <_vfiprintf_r+0x86>
 8004212:	2a25      	cmp	r2, #37	@ 0x25
 8004214:	d1f9      	bne.n	800420a <_vfiprintf_r+0x7a>
 8004216:	ebba 0b04 	subs.w	fp, sl, r4
 800421a:	d00b      	beq.n	8004234 <_vfiprintf_r+0xa4>
 800421c:	465b      	mov	r3, fp
 800421e:	4622      	mov	r2, r4
 8004220:	4629      	mov	r1, r5
 8004222:	4630      	mov	r0, r6
 8004224:	f7ff ffa1 	bl	800416a <__sfputs_r>
 8004228:	3001      	adds	r0, #1
 800422a:	f000 80a7 	beq.w	800437c <_vfiprintf_r+0x1ec>
 800422e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004230:	445a      	add	r2, fp
 8004232:	9209      	str	r2, [sp, #36]	@ 0x24
 8004234:	f89a 3000 	ldrb.w	r3, [sl]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 809f 	beq.w	800437c <_vfiprintf_r+0x1ec>
 800423e:	2300      	movs	r3, #0
 8004240:	f04f 32ff 	mov.w	r2, #4294967295
 8004244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004248:	f10a 0a01 	add.w	sl, sl, #1
 800424c:	9304      	str	r3, [sp, #16]
 800424e:	9307      	str	r3, [sp, #28]
 8004250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004254:	931a      	str	r3, [sp, #104]	@ 0x68
 8004256:	4654      	mov	r4, sl
 8004258:	2205      	movs	r2, #5
 800425a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800425e:	4853      	ldr	r0, [pc, #332]	@ (80043ac <_vfiprintf_r+0x21c>)
 8004260:	f000 fb7a 	bl	8004958 <memchr>
 8004264:	9a04      	ldr	r2, [sp, #16]
 8004266:	b9d8      	cbnz	r0, 80042a0 <_vfiprintf_r+0x110>
 8004268:	06d1      	lsls	r1, r2, #27
 800426a:	bf44      	itt	mi
 800426c:	2320      	movmi	r3, #32
 800426e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004272:	0713      	lsls	r3, r2, #28
 8004274:	bf44      	itt	mi
 8004276:	232b      	movmi	r3, #43	@ 0x2b
 8004278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800427c:	f89a 3000 	ldrb.w	r3, [sl]
 8004280:	2b2a      	cmp	r3, #42	@ 0x2a
 8004282:	d015      	beq.n	80042b0 <_vfiprintf_r+0x120>
 8004284:	4654      	mov	r4, sl
 8004286:	2000      	movs	r0, #0
 8004288:	f04f 0c0a 	mov.w	ip, #10
 800428c:	9a07      	ldr	r2, [sp, #28]
 800428e:	4621      	mov	r1, r4
 8004290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004294:	3b30      	subs	r3, #48	@ 0x30
 8004296:	2b09      	cmp	r3, #9
 8004298:	d94b      	bls.n	8004332 <_vfiprintf_r+0x1a2>
 800429a:	b1b0      	cbz	r0, 80042ca <_vfiprintf_r+0x13a>
 800429c:	9207      	str	r2, [sp, #28]
 800429e:	e014      	b.n	80042ca <_vfiprintf_r+0x13a>
 80042a0:	eba0 0308 	sub.w	r3, r0, r8
 80042a4:	fa09 f303 	lsl.w	r3, r9, r3
 80042a8:	4313      	orrs	r3, r2
 80042aa:	46a2      	mov	sl, r4
 80042ac:	9304      	str	r3, [sp, #16]
 80042ae:	e7d2      	b.n	8004256 <_vfiprintf_r+0xc6>
 80042b0:	9b03      	ldr	r3, [sp, #12]
 80042b2:	1d19      	adds	r1, r3, #4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	9103      	str	r1, [sp, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bfbb      	ittet	lt
 80042bc:	425b      	neglt	r3, r3
 80042be:	f042 0202 	orrlt.w	r2, r2, #2
 80042c2:	9307      	strge	r3, [sp, #28]
 80042c4:	9307      	strlt	r3, [sp, #28]
 80042c6:	bfb8      	it	lt
 80042c8:	9204      	strlt	r2, [sp, #16]
 80042ca:	7823      	ldrb	r3, [r4, #0]
 80042cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80042ce:	d10a      	bne.n	80042e6 <_vfiprintf_r+0x156>
 80042d0:	7863      	ldrb	r3, [r4, #1]
 80042d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80042d4:	d132      	bne.n	800433c <_vfiprintf_r+0x1ac>
 80042d6:	9b03      	ldr	r3, [sp, #12]
 80042d8:	3402      	adds	r4, #2
 80042da:	1d1a      	adds	r2, r3, #4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	9203      	str	r2, [sp, #12]
 80042e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042e4:	9305      	str	r3, [sp, #20]
 80042e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80043b0 <_vfiprintf_r+0x220>
 80042ea:	2203      	movs	r2, #3
 80042ec:	4650      	mov	r0, sl
 80042ee:	7821      	ldrb	r1, [r4, #0]
 80042f0:	f000 fb32 	bl	8004958 <memchr>
 80042f4:	b138      	cbz	r0, 8004306 <_vfiprintf_r+0x176>
 80042f6:	2240      	movs	r2, #64	@ 0x40
 80042f8:	9b04      	ldr	r3, [sp, #16]
 80042fa:	eba0 000a 	sub.w	r0, r0, sl
 80042fe:	4082      	lsls	r2, r0
 8004300:	4313      	orrs	r3, r2
 8004302:	3401      	adds	r4, #1
 8004304:	9304      	str	r3, [sp, #16]
 8004306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800430a:	2206      	movs	r2, #6
 800430c:	4829      	ldr	r0, [pc, #164]	@ (80043b4 <_vfiprintf_r+0x224>)
 800430e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004312:	f000 fb21 	bl	8004958 <memchr>
 8004316:	2800      	cmp	r0, #0
 8004318:	d03f      	beq.n	800439a <_vfiprintf_r+0x20a>
 800431a:	4b27      	ldr	r3, [pc, #156]	@ (80043b8 <_vfiprintf_r+0x228>)
 800431c:	bb1b      	cbnz	r3, 8004366 <_vfiprintf_r+0x1d6>
 800431e:	9b03      	ldr	r3, [sp, #12]
 8004320:	3307      	adds	r3, #7
 8004322:	f023 0307 	bic.w	r3, r3, #7
 8004326:	3308      	adds	r3, #8
 8004328:	9303      	str	r3, [sp, #12]
 800432a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800432c:	443b      	add	r3, r7
 800432e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004330:	e76a      	b.n	8004208 <_vfiprintf_r+0x78>
 8004332:	460c      	mov	r4, r1
 8004334:	2001      	movs	r0, #1
 8004336:	fb0c 3202 	mla	r2, ip, r2, r3
 800433a:	e7a8      	b.n	800428e <_vfiprintf_r+0xfe>
 800433c:	2300      	movs	r3, #0
 800433e:	f04f 0c0a 	mov.w	ip, #10
 8004342:	4619      	mov	r1, r3
 8004344:	3401      	adds	r4, #1
 8004346:	9305      	str	r3, [sp, #20]
 8004348:	4620      	mov	r0, r4
 800434a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800434e:	3a30      	subs	r2, #48	@ 0x30
 8004350:	2a09      	cmp	r2, #9
 8004352:	d903      	bls.n	800435c <_vfiprintf_r+0x1cc>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0c6      	beq.n	80042e6 <_vfiprintf_r+0x156>
 8004358:	9105      	str	r1, [sp, #20]
 800435a:	e7c4      	b.n	80042e6 <_vfiprintf_r+0x156>
 800435c:	4604      	mov	r4, r0
 800435e:	2301      	movs	r3, #1
 8004360:	fb0c 2101 	mla	r1, ip, r1, r2
 8004364:	e7f0      	b.n	8004348 <_vfiprintf_r+0x1b8>
 8004366:	ab03      	add	r3, sp, #12
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	462a      	mov	r2, r5
 800436c:	4630      	mov	r0, r6
 800436e:	4b13      	ldr	r3, [pc, #76]	@ (80043bc <_vfiprintf_r+0x22c>)
 8004370:	a904      	add	r1, sp, #16
 8004372:	f3af 8000 	nop.w
 8004376:	4607      	mov	r7, r0
 8004378:	1c78      	adds	r0, r7, #1
 800437a:	d1d6      	bne.n	800432a <_vfiprintf_r+0x19a>
 800437c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800437e:	07d9      	lsls	r1, r3, #31
 8004380:	d405      	bmi.n	800438e <_vfiprintf_r+0x1fe>
 8004382:	89ab      	ldrh	r3, [r5, #12]
 8004384:	059a      	lsls	r2, r3, #22
 8004386:	d402      	bmi.n	800438e <_vfiprintf_r+0x1fe>
 8004388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800438a:	f7ff fde1 	bl	8003f50 <__retarget_lock_release_recursive>
 800438e:	89ab      	ldrh	r3, [r5, #12]
 8004390:	065b      	lsls	r3, r3, #25
 8004392:	f53f af1f 	bmi.w	80041d4 <_vfiprintf_r+0x44>
 8004396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004398:	e71e      	b.n	80041d8 <_vfiprintf_r+0x48>
 800439a:	ab03      	add	r3, sp, #12
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	462a      	mov	r2, r5
 80043a0:	4630      	mov	r0, r6
 80043a2:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <_vfiprintf_r+0x22c>)
 80043a4:	a904      	add	r1, sp, #16
 80043a6:	f000 f87d 	bl	80044a4 <_printf_i>
 80043aa:	e7e4      	b.n	8004376 <_vfiprintf_r+0x1e6>
 80043ac:	08004a16 	.word	0x08004a16
 80043b0:	08004a1c 	.word	0x08004a1c
 80043b4:	08004a20 	.word	0x08004a20
 80043b8:	00000000 	.word	0x00000000
 80043bc:	0800416b 	.word	0x0800416b

080043c0 <_printf_common>:
 80043c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c4:	4616      	mov	r6, r2
 80043c6:	4698      	mov	r8, r3
 80043c8:	688a      	ldr	r2, [r1, #8]
 80043ca:	690b      	ldr	r3, [r1, #16]
 80043cc:	4607      	mov	r7, r0
 80043ce:	4293      	cmp	r3, r2
 80043d0:	bfb8      	it	lt
 80043d2:	4613      	movlt	r3, r2
 80043d4:	6033      	str	r3, [r6, #0]
 80043d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043da:	460c      	mov	r4, r1
 80043dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043e0:	b10a      	cbz	r2, 80043e6 <_printf_common+0x26>
 80043e2:	3301      	adds	r3, #1
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	0699      	lsls	r1, r3, #26
 80043ea:	bf42      	ittt	mi
 80043ec:	6833      	ldrmi	r3, [r6, #0]
 80043ee:	3302      	addmi	r3, #2
 80043f0:	6033      	strmi	r3, [r6, #0]
 80043f2:	6825      	ldr	r5, [r4, #0]
 80043f4:	f015 0506 	ands.w	r5, r5, #6
 80043f8:	d106      	bne.n	8004408 <_printf_common+0x48>
 80043fa:	f104 0a19 	add.w	sl, r4, #25
 80043fe:	68e3      	ldr	r3, [r4, #12]
 8004400:	6832      	ldr	r2, [r6, #0]
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	42ab      	cmp	r3, r5
 8004406:	dc2b      	bgt.n	8004460 <_printf_common+0xa0>
 8004408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800440c:	6822      	ldr	r2, [r4, #0]
 800440e:	3b00      	subs	r3, #0
 8004410:	bf18      	it	ne
 8004412:	2301      	movne	r3, #1
 8004414:	0692      	lsls	r2, r2, #26
 8004416:	d430      	bmi.n	800447a <_printf_common+0xba>
 8004418:	4641      	mov	r1, r8
 800441a:	4638      	mov	r0, r7
 800441c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004420:	47c8      	blx	r9
 8004422:	3001      	adds	r0, #1
 8004424:	d023      	beq.n	800446e <_printf_common+0xae>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	6922      	ldr	r2, [r4, #16]
 800442a:	f003 0306 	and.w	r3, r3, #6
 800442e:	2b04      	cmp	r3, #4
 8004430:	bf14      	ite	ne
 8004432:	2500      	movne	r5, #0
 8004434:	6833      	ldreq	r3, [r6, #0]
 8004436:	f04f 0600 	mov.w	r6, #0
 800443a:	bf08      	it	eq
 800443c:	68e5      	ldreq	r5, [r4, #12]
 800443e:	f104 041a 	add.w	r4, r4, #26
 8004442:	bf08      	it	eq
 8004444:	1aed      	subeq	r5, r5, r3
 8004446:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800444a:	bf08      	it	eq
 800444c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004450:	4293      	cmp	r3, r2
 8004452:	bfc4      	itt	gt
 8004454:	1a9b      	subgt	r3, r3, r2
 8004456:	18ed      	addgt	r5, r5, r3
 8004458:	42b5      	cmp	r5, r6
 800445a:	d11a      	bne.n	8004492 <_printf_common+0xd2>
 800445c:	2000      	movs	r0, #0
 800445e:	e008      	b.n	8004472 <_printf_common+0xb2>
 8004460:	2301      	movs	r3, #1
 8004462:	4652      	mov	r2, sl
 8004464:	4641      	mov	r1, r8
 8004466:	4638      	mov	r0, r7
 8004468:	47c8      	blx	r9
 800446a:	3001      	adds	r0, #1
 800446c:	d103      	bne.n	8004476 <_printf_common+0xb6>
 800446e:	f04f 30ff 	mov.w	r0, #4294967295
 8004472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004476:	3501      	adds	r5, #1
 8004478:	e7c1      	b.n	80043fe <_printf_common+0x3e>
 800447a:	2030      	movs	r0, #48	@ 0x30
 800447c:	18e1      	adds	r1, r4, r3
 800447e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004488:	4422      	add	r2, r4
 800448a:	3302      	adds	r3, #2
 800448c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004490:	e7c2      	b.n	8004418 <_printf_common+0x58>
 8004492:	2301      	movs	r3, #1
 8004494:	4622      	mov	r2, r4
 8004496:	4641      	mov	r1, r8
 8004498:	4638      	mov	r0, r7
 800449a:	47c8      	blx	r9
 800449c:	3001      	adds	r0, #1
 800449e:	d0e6      	beq.n	800446e <_printf_common+0xae>
 80044a0:	3601      	adds	r6, #1
 80044a2:	e7d9      	b.n	8004458 <_printf_common+0x98>

080044a4 <_printf_i>:
 80044a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	7e0f      	ldrb	r7, [r1, #24]
 80044aa:	4691      	mov	r9, r2
 80044ac:	2f78      	cmp	r7, #120	@ 0x78
 80044ae:	4680      	mov	r8, r0
 80044b0:	460c      	mov	r4, r1
 80044b2:	469a      	mov	sl, r3
 80044b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044ba:	d807      	bhi.n	80044cc <_printf_i+0x28>
 80044bc:	2f62      	cmp	r7, #98	@ 0x62
 80044be:	d80a      	bhi.n	80044d6 <_printf_i+0x32>
 80044c0:	2f00      	cmp	r7, #0
 80044c2:	f000 80d1 	beq.w	8004668 <_printf_i+0x1c4>
 80044c6:	2f58      	cmp	r7, #88	@ 0x58
 80044c8:	f000 80b8 	beq.w	800463c <_printf_i+0x198>
 80044cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044d4:	e03a      	b.n	800454c <_printf_i+0xa8>
 80044d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044da:	2b15      	cmp	r3, #21
 80044dc:	d8f6      	bhi.n	80044cc <_printf_i+0x28>
 80044de:	a101      	add	r1, pc, #4	@ (adr r1, 80044e4 <_printf_i+0x40>)
 80044e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044e4:	0800453d 	.word	0x0800453d
 80044e8:	08004551 	.word	0x08004551
 80044ec:	080044cd 	.word	0x080044cd
 80044f0:	080044cd 	.word	0x080044cd
 80044f4:	080044cd 	.word	0x080044cd
 80044f8:	080044cd 	.word	0x080044cd
 80044fc:	08004551 	.word	0x08004551
 8004500:	080044cd 	.word	0x080044cd
 8004504:	080044cd 	.word	0x080044cd
 8004508:	080044cd 	.word	0x080044cd
 800450c:	080044cd 	.word	0x080044cd
 8004510:	0800464f 	.word	0x0800464f
 8004514:	0800457b 	.word	0x0800457b
 8004518:	08004609 	.word	0x08004609
 800451c:	080044cd 	.word	0x080044cd
 8004520:	080044cd 	.word	0x080044cd
 8004524:	08004671 	.word	0x08004671
 8004528:	080044cd 	.word	0x080044cd
 800452c:	0800457b 	.word	0x0800457b
 8004530:	080044cd 	.word	0x080044cd
 8004534:	080044cd 	.word	0x080044cd
 8004538:	08004611 	.word	0x08004611
 800453c:	6833      	ldr	r3, [r6, #0]
 800453e:	1d1a      	adds	r2, r3, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6032      	str	r2, [r6, #0]
 8004544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004548:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800454c:	2301      	movs	r3, #1
 800454e:	e09c      	b.n	800468a <_printf_i+0x1e6>
 8004550:	6833      	ldr	r3, [r6, #0]
 8004552:	6820      	ldr	r0, [r4, #0]
 8004554:	1d19      	adds	r1, r3, #4
 8004556:	6031      	str	r1, [r6, #0]
 8004558:	0606      	lsls	r6, r0, #24
 800455a:	d501      	bpl.n	8004560 <_printf_i+0xbc>
 800455c:	681d      	ldr	r5, [r3, #0]
 800455e:	e003      	b.n	8004568 <_printf_i+0xc4>
 8004560:	0645      	lsls	r5, r0, #25
 8004562:	d5fb      	bpl.n	800455c <_printf_i+0xb8>
 8004564:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004568:	2d00      	cmp	r5, #0
 800456a:	da03      	bge.n	8004574 <_printf_i+0xd0>
 800456c:	232d      	movs	r3, #45	@ 0x2d
 800456e:	426d      	negs	r5, r5
 8004570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004574:	230a      	movs	r3, #10
 8004576:	4858      	ldr	r0, [pc, #352]	@ (80046d8 <_printf_i+0x234>)
 8004578:	e011      	b.n	800459e <_printf_i+0xfa>
 800457a:	6821      	ldr	r1, [r4, #0]
 800457c:	6833      	ldr	r3, [r6, #0]
 800457e:	0608      	lsls	r0, r1, #24
 8004580:	f853 5b04 	ldr.w	r5, [r3], #4
 8004584:	d402      	bmi.n	800458c <_printf_i+0xe8>
 8004586:	0649      	lsls	r1, r1, #25
 8004588:	bf48      	it	mi
 800458a:	b2ad      	uxthmi	r5, r5
 800458c:	2f6f      	cmp	r7, #111	@ 0x6f
 800458e:	6033      	str	r3, [r6, #0]
 8004590:	bf14      	ite	ne
 8004592:	230a      	movne	r3, #10
 8004594:	2308      	moveq	r3, #8
 8004596:	4850      	ldr	r0, [pc, #320]	@ (80046d8 <_printf_i+0x234>)
 8004598:	2100      	movs	r1, #0
 800459a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800459e:	6866      	ldr	r6, [r4, #4]
 80045a0:	2e00      	cmp	r6, #0
 80045a2:	60a6      	str	r6, [r4, #8]
 80045a4:	db05      	blt.n	80045b2 <_printf_i+0x10e>
 80045a6:	6821      	ldr	r1, [r4, #0]
 80045a8:	432e      	orrs	r6, r5
 80045aa:	f021 0104 	bic.w	r1, r1, #4
 80045ae:	6021      	str	r1, [r4, #0]
 80045b0:	d04b      	beq.n	800464a <_printf_i+0x1a6>
 80045b2:	4616      	mov	r6, r2
 80045b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80045b8:	fb03 5711 	mls	r7, r3, r1, r5
 80045bc:	5dc7      	ldrb	r7, [r0, r7]
 80045be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045c2:	462f      	mov	r7, r5
 80045c4:	42bb      	cmp	r3, r7
 80045c6:	460d      	mov	r5, r1
 80045c8:	d9f4      	bls.n	80045b4 <_printf_i+0x110>
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d10b      	bne.n	80045e6 <_printf_i+0x142>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	07df      	lsls	r7, r3, #31
 80045d2:	d508      	bpl.n	80045e6 <_printf_i+0x142>
 80045d4:	6923      	ldr	r3, [r4, #16]
 80045d6:	6861      	ldr	r1, [r4, #4]
 80045d8:	4299      	cmp	r1, r3
 80045da:	bfde      	ittt	le
 80045dc:	2330      	movle	r3, #48	@ 0x30
 80045de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045e6:	1b92      	subs	r2, r2, r6
 80045e8:	6122      	str	r2, [r4, #16]
 80045ea:	464b      	mov	r3, r9
 80045ec:	4621      	mov	r1, r4
 80045ee:	4640      	mov	r0, r8
 80045f0:	f8cd a000 	str.w	sl, [sp]
 80045f4:	aa03      	add	r2, sp, #12
 80045f6:	f7ff fee3 	bl	80043c0 <_printf_common>
 80045fa:	3001      	adds	r0, #1
 80045fc:	d14a      	bne.n	8004694 <_printf_i+0x1f0>
 80045fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004602:	b004      	add	sp, #16
 8004604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	f043 0320 	orr.w	r3, r3, #32
 800460e:	6023      	str	r3, [r4, #0]
 8004610:	2778      	movs	r7, #120	@ 0x78
 8004612:	4832      	ldr	r0, [pc, #200]	@ (80046dc <_printf_i+0x238>)
 8004614:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	6831      	ldr	r1, [r6, #0]
 800461c:	061f      	lsls	r7, r3, #24
 800461e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004622:	d402      	bmi.n	800462a <_printf_i+0x186>
 8004624:	065f      	lsls	r7, r3, #25
 8004626:	bf48      	it	mi
 8004628:	b2ad      	uxthmi	r5, r5
 800462a:	6031      	str	r1, [r6, #0]
 800462c:	07d9      	lsls	r1, r3, #31
 800462e:	bf44      	itt	mi
 8004630:	f043 0320 	orrmi.w	r3, r3, #32
 8004634:	6023      	strmi	r3, [r4, #0]
 8004636:	b11d      	cbz	r5, 8004640 <_printf_i+0x19c>
 8004638:	2310      	movs	r3, #16
 800463a:	e7ad      	b.n	8004598 <_printf_i+0xf4>
 800463c:	4826      	ldr	r0, [pc, #152]	@ (80046d8 <_printf_i+0x234>)
 800463e:	e7e9      	b.n	8004614 <_printf_i+0x170>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	f023 0320 	bic.w	r3, r3, #32
 8004646:	6023      	str	r3, [r4, #0]
 8004648:	e7f6      	b.n	8004638 <_printf_i+0x194>
 800464a:	4616      	mov	r6, r2
 800464c:	e7bd      	b.n	80045ca <_printf_i+0x126>
 800464e:	6833      	ldr	r3, [r6, #0]
 8004650:	6825      	ldr	r5, [r4, #0]
 8004652:	1d18      	adds	r0, r3, #4
 8004654:	6961      	ldr	r1, [r4, #20]
 8004656:	6030      	str	r0, [r6, #0]
 8004658:	062e      	lsls	r6, r5, #24
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	d501      	bpl.n	8004662 <_printf_i+0x1be>
 800465e:	6019      	str	r1, [r3, #0]
 8004660:	e002      	b.n	8004668 <_printf_i+0x1c4>
 8004662:	0668      	lsls	r0, r5, #25
 8004664:	d5fb      	bpl.n	800465e <_printf_i+0x1ba>
 8004666:	8019      	strh	r1, [r3, #0]
 8004668:	2300      	movs	r3, #0
 800466a:	4616      	mov	r6, r2
 800466c:	6123      	str	r3, [r4, #16]
 800466e:	e7bc      	b.n	80045ea <_printf_i+0x146>
 8004670:	6833      	ldr	r3, [r6, #0]
 8004672:	2100      	movs	r1, #0
 8004674:	1d1a      	adds	r2, r3, #4
 8004676:	6032      	str	r2, [r6, #0]
 8004678:	681e      	ldr	r6, [r3, #0]
 800467a:	6862      	ldr	r2, [r4, #4]
 800467c:	4630      	mov	r0, r6
 800467e:	f000 f96b 	bl	8004958 <memchr>
 8004682:	b108      	cbz	r0, 8004688 <_printf_i+0x1e4>
 8004684:	1b80      	subs	r0, r0, r6
 8004686:	6060      	str	r0, [r4, #4]
 8004688:	6863      	ldr	r3, [r4, #4]
 800468a:	6123      	str	r3, [r4, #16]
 800468c:	2300      	movs	r3, #0
 800468e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004692:	e7aa      	b.n	80045ea <_printf_i+0x146>
 8004694:	4632      	mov	r2, r6
 8004696:	4649      	mov	r1, r9
 8004698:	4640      	mov	r0, r8
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	47d0      	blx	sl
 800469e:	3001      	adds	r0, #1
 80046a0:	d0ad      	beq.n	80045fe <_printf_i+0x15a>
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	079b      	lsls	r3, r3, #30
 80046a6:	d413      	bmi.n	80046d0 <_printf_i+0x22c>
 80046a8:	68e0      	ldr	r0, [r4, #12]
 80046aa:	9b03      	ldr	r3, [sp, #12]
 80046ac:	4298      	cmp	r0, r3
 80046ae:	bfb8      	it	lt
 80046b0:	4618      	movlt	r0, r3
 80046b2:	e7a6      	b.n	8004602 <_printf_i+0x15e>
 80046b4:	2301      	movs	r3, #1
 80046b6:	4632      	mov	r2, r6
 80046b8:	4649      	mov	r1, r9
 80046ba:	4640      	mov	r0, r8
 80046bc:	47d0      	blx	sl
 80046be:	3001      	adds	r0, #1
 80046c0:	d09d      	beq.n	80045fe <_printf_i+0x15a>
 80046c2:	3501      	adds	r5, #1
 80046c4:	68e3      	ldr	r3, [r4, #12]
 80046c6:	9903      	ldr	r1, [sp, #12]
 80046c8:	1a5b      	subs	r3, r3, r1
 80046ca:	42ab      	cmp	r3, r5
 80046cc:	dcf2      	bgt.n	80046b4 <_printf_i+0x210>
 80046ce:	e7eb      	b.n	80046a8 <_printf_i+0x204>
 80046d0:	2500      	movs	r5, #0
 80046d2:	f104 0619 	add.w	r6, r4, #25
 80046d6:	e7f5      	b.n	80046c4 <_printf_i+0x220>
 80046d8:	08004a27 	.word	0x08004a27
 80046dc:	08004a38 	.word	0x08004a38

080046e0 <__sflush_r>:
 80046e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	0716      	lsls	r6, r2, #28
 80046e8:	4605      	mov	r5, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	d454      	bmi.n	8004798 <__sflush_r+0xb8>
 80046ee:	684b      	ldr	r3, [r1, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	dc02      	bgt.n	80046fa <__sflush_r+0x1a>
 80046f4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	dd48      	ble.n	800478c <__sflush_r+0xac>
 80046fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046fc:	2e00      	cmp	r6, #0
 80046fe:	d045      	beq.n	800478c <__sflush_r+0xac>
 8004700:	2300      	movs	r3, #0
 8004702:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004706:	682f      	ldr	r7, [r5, #0]
 8004708:	6a21      	ldr	r1, [r4, #32]
 800470a:	602b      	str	r3, [r5, #0]
 800470c:	d030      	beq.n	8004770 <__sflush_r+0x90>
 800470e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	0759      	lsls	r1, r3, #29
 8004714:	d505      	bpl.n	8004722 <__sflush_r+0x42>
 8004716:	6863      	ldr	r3, [r4, #4]
 8004718:	1ad2      	subs	r2, r2, r3
 800471a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800471c:	b10b      	cbz	r3, 8004722 <__sflush_r+0x42>
 800471e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004720:	1ad2      	subs	r2, r2, r3
 8004722:	2300      	movs	r3, #0
 8004724:	4628      	mov	r0, r5
 8004726:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004728:	6a21      	ldr	r1, [r4, #32]
 800472a:	47b0      	blx	r6
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	d106      	bne.n	8004740 <__sflush_r+0x60>
 8004732:	6829      	ldr	r1, [r5, #0]
 8004734:	291d      	cmp	r1, #29
 8004736:	d82b      	bhi.n	8004790 <__sflush_r+0xb0>
 8004738:	4a28      	ldr	r2, [pc, #160]	@ (80047dc <__sflush_r+0xfc>)
 800473a:	40ca      	lsrs	r2, r1
 800473c:	07d6      	lsls	r6, r2, #31
 800473e:	d527      	bpl.n	8004790 <__sflush_r+0xb0>
 8004740:	2200      	movs	r2, #0
 8004742:	6062      	str	r2, [r4, #4]
 8004744:	6922      	ldr	r2, [r4, #16]
 8004746:	04d9      	lsls	r1, r3, #19
 8004748:	6022      	str	r2, [r4, #0]
 800474a:	d504      	bpl.n	8004756 <__sflush_r+0x76>
 800474c:	1c42      	adds	r2, r0, #1
 800474e:	d101      	bne.n	8004754 <__sflush_r+0x74>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	b903      	cbnz	r3, 8004756 <__sflush_r+0x76>
 8004754:	6560      	str	r0, [r4, #84]	@ 0x54
 8004756:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004758:	602f      	str	r7, [r5, #0]
 800475a:	b1b9      	cbz	r1, 800478c <__sflush_r+0xac>
 800475c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004760:	4299      	cmp	r1, r3
 8004762:	d002      	beq.n	800476a <__sflush_r+0x8a>
 8004764:	4628      	mov	r0, r5
 8004766:	f7ff fbf5 	bl	8003f54 <_free_r>
 800476a:	2300      	movs	r3, #0
 800476c:	6363      	str	r3, [r4, #52]	@ 0x34
 800476e:	e00d      	b.n	800478c <__sflush_r+0xac>
 8004770:	2301      	movs	r3, #1
 8004772:	4628      	mov	r0, r5
 8004774:	47b0      	blx	r6
 8004776:	4602      	mov	r2, r0
 8004778:	1c50      	adds	r0, r2, #1
 800477a:	d1c9      	bne.n	8004710 <__sflush_r+0x30>
 800477c:	682b      	ldr	r3, [r5, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0c6      	beq.n	8004710 <__sflush_r+0x30>
 8004782:	2b1d      	cmp	r3, #29
 8004784:	d001      	beq.n	800478a <__sflush_r+0xaa>
 8004786:	2b16      	cmp	r3, #22
 8004788:	d11d      	bne.n	80047c6 <__sflush_r+0xe6>
 800478a:	602f      	str	r7, [r5, #0]
 800478c:	2000      	movs	r0, #0
 800478e:	e021      	b.n	80047d4 <__sflush_r+0xf4>
 8004790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004794:	b21b      	sxth	r3, r3
 8004796:	e01a      	b.n	80047ce <__sflush_r+0xee>
 8004798:	690f      	ldr	r7, [r1, #16]
 800479a:	2f00      	cmp	r7, #0
 800479c:	d0f6      	beq.n	800478c <__sflush_r+0xac>
 800479e:	0793      	lsls	r3, r2, #30
 80047a0:	bf18      	it	ne
 80047a2:	2300      	movne	r3, #0
 80047a4:	680e      	ldr	r6, [r1, #0]
 80047a6:	bf08      	it	eq
 80047a8:	694b      	ldreq	r3, [r1, #20]
 80047aa:	1bf6      	subs	r6, r6, r7
 80047ac:	600f      	str	r7, [r1, #0]
 80047ae:	608b      	str	r3, [r1, #8]
 80047b0:	2e00      	cmp	r6, #0
 80047b2:	ddeb      	ble.n	800478c <__sflush_r+0xac>
 80047b4:	4633      	mov	r3, r6
 80047b6:	463a      	mov	r2, r7
 80047b8:	4628      	mov	r0, r5
 80047ba:	6a21      	ldr	r1, [r4, #32]
 80047bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80047c0:	47e0      	blx	ip
 80047c2:	2800      	cmp	r0, #0
 80047c4:	dc07      	bgt.n	80047d6 <__sflush_r+0xf6>
 80047c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047ce:	f04f 30ff 	mov.w	r0, #4294967295
 80047d2:	81a3      	strh	r3, [r4, #12]
 80047d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d6:	4407      	add	r7, r0
 80047d8:	1a36      	subs	r6, r6, r0
 80047da:	e7e9      	b.n	80047b0 <__sflush_r+0xd0>
 80047dc:	20400001 	.word	0x20400001

080047e0 <_fflush_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	690b      	ldr	r3, [r1, #16]
 80047e4:	4605      	mov	r5, r0
 80047e6:	460c      	mov	r4, r1
 80047e8:	b913      	cbnz	r3, 80047f0 <_fflush_r+0x10>
 80047ea:	2500      	movs	r5, #0
 80047ec:	4628      	mov	r0, r5
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	b118      	cbz	r0, 80047fa <_fflush_r+0x1a>
 80047f2:	6a03      	ldr	r3, [r0, #32]
 80047f4:	b90b      	cbnz	r3, 80047fa <_fflush_r+0x1a>
 80047f6:	f7ff f9b3 	bl	8003b60 <__sinit>
 80047fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f3      	beq.n	80047ea <_fflush_r+0xa>
 8004802:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004804:	07d0      	lsls	r0, r2, #31
 8004806:	d404      	bmi.n	8004812 <_fflush_r+0x32>
 8004808:	0599      	lsls	r1, r3, #22
 800480a:	d402      	bmi.n	8004812 <_fflush_r+0x32>
 800480c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800480e:	f7ff fb9e 	bl	8003f4e <__retarget_lock_acquire_recursive>
 8004812:	4628      	mov	r0, r5
 8004814:	4621      	mov	r1, r4
 8004816:	f7ff ff63 	bl	80046e0 <__sflush_r>
 800481a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800481c:	4605      	mov	r5, r0
 800481e:	07da      	lsls	r2, r3, #31
 8004820:	d4e4      	bmi.n	80047ec <_fflush_r+0xc>
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	059b      	lsls	r3, r3, #22
 8004826:	d4e1      	bmi.n	80047ec <_fflush_r+0xc>
 8004828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800482a:	f7ff fb91 	bl	8003f50 <__retarget_lock_release_recursive>
 800482e:	e7dd      	b.n	80047ec <_fflush_r+0xc>

08004830 <__swhatbuf_r>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	460c      	mov	r4, r1
 8004834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004838:	4615      	mov	r5, r2
 800483a:	2900      	cmp	r1, #0
 800483c:	461e      	mov	r6, r3
 800483e:	b096      	sub	sp, #88	@ 0x58
 8004840:	da0c      	bge.n	800485c <__swhatbuf_r+0x2c>
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	2100      	movs	r1, #0
 8004846:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800484a:	bf14      	ite	ne
 800484c:	2340      	movne	r3, #64	@ 0x40
 800484e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004852:	2000      	movs	r0, #0
 8004854:	6031      	str	r1, [r6, #0]
 8004856:	602b      	str	r3, [r5, #0]
 8004858:	b016      	add	sp, #88	@ 0x58
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	466a      	mov	r2, sp
 800485e:	f000 f849 	bl	80048f4 <_fstat_r>
 8004862:	2800      	cmp	r0, #0
 8004864:	dbed      	blt.n	8004842 <__swhatbuf_r+0x12>
 8004866:	9901      	ldr	r1, [sp, #4]
 8004868:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800486c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004870:	4259      	negs	r1, r3
 8004872:	4159      	adcs	r1, r3
 8004874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004878:	e7eb      	b.n	8004852 <__swhatbuf_r+0x22>

0800487a <__smakebuf_r>:
 800487a:	898b      	ldrh	r3, [r1, #12]
 800487c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800487e:	079d      	lsls	r5, r3, #30
 8004880:	4606      	mov	r6, r0
 8004882:	460c      	mov	r4, r1
 8004884:	d507      	bpl.n	8004896 <__smakebuf_r+0x1c>
 8004886:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800488a:	6023      	str	r3, [r4, #0]
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	2301      	movs	r3, #1
 8004890:	6163      	str	r3, [r4, #20]
 8004892:	b003      	add	sp, #12
 8004894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004896:	466a      	mov	r2, sp
 8004898:	ab01      	add	r3, sp, #4
 800489a:	f7ff ffc9 	bl	8004830 <__swhatbuf_r>
 800489e:	9f00      	ldr	r7, [sp, #0]
 80048a0:	4605      	mov	r5, r0
 80048a2:	4639      	mov	r1, r7
 80048a4:	4630      	mov	r0, r6
 80048a6:	f7ff fbbf 	bl	8004028 <_malloc_r>
 80048aa:	b948      	cbnz	r0, 80048c0 <__smakebuf_r+0x46>
 80048ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b0:	059a      	lsls	r2, r3, #22
 80048b2:	d4ee      	bmi.n	8004892 <__smakebuf_r+0x18>
 80048b4:	f023 0303 	bic.w	r3, r3, #3
 80048b8:	f043 0302 	orr.w	r3, r3, #2
 80048bc:	81a3      	strh	r3, [r4, #12]
 80048be:	e7e2      	b.n	8004886 <__smakebuf_r+0xc>
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80048c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ca:	81a3      	strh	r3, [r4, #12]
 80048cc:	9b01      	ldr	r3, [sp, #4]
 80048ce:	6020      	str	r0, [r4, #0]
 80048d0:	b15b      	cbz	r3, 80048ea <__smakebuf_r+0x70>
 80048d2:	4630      	mov	r0, r6
 80048d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048d8:	f000 f81e 	bl	8004918 <_isatty_r>
 80048dc:	b128      	cbz	r0, 80048ea <__smakebuf_r+0x70>
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	f023 0303 	bic.w	r3, r3, #3
 80048e4:	f043 0301 	orr.w	r3, r3, #1
 80048e8:	81a3      	strh	r3, [r4, #12]
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	431d      	orrs	r5, r3
 80048ee:	81a5      	strh	r5, [r4, #12]
 80048f0:	e7cf      	b.n	8004892 <__smakebuf_r+0x18>
	...

080048f4 <_fstat_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	2300      	movs	r3, #0
 80048f8:	4d06      	ldr	r5, [pc, #24]	@ (8004914 <_fstat_r+0x20>)
 80048fa:	4604      	mov	r4, r0
 80048fc:	4608      	mov	r0, r1
 80048fe:	4611      	mov	r1, r2
 8004900:	602b      	str	r3, [r5, #0]
 8004902:	f7fc fa37 	bl	8000d74 <_fstat>
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	d102      	bne.n	8004910 <_fstat_r+0x1c>
 800490a:	682b      	ldr	r3, [r5, #0]
 800490c:	b103      	cbz	r3, 8004910 <_fstat_r+0x1c>
 800490e:	6023      	str	r3, [r4, #0]
 8004910:	bd38      	pop	{r3, r4, r5, pc}
 8004912:	bf00      	nop
 8004914:	200005a4 	.word	0x200005a4

08004918 <_isatty_r>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	2300      	movs	r3, #0
 800491c:	4d05      	ldr	r5, [pc, #20]	@ (8004934 <_isatty_r+0x1c>)
 800491e:	4604      	mov	r4, r0
 8004920:	4608      	mov	r0, r1
 8004922:	602b      	str	r3, [r5, #0]
 8004924:	f7fc fa35 	bl	8000d92 <_isatty>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_isatty_r+0x1a>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_isatty_r+0x1a>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	200005a4 	.word	0x200005a4

08004938 <_sbrk_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	2300      	movs	r3, #0
 800493c:	4d05      	ldr	r5, [pc, #20]	@ (8004954 <_sbrk_r+0x1c>)
 800493e:	4604      	mov	r4, r0
 8004940:	4608      	mov	r0, r1
 8004942:	602b      	str	r3, [r5, #0]
 8004944:	f7fc fa3c 	bl	8000dc0 <_sbrk>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d102      	bne.n	8004952 <_sbrk_r+0x1a>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	b103      	cbz	r3, 8004952 <_sbrk_r+0x1a>
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	bd38      	pop	{r3, r4, r5, pc}
 8004954:	200005a4 	.word	0x200005a4

08004958 <memchr>:
 8004958:	4603      	mov	r3, r0
 800495a:	b510      	push	{r4, lr}
 800495c:	b2c9      	uxtb	r1, r1
 800495e:	4402      	add	r2, r0
 8004960:	4293      	cmp	r3, r2
 8004962:	4618      	mov	r0, r3
 8004964:	d101      	bne.n	800496a <memchr+0x12>
 8004966:	2000      	movs	r0, #0
 8004968:	e003      	b.n	8004972 <memchr+0x1a>
 800496a:	7804      	ldrb	r4, [r0, #0]
 800496c:	3301      	adds	r3, #1
 800496e:	428c      	cmp	r4, r1
 8004970:	d1f6      	bne.n	8004960 <memchr+0x8>
 8004972:	bd10      	pop	{r4, pc}

08004974 <_init>:
 8004974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004976:	bf00      	nop
 8004978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497a:	bc08      	pop	{r3}
 800497c:	469e      	mov	lr, r3
 800497e:	4770      	bx	lr

08004980 <_fini>:
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	bf00      	nop
 8004984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004986:	bc08      	pop	{r3}
 8004988:	469e      	mov	lr, r3
 800498a:	4770      	bx	lr
