
STM32F103RB_Modbus_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004888  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004994  08004994  00005994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a54  08004a54  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004a54  08004a54  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004a54  08004a54  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a54  08004a54  00005a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a58  08004a58  00005a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004a5c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000068  08004ac4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08004ac4  000065b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a250  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002005  00000000  00000000  000102e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  000122e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000746  00000000  00000000  00012c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001872c  00000000  00000000  000133be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be54  00000000  00000000  0002baea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089572  00000000  00000000  0003793e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0eb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d10  00000000  00000000  000c0ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000c3c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800497c 	.word	0x0800497c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800497c 	.word	0x0800497c

0800014c <RS485_TX_ENABLE>:

/* RS485 제어 핀 매크로 */
//#define RS485_TX_ENABLE() HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET)
//#define RS485_RX_ENABLE() HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET)

void RS485_TX_ENABLE() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000156:	4805      	ldr	r0, [pc, #20]	@ (800016c <RS485_TX_ENABLE+0x20>)
 8000158:	f002 f841 	bl	80021de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000162:	4802      	ldr	r0, [pc, #8]	@ (800016c <RS485_TX_ENABLE+0x20>)
 8000164:	f002 f83b 	bl	80021de <HAL_GPIO_WritePin>
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}
 800016c:	40010c00 	.word	0x40010c00

08000170 <HAL_UART_RxCpltCallback>:
void RS485_RX_ENABLE() {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
}

__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]

    if (huart->Instance == USART1) {
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a27      	ldr	r2, [pc, #156]	@ (800021c <HAL_UART_RxCpltCallback+0xac>)
 800017e:	4293      	cmp	r3, r2
 8000180:	d123      	bne.n	80001ca <HAL_UART_RxCpltCallback+0x5a>

    	printf("HAL_UART_RxCpltCallback  \r\n");
 8000182:	4827      	ldr	r0, [pc, #156]	@ (8000220 <HAL_UART_RxCpltCallback+0xb0>)
 8000184:	f003 fd8e 	bl	8003ca4 <puts>
        // 수신된 데이터를 버퍼에 저장
        ModbusReceiveBuffer[ModbusReceiveIndex++] = UART1_RxBuffer;
 8000188:	4b26      	ldr	r3, [pc, #152]	@ (8000224 <HAL_UART_RxCpltCallback+0xb4>)
 800018a:	881b      	ldrh	r3, [r3, #0]
 800018c:	b29b      	uxth	r3, r3
 800018e:	1c5a      	adds	r2, r3, #1
 8000190:	b291      	uxth	r1, r2
 8000192:	4a24      	ldr	r2, [pc, #144]	@ (8000224 <HAL_UART_RxCpltCallback+0xb4>)
 8000194:	8011      	strh	r1, [r2, #0]
 8000196:	461a      	mov	r2, r3
 8000198:	4b23      	ldr	r3, [pc, #140]	@ (8000228 <HAL_UART_RxCpltCallback+0xb8>)
 800019a:	7819      	ldrb	r1, [r3, #0]
 800019c:	4b23      	ldr	r3, [pc, #140]	@ (800022c <HAL_UART_RxCpltCallback+0xbc>)
 800019e:	5499      	strb	r1, [r3, r2]

        // 패킷 종료 조건 확인 (예: 일정 시간 내에 데이터가 수신되지 않으면 패킷 종료로 간주)
        if (ModbusReceiveIndex >= EXPECTED_PACKET_LENGTH) {
 80001a0:	4b20      	ldr	r3, [pc, #128]	@ (8000224 <HAL_UART_RxCpltCallback+0xb4>)
 80001a2:	881b      	ldrh	r3, [r3, #0]
 80001a4:	b29b      	uxth	r3, r3
 80001a6:	2b07      	cmp	r3, #7
 80001a8:	d909      	bls.n	80001be <HAL_UART_RxCpltCallback+0x4e>
            // 패킷 처리 함수 호출
            ProcessModbusPacket(ModbusReceiveBuffer, ModbusReceiveIndex);
 80001aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000224 <HAL_UART_RxCpltCallback+0xb4>)
 80001ac:	881b      	ldrh	r3, [r3, #0]
 80001ae:	b29b      	uxth	r3, r3
 80001b0:	4619      	mov	r1, r3
 80001b2:	481e      	ldr	r0, [pc, #120]	@ (800022c <HAL_UART_RxCpltCallback+0xbc>)
 80001b4:	f000 f87e 	bl	80002b4 <ProcessModbusPacket>
            ModbusReceiveIndex = 0;  // 인덱스 초기화
 80001b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000224 <HAL_UART_RxCpltCallback+0xb4>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	801a      	strh	r2, [r3, #0]
        }

        // 다음 바이트 수신 준비
        HAL_UART_Receive_IT(&huart1, &UART1_RxBuffer, 1);
 80001be:	2201      	movs	r2, #1
 80001c0:	4919      	ldr	r1, [pc, #100]	@ (8000228 <HAL_UART_RxCpltCallback+0xb8>)
 80001c2:	481b      	ldr	r0, [pc, #108]	@ (8000230 <HAL_UART_RxCpltCallback+0xc0>)
 80001c4:	f002 feb5 	bl	8002f32 <HAL_UART_Receive_IT>
			ModbusReceiveIndex = 0;  // 인덱스 초기화
		}

		HAL_UART_Receive_IT(&huart2, &UART1_RxBuffer, 1);
    }
}
 80001c8:	e024      	b.n	8000214 <HAL_UART_RxCpltCallback+0xa4>
    }else if (huart->Instance == USART2) {
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4a19      	ldr	r2, [pc, #100]	@ (8000234 <HAL_UART_RxCpltCallback+0xc4>)
 80001d0:	4293      	cmp	r3, r2
 80001d2:	d11f      	bne.n	8000214 <HAL_UART_RxCpltCallback+0xa4>
		ModbusReceiveBuffer[ModbusReceiveIndex++] = UART1_RxBuffer;
 80001d4:	4b13      	ldr	r3, [pc, #76]	@ (8000224 <HAL_UART_RxCpltCallback+0xb4>)
 80001d6:	881b      	ldrh	r3, [r3, #0]
 80001d8:	b29b      	uxth	r3, r3
 80001da:	1c5a      	adds	r2, r3, #1
 80001dc:	b291      	uxth	r1, r2
 80001de:	4a11      	ldr	r2, [pc, #68]	@ (8000224 <HAL_UART_RxCpltCallback+0xb4>)
 80001e0:	8011      	strh	r1, [r2, #0]
 80001e2:	461a      	mov	r2, r3
 80001e4:	4b10      	ldr	r3, [pc, #64]	@ (8000228 <HAL_UART_RxCpltCallback+0xb8>)
 80001e6:	7819      	ldrb	r1, [r3, #0]
 80001e8:	4b10      	ldr	r3, [pc, #64]	@ (800022c <HAL_UART_RxCpltCallback+0xbc>)
 80001ea:	5499      	strb	r1, [r3, r2]
		if (ModbusReceiveIndex >= EXPECTED_PACKET_LENGTH) {
 80001ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000224 <HAL_UART_RxCpltCallback+0xb4>)
 80001ee:	881b      	ldrh	r3, [r3, #0]
 80001f0:	b29b      	uxth	r3, r3
 80001f2:	2b07      	cmp	r3, #7
 80001f4:	d909      	bls.n	800020a <HAL_UART_RxCpltCallback+0x9a>
			ProcessModbusPacket(ModbusReceiveBuffer, ModbusReceiveIndex);
 80001f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000224 <HAL_UART_RxCpltCallback+0xb4>)
 80001f8:	881b      	ldrh	r3, [r3, #0]
 80001fa:	b29b      	uxth	r3, r3
 80001fc:	4619      	mov	r1, r3
 80001fe:	480b      	ldr	r0, [pc, #44]	@ (800022c <HAL_UART_RxCpltCallback+0xbc>)
 8000200:	f000 f858 	bl	80002b4 <ProcessModbusPacket>
			ModbusReceiveIndex = 0;  // 인덱스 초기화
 8000204:	4b07      	ldr	r3, [pc, #28]	@ (8000224 <HAL_UART_RxCpltCallback+0xb4>)
 8000206:	2200      	movs	r2, #0
 8000208:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &UART1_RxBuffer, 1);
 800020a:	2201      	movs	r2, #1
 800020c:	4906      	ldr	r1, [pc, #24]	@ (8000228 <HAL_UART_RxCpltCallback+0xb8>)
 800020e:	480a      	ldr	r0, [pc, #40]	@ (8000238 <HAL_UART_RxCpltCallback+0xc8>)
 8000210:	f002 fe8f 	bl	8002f32 <HAL_UART_Receive_IT>
}
 8000214:	bf00      	nop
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	40013800 	.word	0x40013800
 8000220:	08004998 	.word	0x08004998
 8000224:	20000246 	.word	0x20000246
 8000228:	20000244 	.word	0x20000244
 800022c:	20000144 	.word	0x20000144
 8000230:	200000b4 	.word	0x200000b4
 8000234:	40004400 	.word	0x40004400
 8000238:	200000fc 	.word	0x200000fc

0800023c <ModbusCRC>:

uint16_t ModbusCRC(uint8_t *buf, int len) {
 800023c:	b480      	push	{r7}
 800023e:	b087      	sub	sp, #28
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 8000246:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800024a:	82fb      	strh	r3, [r7, #22]
    for (int pos = 0; pos < len; pos++) {
 800024c:	2300      	movs	r3, #0
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	e026      	b.n	80002a0 <ModbusCRC+0x64>
        crc ^= (uint16_t)buf[pos];
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	461a      	mov	r2, r3
 800025c:	8afb      	ldrh	r3, [r7, #22]
 800025e:	4053      	eors	r3, r2
 8000260:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--) {
 8000262:	2308      	movs	r3, #8
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	e015      	b.n	8000294 <ModbusCRC+0x58>
            if ((crc & 1) != 0) {
 8000268:	8afb      	ldrh	r3, [r7, #22]
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d00a      	beq.n	8000288 <ModbusCRC+0x4c>
                crc >>= 1;
 8000272:	8afb      	ldrh	r3, [r7, #22]
 8000274:	085b      	lsrs	r3, r3, #1
 8000276:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 8000278:	8afb      	ldrh	r3, [r7, #22]
 800027a:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800027e:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8000282:	43db      	mvns	r3, r3
 8000284:	82fb      	strh	r3, [r7, #22]
 8000286:	e002      	b.n	800028e <ModbusCRC+0x52>
            } else {
                crc >>= 1;
 8000288:	8afb      	ldrh	r3, [r7, #22]
 800028a:	085b      	lsrs	r3, r3, #1
 800028c:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--) {
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	3b01      	subs	r3, #1
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1e6      	bne.n	8000268 <ModbusCRC+0x2c>
    for (int pos = 0; pos < len; pos++) {
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	3301      	adds	r3, #1
 800029e:	613b      	str	r3, [r7, #16]
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	dbd4      	blt.n	8000252 <ModbusCRC+0x16>
            }
        }
    }
    return crc;
 80002a8:	8afb      	ldrh	r3, [r7, #22]
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	371c      	adds	r7, #28
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr

080002b4 <ProcessModbusPacket>:

void ProcessModbusPacket(uint8_t *buf, int len) {
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	b088      	sub	sp, #32
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
 80002be:	6039      	str	r1, [r7, #0]
    // CRC 확인
    uint16_t crc = ModbusCRC(buf, len - 2);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	3b02      	subs	r3, #2
 80002c4:	4619      	mov	r1, r3
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f7ff ffb8 	bl	800023c <ModbusCRC>
 80002cc:	4603      	mov	r3, r0
 80002ce:	837b      	strh	r3, [r7, #26]
//        // CRC 오류 처리
//        return;
//    }

    // 슬레이브 주소 확인
    uint8_t slaveAddress = buf[0];
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	767b      	strb	r3, [r7, #25]
    if (slaveAddress != SLAVE_ADDRESS) {
 80002d6:	7e7b      	ldrb	r3, [r7, #25]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	f040 809e 	bne.w	800041a <ProcessModbusPacket+0x166>
        // 슬레이브 주소 불일치
        return;
    }

    // 함수 코드 확인 및 처리
    uint8_t functionCode = buf[1];
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	785b      	ldrb	r3, [r3, #1]
 80002e2:	763b      	strb	r3, [r7, #24]
    switch (functionCode) {
 80002e4:	7e3b      	ldrb	r3, [r7, #24]
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	f040 8098 	bne.w	800041c <ProcessModbusPacket+0x168>
        case 0x03:  // Read Holding Registers
            // 시작 주소 및 레지스터 수 읽기
            uint16_t startAddress = (buf[2] << 8) | buf[3];
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3302      	adds	r3, #2
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	b21b      	sxth	r3, r3
 80002f4:	021b      	lsls	r3, r3, #8
 80002f6:	b21a      	sxth	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3303      	adds	r3, #3
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	b21b      	sxth	r3, r3
 8000300:	4313      	orrs	r3, r2
 8000302:	b21b      	sxth	r3, r3
 8000304:	82fb      	strh	r3, [r7, #22]
            uint16_t numRegisters = (buf[4] << 8) | buf[5];
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	3304      	adds	r3, #4
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	b21b      	sxth	r3, r3
 800030e:	021b      	lsls	r3, r3, #8
 8000310:	b21a      	sxth	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	3305      	adds	r3, #5
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	b21b      	sxth	r3, r3
 800031a:	4313      	orrs	r3, r2
 800031c:	b21b      	sxth	r3, r3
 800031e:	82bb      	strh	r3, [r7, #20]

            // 응답 패킷 준비
            uint8_t response[5 + 2 * numRegisters];
 8000320:	8abb      	ldrh	r3, [r7, #20]
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	1d5e      	adds	r6, r3, #5
 8000326:	466b      	mov	r3, sp
 8000328:	469a      	mov	sl, r3
 800032a:	1e73      	subs	r3, r6, #1
 800032c:	613b      	str	r3, [r7, #16]
 800032e:	4632      	mov	r2, r6
 8000330:	2300      	movs	r3, #0
 8000332:	4690      	mov	r8, r2
 8000334:	4699      	mov	r9, r3
 8000336:	f04f 0200 	mov.w	r2, #0
 800033a:	f04f 0300 	mov.w	r3, #0
 800033e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800034a:	4632      	mov	r2, r6
 800034c:	2300      	movs	r3, #0
 800034e:	4614      	mov	r4, r2
 8000350:	461d      	mov	r5, r3
 8000352:	f04f 0200 	mov.w	r2, #0
 8000356:	f04f 0300 	mov.w	r3, #0
 800035a:	00eb      	lsls	r3, r5, #3
 800035c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000360:	00e2      	lsls	r2, r4, #3
 8000362:	4633      	mov	r3, r6
 8000364:	3307      	adds	r3, #7
 8000366:	08db      	lsrs	r3, r3, #3
 8000368:	00db      	lsls	r3, r3, #3
 800036a:	ebad 0d03 	sub.w	sp, sp, r3
 800036e:	466b      	mov	r3, sp
 8000370:	3300      	adds	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
            response[0] = slaveAddress;
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	7e7a      	ldrb	r2, [r7, #25]
 8000378:	701a      	strb	r2, [r3, #0]
            response[1] = functionCode;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	7e3a      	ldrb	r2, [r7, #24]
 800037e:	705a      	strb	r2, [r3, #1]
            response[2] = numRegisters * 2;  // 바이트 수
 8000380:	8abb      	ldrh	r3, [r7, #20]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	b2da      	uxtb	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	709a      	strb	r2, [r3, #2]
            for (int i = 0; i < numRegisters; i++) {
 800038c:	2300      	movs	r3, #0
 800038e:	61fb      	str	r3, [r7, #28]
 8000390:	e01c      	b.n	80003cc <ProcessModbusPacket+0x118>
            	uint16_t regValue = ReadHoldingRegister(startAddress + i);
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	b29a      	uxth	r2, r3
 8000396:	8afb      	ldrh	r3, [r7, #22]
 8000398:	4413      	add	r3, r2
 800039a:	b29b      	uxth	r3, r3
 800039c:	4618      	mov	r0, r3
 800039e:	f000 f843 	bl	8000428 <ReadHoldingRegister>
 80003a2:	4603      	mov	r3, r0
 80003a4:	817b      	strh	r3, [r7, #10]
                response[3 + i * 2] = regValue >> 8;
 80003a6:	897b      	ldrh	r3, [r7, #10]
 80003a8:	0a1b      	lsrs	r3, r3, #8
 80003aa:	b29a      	uxth	r2, r3
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	3303      	adds	r3, #3
 80003b2:	b2d1      	uxtb	r1, r2
 80003b4:	68fa      	ldr	r2, [r7, #12]
 80003b6:	54d1      	strb	r1, [r2, r3]
                response[4 + i * 2] = regValue & 0xFF;
 80003b8:	69fb      	ldr	r3, [r7, #28]
 80003ba:	3302      	adds	r3, #2
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	897a      	ldrh	r2, [r7, #10]
 80003c0:	b2d1      	uxtb	r1, r2
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	54d1      	strb	r1, [r2, r3]
            for (int i = 0; i < numRegisters; i++) {
 80003c6:	69fb      	ldr	r3, [r7, #28]
 80003c8:	3301      	adds	r3, #1
 80003ca:	61fb      	str	r3, [r7, #28]
 80003cc:	8abb      	ldrh	r3, [r7, #20]
 80003ce:	69fa      	ldr	r2, [r7, #28]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	dbde      	blt.n	8000392 <ProcessModbusPacket+0xde>
            }

            // CRC 추가
            crc = ModbusCRC(response, 3 + 2 * numRegisters);
 80003d4:	8abb      	ldrh	r3, [r7, #20]
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	3303      	adds	r3, #3
 80003da:	4619      	mov	r1, r3
 80003dc:	68f8      	ldr	r0, [r7, #12]
 80003de:	f7ff ff2d 	bl	800023c <ModbusCRC>
 80003e2:	4603      	mov	r3, r0
 80003e4:	837b      	strh	r3, [r7, #26]
            response[3 + 2 * numRegisters] = crc & 0xFF;
 80003e6:	8abb      	ldrh	r3, [r7, #20]
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	3303      	adds	r3, #3
 80003ec:	8b7a      	ldrh	r2, [r7, #26]
 80003ee:	b2d1      	uxtb	r1, r2
 80003f0:	68fa      	ldr	r2, [r7, #12]
 80003f2:	54d1      	strb	r1, [r2, r3]
            response[4 + 2 * numRegisters] = crc >> 8;
 80003f4:	8b7b      	ldrh	r3, [r7, #26]
 80003f6:	0a1b      	lsrs	r3, r3, #8
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	8abb      	ldrh	r3, [r7, #20]
 80003fc:	3302      	adds	r3, #2
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	b2d1      	uxtb	r1, r2
 8000402:	68fa      	ldr	r2, [r7, #12]
 8000404:	54d1      	strb	r1, [r2, r3]

            // 응답 전송
            HAL_UART_Transmit(&huart1, response, sizeof(response), HAL_MAX_DELAY);
 8000406:	b2b2      	uxth	r2, r6
 8000408:	f04f 33ff 	mov.w	r3, #4294967295
 800040c:	68f9      	ldr	r1, [r7, #12]
 800040e:	4805      	ldr	r0, [pc, #20]	@ (8000424 <ProcessModbusPacket+0x170>)
 8000410:	f002 fd04 	bl	8002e1c <HAL_UART_Transmit>
            break;
 8000414:	bf00      	nop
 8000416:	46d5      	mov	sp, sl
 8000418:	e000      	b.n	800041c <ProcessModbusPacket+0x168>
        return;
 800041a:	bf00      	nop

        // 다른 함수 코드 처리
    }
}
 800041c:	3720      	adds	r7, #32
 800041e:	46bd      	mov	sp, r7
 8000420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000424:	200000b4 	.word	0x200000b4

08000428 <ReadHoldingRegister>:

	// 응답 전송
	HAL_UART_Transmit(&huart1, response, sizeof(response), HAL_MAX_DELAY);
}

uint16_t ReadHoldingRegister(uint16_t address) {
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	80fb      	strh	r3, [r7, #6]
    // 실제 레지스터 읽기 로직을 여기에 추가
    // 예제에서는 address에 따라 임의의 값을 반환

	uint16_t regVal = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	81fb      	strh	r3, [r7, #14]
	regVal = uwADCxConvertedValue[address];
 8000436:	88fb      	ldrh	r3, [r7, #6]
 8000438:	4a04      	ldr	r2, [pc, #16]	@ (800044c <ReadHoldingRegister+0x24>)
 800043a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800043e:	81fb      	strh	r3, [r7, #14]
    return regVal;
 8000440:	89fb      	ldrh	r3, [r7, #14]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	20000248 	.word	0x20000248

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	b089      	sub	sp, #36	@ 0x24
 8000454:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000456:	f000 fd19 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045a:	f000 f8d3 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045e:	f000 f9bf 	bl	80007e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000462:	f000 f92b 	bl	80006bc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000466:	f000 f967 	bl	8000738 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800046a:	f000 f98f 	bl	800078c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &UART1_RxBuffer, 1);
 800046e:	2201      	movs	r2, #1
 8000470:	495a      	ldr	r1, [pc, #360]	@ (80005dc <main+0x18c>)
 8000472:	485b      	ldr	r0, [pc, #364]	@ (80005e0 <main+0x190>)
 8000474:	f002 fd5d 	bl	8002f32 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); // Relay Off
 8000478:	2201      	movs	r2, #1
 800047a:	2140      	movs	r1, #64	@ 0x40
 800047c:	4859      	ldr	r0, [pc, #356]	@ (80005e4 <main+0x194>)
 800047e:	f001 feae 	bl	80021de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); // Relay Off
 8000482:	2201      	movs	r2, #1
 8000484:	2180      	movs	r1, #128	@ 0x80
 8000486:	4857      	ldr	r0, [pc, #348]	@ (80005e4 <main+0x194>)
 8000488:	f001 fea9 	bl	80021de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Relay Off
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000492:	4854      	ldr	r0, [pc, #336]	@ (80005e4 <main+0x194>)
 8000494:	f001 fea3 	bl	80021de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); // Relay Off
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800049e:	4851      	ldr	r0, [pc, #324]	@ (80005e4 <main+0x194>)
 80004a0:	f001 fe9d 	bl	80021de <HAL_GPIO_WritePin>

  uint16_t len = modbus_build_request(0x01, 0x0000, 0x0001, 1, tx_buf);
 80004a4:	4b50      	ldr	r3, [pc, #320]	@ (80005e8 <main+0x198>)
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	2301      	movs	r3, #1
 80004aa:	2201      	movs	r2, #1
 80004ac:	2100      	movs	r1, #0
 80004ae:	2001      	movs	r0, #1
 80004b0:	f000 fa89 	bl	80009c6 <modbus_build_request>
 80004b4:	4603      	mov	r3, r0
 80004b6:	80bb      	strh	r3, [r7, #4]

  RS485_TX_ENABLE();
 80004b8:	f7ff fe48 	bl	800014c <RS485_TX_ENABLE>
  HAL_UART_Transmit(&huart1, tx_buf, len, 100);
 80004bc:	88ba      	ldrh	r2, [r7, #4]
 80004be:	2364      	movs	r3, #100	@ 0x64
 80004c0:	4949      	ldr	r1, [pc, #292]	@ (80005e8 <main+0x198>)
 80004c2:	4847      	ldr	r0, [pc, #284]	@ (80005e0 <main+0x190>)
 80004c4:	f002 fcaa 	bl	8002e1c <HAL_UART_Transmit>
  HAL_Delay(1000);
 80004c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004cc:	f000 fd40 	bl	8000f50 <HAL_Delay>
  /* USER CODE BEGIN WHILE */

  /* ### - 1 - Initialize ADC peripheral(CubeMX ?��?�� ?��?��) ##################### */

  /* ### - 2 - Start calibration ############################################ */
  if (HAL_ADCEx_Calibration_Start (&hadc1) != HAL_OK)
 80004d0:	4846      	ldr	r0, [pc, #280]	@ (80005ec <main+0x19c>)
 80004d2:	f001 fa7b 	bl	80019cc <HAL_ADCEx_Calibration_Start>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <main+0x90>
  {
	  Error_Handler ();
 80004dc:	f000 fa30 	bl	8000940 <Error_Handler>
  }

  if (HAL_ADC_Start_IT (&hadc1) != HAL_OK)
 80004e0:	4842      	ldr	r0, [pc, #264]	@ (80005ec <main+0x19c>)
 80004e2:	f001 f811 	bl	8001508 <HAL_ADC_Start_IT>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <main+0xa0>
  {
     Error_Handler ();
 80004ec:	f000 fa28 	bl	8000940 <Error_Handler>
//
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);

	 /* ### - 4 - Start the conversion process ################################*/
	 if (HAL_ADC_Start (&hadc1) != HAL_OK)
 80004f0:	483e      	ldr	r0, [pc, #248]	@ (80005ec <main+0x19c>)
 80004f2:	f000 fe29 	bl	8001148 <HAL_ADC_Start>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <main+0xb0>
	  {
		/* Start Conversation Error */
		Error_Handler ();
 80004fc:	f000 fa20 	bl	8000940 <Error_Handler>
	  }

	 for (uint8_t i = 0; i < 10; i++)
 8000500:	2300      	movs	r3, #0
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	e018      	b.n	8000538 <main+0xe8>
	  {
            /* ### - 5 - Wait for the end of conversion ############################*/
            HAL_ADC_PollForConversion (&hadc1, 100);
 8000506:	2164      	movs	r1, #100	@ 0x64
 8000508:	4838      	ldr	r0, [pc, #224]	@ (80005ec <main+0x19c>)
 800050a:	f000 fef7 	bl	80012fc <HAL_ADC_PollForConversion>

            /* Check if the continuous conversion of regular channel is finished */
            if ((HAL_ADC_GetState (&hadc1) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC)
 800050e:	4837      	ldr	r0, [pc, #220]	@ (80005ec <main+0x19c>)
 8000510:	f001 f9b4 	bl	800187c <HAL_ADC_GetState>
 8000514:	4603      	mov	r3, r0
 8000516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800051a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800051e:	d108      	bne.n	8000532 <main+0xe2>
              {
                /* ### - 6 - Get the converted value of regular channel ##############*/
                uwADCxConvertedValue[i] = HAL_ADC_GetValue (&hadc1);
 8000520:	4832      	ldr	r0, [pc, #200]	@ (80005ec <main+0x19c>)
 8000522:	f001 f8a7 	bl	8001674 <HAL_ADC_GetValue>
 8000526:	4602      	mov	r2, r0
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	b291      	uxth	r1, r2
 800052c:	4a30      	ldr	r2, [pc, #192]	@ (80005f0 <main+0x1a0>)
 800052e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	 for (uint8_t i = 0; i < 10; i++)
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	3301      	adds	r3, #1
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b09      	cmp	r3, #9
 800053c:	d9e3      	bls.n	8000506 <main+0xb6>
              }
          }

        /* ### - 7 - Stop the conversion process #################################*/
        HAL_ADC_Stop (&hadc1);
 800053e:	482b      	ldr	r0, [pc, #172]	@ (80005ec <main+0x19c>)
 8000540:	f000 feb0 	bl	80012a4 <HAL_ADC_Stop>
        //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

        // 500ms 마다 LED 토글
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // PA5 핀에 연결된 LED 제어 (핀 이름은 실제 설정에 맞게 변경)
 8000544:	2120      	movs	r1, #32
 8000546:	482b      	ldr	r0, [pc, #172]	@ (80005f4 <main+0x1a4>)
 8000548:	f001 fe61 	bl	800220e <HAL_GPIO_TogglePin>
        HAL_Delay(500); // 500ms 지연
 800054c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000550:	f000 fcfe 	bl	8000f50 <HAL_Delay>


        // 버튼(B1, 예를 들어 PC13)이 눌렸는지 확인 (Pull-up 저항 사용 가정, 누르면 LOW)
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000554:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000558:	4822      	ldr	r0, [pc, #136]	@ (80005e4 <main+0x194>)
 800055a:	f001 fe29 	bl	80021b0 <HAL_GPIO_ReadPin>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d132      	bne.n	80005ca <main+0x17a>
		{
			printf("%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x\r\n", rx_buf[0], rx_buf[1], rx_buf[2], rx_buf[3], rx_buf[4], rx_buf[5], rx_buf[6], rx_buf[7] );
 8000564:	4b24      	ldr	r3, [pc, #144]	@ (80005f8 <main+0x1a8>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	461d      	mov	r5, r3
 800056a:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <main+0x1a8>)
 800056c:	785b      	ldrb	r3, [r3, #1]
 800056e:	461e      	mov	r6, r3
 8000570:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <main+0x1a8>)
 8000572:	789b      	ldrb	r3, [r3, #2]
 8000574:	469c      	mov	ip, r3
 8000576:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <main+0x1a8>)
 8000578:	78db      	ldrb	r3, [r3, #3]
 800057a:	461a      	mov	r2, r3
 800057c:	4b1e      	ldr	r3, [pc, #120]	@ (80005f8 <main+0x1a8>)
 800057e:	791b      	ldrb	r3, [r3, #4]
 8000580:	4619      	mov	r1, r3
 8000582:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <main+0x1a8>)
 8000584:	795b      	ldrb	r3, [r3, #5]
 8000586:	4618      	mov	r0, r3
 8000588:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <main+0x1a8>)
 800058a:	799b      	ldrb	r3, [r3, #6]
 800058c:	461c      	mov	r4, r3
 800058e:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <main+0x1a8>)
 8000590:	79db      	ldrb	r3, [r3, #7]
 8000592:	9304      	str	r3, [sp, #16]
 8000594:	9403      	str	r4, [sp, #12]
 8000596:	9002      	str	r0, [sp, #8]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	4663      	mov	r3, ip
 800059e:	4632      	mov	r2, r6
 80005a0:	4629      	mov	r1, r5
 80005a2:	4816      	ldr	r0, [pc, #88]	@ (80005fc <main+0x1ac>)
 80005a4:	f003 fb16 	bl	8003bd4 <iprintf>
			//HAL_UART_Transmit(&huart2, (uint8_t *)"Blue Button Pressed..\r\n", 23, HAL_MAX_DELAY);
			//RS485_TX_ENABLE();
			HAL_UART_Transmit(&huart2, &UART1_RxBuffer, 10, 100);
 80005a8:	2364      	movs	r3, #100	@ 0x64
 80005aa:	220a      	movs	r2, #10
 80005ac:	490b      	ldr	r1, [pc, #44]	@ (80005dc <main+0x18c>)
 80005ae:	4814      	ldr	r0, [pc, #80]	@ (8000600 <main+0x1b0>)
 80005b0:	f002 fc34 	bl	8002e1c <HAL_UART_Transmit>
			//HAL_Delay(500);

			// 버튼 눌렸을 때 처리 (Debouncing은 추가 구현 필요)
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // LED 켜기
 80005b4:	2201      	movs	r2, #1
 80005b6:	2120      	movs	r1, #32
 80005b8:	480e      	ldr	r0, [pc, #56]	@ (80005f4 <main+0x1a4>)
 80005ba:	f001 fe10 	bl	80021de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); // Relay Off
 80005be:	2200      	movs	r2, #0
 80005c0:	2180      	movs	r1, #128	@ 0x80
 80005c2:	4808      	ldr	r0, [pc, #32]	@ (80005e4 <main+0x194>)
 80005c4:	f001 fe0b 	bl	80021de <HAL_GPIO_WritePin>
 80005c8:	e004      	b.n	80005d4 <main+0x184>

		}else {

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); // Relay On
 80005ca:	2201      	movs	r2, #1
 80005cc:	2180      	movs	r1, #128	@ 0x80
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <main+0x194>)
 80005d0:	f001 fe05 	bl	80021de <HAL_GPIO_WritePin>
		}

        HAL_Delay(100);
 80005d4:	2064      	movs	r0, #100	@ 0x64
 80005d6:	f000 fcbb 	bl	8000f50 <HAL_Delay>
	 if (HAL_ADC_Start (&hadc1) != HAL_OK)
 80005da:	e789      	b.n	80004f0 <main+0xa0>
 80005dc:	20000244 	.word	0x20000244
 80005e0:	200000b4 	.word	0x200000b4
 80005e4:	40011000 	.word	0x40011000
 80005e8:	20000260 	.word	0x20000260
 80005ec:	20000084 	.word	0x20000084
 80005f0:	20000248 	.word	0x20000248
 80005f4:	40010800 	.word	0x40010800
 80005f8:	20000360 	.word	0x20000360
 80005fc:	080049b4 	.word	0x080049b4
 8000600:	200000fc 	.word	0x200000fc

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	@ 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800060e:	2228      	movs	r2, #40	@ 0x28
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fc26 	bl	8003e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000638:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800063c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000642:	2301      	movs	r3, #1
 8000644:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800064e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000650:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000654:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fe12 	bl	8002284 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000666:	f000 f96b 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800067a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2102      	movs	r1, #2
 8000686:	4618      	mov	r0, r3
 8000688:	f002 f87e 	bl	8002788 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000692:	f000 f955 	bl	8000940 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000696:	2302      	movs	r3, #2
 8000698:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800069a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800069e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 f9fe 	bl	8002aa4 <HAL_RCCEx_PeriphCLKConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ae:	f000 f947 	bl	8000940 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	@ 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_ADC1_Init+0x74>)
 80006ce:	4a19      	ldr	r2, [pc, #100]	@ (8000734 <MX_ADC1_Init+0x78>)
 80006d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <MX_ADC1_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_ADC1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_ADC1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_ADC1_Init+0x74>)
 80006e6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80006ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ec:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_ADC1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_ADC1_Init+0x74>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f8:	480d      	ldr	r0, [pc, #52]	@ (8000730 <MX_ADC1_Init+0x74>)
 80006fa:	f000 fc4d 	bl	8000f98 <HAL_ADC_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f91c 	bl	8000940 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000708:	2301      	movs	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070c:	2301      	movs	r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_ADC1_Init+0x74>)
 800071a:	f000 ffb7 	bl	800168c <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000724:	f000 f90c 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000084 	.word	0x20000084
 8000734:	40012400 	.word	0x40012400

08000738 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_USART1_UART_Init+0x4c>)
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <MX_USART1_UART_Init+0x50>)
 8000740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000742:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <MX_USART1_UART_Init+0x4c>)
 8000744:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_USART1_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_USART1_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <MX_USART1_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_USART1_UART_Init+0x4c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <MX_USART1_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_USART1_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_USART1_UART_Init+0x4c>)
 8000770:	f002 fb04 	bl	8002d7c <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800077a:	f000 f8e1 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000b4 	.word	0x200000b4
 8000788:	40013800 	.word	0x40013800

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	@ (80007dc <MX_USART2_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000796:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000798:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f002 fada 	bl	8002d7c <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 f8b7 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000fc 	.word	0x200000fc
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f4:	4b42      	ldr	r3, [pc, #264]	@ (8000900 <MX_GPIO_Init+0x120>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a41      	ldr	r2, [pc, #260]	@ (8000900 <MX_GPIO_Init+0x120>)
 80007fa:	f043 0310 	orr.w	r3, r3, #16
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b3f      	ldr	r3, [pc, #252]	@ (8000900 <MX_GPIO_Init+0x120>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0310 	and.w	r3, r3, #16
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080c:	4b3c      	ldr	r3, [pc, #240]	@ (8000900 <MX_GPIO_Init+0x120>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a3b      	ldr	r2, [pc, #236]	@ (8000900 <MX_GPIO_Init+0x120>)
 8000812:	f043 0320 	orr.w	r3, r3, #32
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b39      	ldr	r3, [pc, #228]	@ (8000900 <MX_GPIO_Init+0x120>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0320 	and.w	r3, r3, #32
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b36      	ldr	r3, [pc, #216]	@ (8000900 <MX_GPIO_Init+0x120>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a35      	ldr	r2, [pc, #212]	@ (8000900 <MX_GPIO_Init+0x120>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b33      	ldr	r3, [pc, #204]	@ (8000900 <MX_GPIO_Init+0x120>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083c:	4b30      	ldr	r3, [pc, #192]	@ (8000900 <MX_GPIO_Init+0x120>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a2f      	ldr	r2, [pc, #188]	@ (8000900 <MX_GPIO_Init+0x120>)
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b2d      	ldr	r3, [pc, #180]	@ (8000900 <MX_GPIO_Init+0x120>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0308 	and.w	r3, r3, #8
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2120      	movs	r1, #32
 8000858:	482a      	ldr	r0, [pc, #168]	@ (8000904 <MX_GPIO_Init+0x124>)
 800085a:	f001 fcc0 	bl	80021de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RE_Pin|DE_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000864:	4828      	ldr	r0, [pc, #160]	@ (8000908 <MX_GPIO_Init+0x128>)
 8000866:	f001 fcba 	bl	80021de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000870:	4826      	ldr	r0, [pc, #152]	@ (800090c <MX_GPIO_Init+0x12c>)
 8000872:	f001 fcb4 	bl	80021de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000876:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087c:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <MX_GPIO_Init+0x130>)
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	4820      	ldr	r0, [pc, #128]	@ (800090c <MX_GPIO_Init+0x12c>)
 800088c:	f001 fb0c 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000890:	2320      	movs	r3, #32
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2302      	movs	r3, #2
 800089e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4619      	mov	r1, r3
 80008a6:	4817      	ldr	r0, [pc, #92]	@ (8000904 <MX_GPIO_Init+0x124>)
 80008a8:	f001 fafe 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RE_Pin DE_Pin */
  GPIO_InitStruct.Pin = RE_Pin|DE_Pin;
 80008ac:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80008b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	4619      	mov	r1, r3
 80008c4:	4810      	ldr	r0, [pc, #64]	@ (8000908 <MX_GPIO_Init+0x128>)
 80008c6:	f001 faef 	bl	8001ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80008ca:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80008ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2302      	movs	r3, #2
 80008da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	480a      	ldr	r0, [pc, #40]	@ (800090c <MX_GPIO_Init+0x12c>)
 80008e4:	f001 fae0 	bl	8001ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	2028      	movs	r0, #40	@ 0x28
 80008ee:	f001 f9f2 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008f2:	2028      	movs	r0, #40	@ 0x28
 80008f4:	f001 fa0b 	bl	8001d0e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000
 8000904:	40010800 	.word	0x40010800
 8000908:	40010c00 	.word	0x40010c00
 800090c:	40011000 	.word	0x40011000
 8000910:	10110000 	.word	0x10110000

08000914 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	b29a      	uxth	r2, r3
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	4804      	ldr	r0, [pc, #16]	@ (800093c <_write+0x28>)
 800092c:	f002 fa76 	bl	8002e1c <HAL_UART_Transmit>
    return len;
 8000930:	687b      	ldr	r3, [r7, #4]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000fc 	.word	0x200000fc

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <modbus_crc16>:
#include "modbus.h"

uint16_t modbus_crc16(uint8_t *buf, uint16_t len)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000958:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800095c:	81fb      	strh	r3, [r7, #14]
    for (uint16_t pos = 0; pos < len; pos++) {
 800095e:	2300      	movs	r3, #0
 8000960:	81bb      	strh	r3, [r7, #12]
 8000962:	e026      	b.n	80009b2 <modbus_crc16+0x66>
        crc ^= (uint16_t)buf[pos];
 8000964:	89bb      	ldrh	r3, [r7, #12]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	89fb      	ldrh	r3, [r7, #14]
 8000970:	4053      	eors	r3, r2
 8000972:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	e015      	b.n	80009a6 <modbus_crc16+0x5a>
            if ((crc & 0x0001) != 0) {
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00a      	beq.n	800099a <modbus_crc16+0x4e>
                crc >>= 1;
 8000984:	89fb      	ldrh	r3, [r7, #14]
 8000986:	085b      	lsrs	r3, r3, #1
 8000988:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 800098a:	89fb      	ldrh	r3, [r7, #14]
 800098c:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8000990:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8000994:	43db      	mvns	r3, r3
 8000996:	81fb      	strh	r3, [r7, #14]
 8000998:	e002      	b.n	80009a0 <modbus_crc16+0x54>
            } else {
                crc >>= 1;
 800099a:	89fb      	ldrh	r3, [r7, #14]
 800099c:	085b      	lsrs	r3, r3, #1
 800099e:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	3301      	adds	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	2b07      	cmp	r3, #7
 80009aa:	dde6      	ble.n	800097a <modbus_crc16+0x2e>
    for (uint16_t pos = 0; pos < len; pos++) {
 80009ac:	89bb      	ldrh	r3, [r7, #12]
 80009ae:	3301      	adds	r3, #1
 80009b0:	81bb      	strh	r3, [r7, #12]
 80009b2:	89ba      	ldrh	r2, [r7, #12]
 80009b4:	887b      	ldrh	r3, [r7, #2]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d3d4      	bcc.n	8000964 <modbus_crc16+0x18>
            }
        }
    }
    return crc;
 80009ba:	89fb      	ldrh	r3, [r7, #14]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <modbus_build_request>:

uint16_t modbus_build_request(uint8_t slave_id, uint8_t func_code, uint16_t reg_addr, uint16_t reg_count, uint8_t *tx_buf)
{
 80009c6:	b590      	push	{r4, r7, lr}
 80009c8:	b085      	sub	sp, #20
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4604      	mov	r4, r0
 80009ce:	4608      	mov	r0, r1
 80009d0:	4611      	mov	r1, r2
 80009d2:	461a      	mov	r2, r3
 80009d4:	4623      	mov	r3, r4
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	4603      	mov	r3, r0
 80009da:	71bb      	strb	r3, [r7, #6]
 80009dc:	460b      	mov	r3, r1
 80009de:	80bb      	strh	r3, [r7, #4]
 80009e0:	4613      	mov	r3, r2
 80009e2:	807b      	strh	r3, [r7, #2]
    tx_buf[0] = slave_id;
 80009e4:	6a3b      	ldr	r3, [r7, #32]
 80009e6:	79fa      	ldrb	r2, [r7, #7]
 80009e8:	701a      	strb	r2, [r3, #0]
    tx_buf[1] = func_code;
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	3301      	adds	r3, #1
 80009ee:	79ba      	ldrb	r2, [r7, #6]
 80009f0:	701a      	strb	r2, [r3, #0]
    tx_buf[2] = reg_addr >> 8;
 80009f2:	88bb      	ldrh	r3, [r7, #4]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	3302      	adds	r3, #2
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	701a      	strb	r2, [r3, #0]
    tx_buf[3] = reg_addr & 0xFF;
 8000a00:	6a3b      	ldr	r3, [r7, #32]
 8000a02:	3303      	adds	r3, #3
 8000a04:	88ba      	ldrh	r2, [r7, #4]
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	701a      	strb	r2, [r3, #0]
    tx_buf[4] = reg_count >> 8;
 8000a0a:	887b      	ldrh	r3, [r7, #2]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	3304      	adds	r3, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	701a      	strb	r2, [r3, #0]
    tx_buf[5] = reg_count & 0xFF;
 8000a18:	6a3b      	ldr	r3, [r7, #32]
 8000a1a:	3305      	adds	r3, #5
 8000a1c:	887a      	ldrh	r2, [r7, #2]
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	701a      	strb	r2, [r3, #0]
    uint16_t crc = modbus_crc16(tx_buf, 6);
 8000a22:	2106      	movs	r1, #6
 8000a24:	6a38      	ldr	r0, [r7, #32]
 8000a26:	f7ff ff91 	bl	800094c <modbus_crc16>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	81fb      	strh	r3, [r7, #14]
    tx_buf[6] = crc & 0xFF;
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
 8000a30:	3306      	adds	r3, #6
 8000a32:	89fa      	ldrh	r2, [r7, #14]
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	701a      	strb	r2, [r3, #0]
    tx_buf[7] = crc >> 8;
 8000a38:	89fb      	ldrh	r3, [r7, #14]
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
 8000a40:	3307      	adds	r3, #7
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	701a      	strb	r2, [r3, #0]
    return 8;
 8000a46:	2308      	movs	r3, #8
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd90      	pop	{r4, r7, pc}

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <HAL_MspInit+0x5c>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a14      	ldr	r2, [pc, #80]	@ (8000aac <HAL_MspInit+0x5c>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6193      	str	r3, [r2, #24]
 8000a62:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_MspInit+0x5c>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <HAL_MspInit+0x5c>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a0e      	ldr	r2, [pc, #56]	@ (8000aac <HAL_MspInit+0x5c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <HAL_MspInit+0x5c>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a86:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <HAL_MspInit+0x60>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <HAL_MspInit+0x60>)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010000 	.word	0x40010000

08000ab4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	@ 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a2a      	ldr	r2, [pc, #168]	@ (8000b78 <HAL_ADC_MspInit+0xc4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d14d      	bne.n	8000b70 <HAL_ADC_MspInit+0xbc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ad4:	4b29      	ldr	r3, [pc, #164]	@ (8000b7c <HAL_ADC_MspInit+0xc8>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a28      	ldr	r2, [pc, #160]	@ (8000b7c <HAL_ADC_MspInit+0xc8>)
 8000ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b26      	ldr	r3, [pc, #152]	@ (8000b7c <HAL_ADC_MspInit+0xc8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aec:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <HAL_ADC_MspInit+0xc8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a22      	ldr	r2, [pc, #136]	@ (8000b7c <HAL_ADC_MspInit+0xc8>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b20      	ldr	r3, [pc, #128]	@ (8000b7c <HAL_ADC_MspInit+0xc8>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b1d      	ldr	r3, [pc, #116]	@ (8000b7c <HAL_ADC_MspInit+0xc8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <HAL_ADC_MspInit+0xc8>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <HAL_ADC_MspInit+0xc8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0304 	and.w	r3, r3, #4
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <HAL_ADC_MspInit+0xc8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a16      	ldr	r2, [pc, #88]	@ (8000b7c <HAL_ADC_MspInit+0xc8>)
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <HAL_ADC_MspInit+0xc8>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0308 	and.w	r3, r3, #8
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b34:	230f      	movs	r3, #15
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3c:	f107 0318 	add.w	r3, r7, #24
 8000b40:	4619      	mov	r1, r3
 8000b42:	480f      	ldr	r0, [pc, #60]	@ (8000b80 <HAL_ADC_MspInit+0xcc>)
 8000b44:	f001 f9b0 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000b48:	23d2      	movs	r3, #210	@ 0xd2
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0318 	add.w	r3, r7, #24
 8000b54:	4619      	mov	r1, r3
 8000b56:	480b      	ldr	r0, [pc, #44]	@ (8000b84 <HAL_ADC_MspInit+0xd0>)
 8000b58:	f001 f9a6 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b60:	2303      	movs	r3, #3
 8000b62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 0318 	add.w	r3, r7, #24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4807      	ldr	r0, [pc, #28]	@ (8000b88 <HAL_ADC_MspInit+0xd4>)
 8000b6c:	f001 f99c 	bl	8001ea8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	@ 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40012400 	.word	0x40012400
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40011000 	.word	0x40011000
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40010c00 	.word	0x40010c00

08000b8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0318 	add.w	r3, r7, #24
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a39      	ldr	r2, [pc, #228]	@ (8000c8c <HAL_UART_MspInit+0x100>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d13a      	bne.n	8000c22 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bac:	4b38      	ldr	r3, [pc, #224]	@ (8000c90 <HAL_UART_MspInit+0x104>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a37      	ldr	r2, [pc, #220]	@ (8000c90 <HAL_UART_MspInit+0x104>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b35      	ldr	r3, [pc, #212]	@ (8000c90 <HAL_UART_MspInit+0x104>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	4b32      	ldr	r3, [pc, #200]	@ (8000c90 <HAL_UART_MspInit+0x104>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a31      	ldr	r2, [pc, #196]	@ (8000c90 <HAL_UART_MspInit+0x104>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c90 <HAL_UART_MspInit+0x104>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0318 	add.w	r3, r7, #24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4828      	ldr	r0, [pc, #160]	@ (8000c94 <HAL_UART_MspInit+0x108>)
 8000bf2:	f001 f959 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0318 	add.w	r3, r7, #24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4822      	ldr	r0, [pc, #136]	@ (8000c94 <HAL_UART_MspInit+0x108>)
 8000c0c:	f001 f94c 	bl	8001ea8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	2025      	movs	r0, #37	@ 0x25
 8000c16:	f001 f85e 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c1a:	2025      	movs	r0, #37	@ 0x25
 8000c1c:	f001 f877 	bl	8001d0e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c20:	e030      	b.n	8000c84 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1c      	ldr	r2, [pc, #112]	@ (8000c98 <HAL_UART_MspInit+0x10c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d12b      	bne.n	8000c84 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c2c:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <HAL_UART_MspInit+0x104>)
 8000c2e:	69db      	ldr	r3, [r3, #28]
 8000c30:	4a17      	ldr	r2, [pc, #92]	@ (8000c90 <HAL_UART_MspInit+0x104>)
 8000c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c36:	61d3      	str	r3, [r2, #28]
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_UART_MspInit+0x104>)
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_UART_MspInit+0x104>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a11      	ldr	r2, [pc, #68]	@ (8000c90 <HAL_UART_MspInit+0x104>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <HAL_UART_MspInit+0x104>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2302      	movs	r3, #2
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0318 	add.w	r3, r7, #24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <HAL_UART_MspInit+0x108>)
 8000c70:	f001 f91a 	bl	8001ea8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	2026      	movs	r0, #38	@ 0x26
 8000c7a:	f001 f82c 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c7e:	2026      	movs	r0, #38	@ 0x26
 8000c80:	f001 f845 	bl	8001d0e <HAL_NVIC_EnableIRQ>
}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	@ 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40013800 	.word	0x40013800
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010800 	.word	0x40010800
 8000c98:	40004400 	.word	0x40004400

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f914 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <USART1_IRQHandler+0x10>)
 8000cfa:	f002 f93f 	bl	8002f7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200000b4 	.word	0x200000b4

08000d08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d0c:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <USART2_IRQHandler+0x10>)
 8000d0e:	f002 f935 	bl	8002f7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000fc 	.word	0x200000fc

08000d1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d20:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d24:	f001 fa8c 	bl	8002240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	e00a      	b.n	8000d54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d3e:	f3af 8000 	nop.w
 8000d42:	4601      	mov	r1, r0
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	60ba      	str	r2, [r7, #8]
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbf0      	blt.n	8000d3e <_read+0x12>
  }

  return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d8c:	605a      	str	r2, [r3, #4]
  return 0;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr

08000d9a <_isatty>:

int _isatty(int file)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b085      	sub	sp, #20
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
	...

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	@ (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	@ (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f003 f882 	bl	8003f00 <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20005000 	.word	0x20005000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	20000460 	.word	0x20000460
 8000e30:	200005b8 	.word	0x200005b8

08000e34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e40:	f7ff fff8 	bl	8000e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e44:	480b      	ldr	r0, [pc, #44]	@ (8000e74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e46:	490c      	ldr	r1, [pc, #48]	@ (8000e78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e48:	4a0c      	ldr	r2, [pc, #48]	@ (8000e7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a09      	ldr	r2, [pc, #36]	@ (8000e80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e5c:	4c09      	ldr	r4, [pc, #36]	@ (8000e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f003 f84f 	bl	8003f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e6e:	f7ff faef 	bl	8000450 <main>
  bx lr
 8000e72:	4770      	bx	lr
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e7c:	08004a5c 	.word	0x08004a5c
  ldr r2, =_sbss
 8000e80:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e84:	200005b4 	.word	0x200005b4

08000e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_2_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <HAL_Init+0x28>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	@ (8000eb4 <HAL_Init+0x28>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 ff0f 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fdd2 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40022000 	.word	0x40022000

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 ff27 	bl	8001d2a <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f000 feef 	bl	8001cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	@ (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <HAL_IncTick+0x1c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <HAL_IncTick+0x20>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a03      	ldr	r2, [pc, #12]	@ (8000f38 <HAL_IncTick+0x20>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000464 	.word	0x20000464

08000f3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b02      	ldr	r3, [pc, #8]	@ (8000f4c <HAL_GetTick+0x10>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	20000464 	.word	0x20000464

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff fff0 	bl	8000f3c <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffe0 	bl	8000f3c <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008

08000f98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e0be      	b.n	8001138 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d109      	bne.n	8000fdc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff fd6c 	bl	8000ab4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 fcb3 	bl	8001948 <ADC_ConversionStop_Disable>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f040 8099 	bne.w	8001126 <HAL_ADC_Init+0x18e>
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 8095 	bne.w	8001126 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001000:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001004:	f023 0302 	bic.w	r3, r3, #2
 8001008:	f043 0202 	orr.w	r2, r3, #2
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001018:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7b1b      	ldrb	r3, [r3, #12]
 800101e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001020:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	4313      	orrs	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001030:	d003      	beq.n	800103a <HAL_ADC_Init+0xa2>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d102      	bne.n	8001040 <HAL_ADC_Init+0xa8>
 800103a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800103e:	e000      	b.n	8001042 <HAL_ADC_Init+0xaa>
 8001040:	2300      	movs	r3, #0
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7d1b      	ldrb	r3, [r3, #20]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d119      	bne.n	8001084 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7b1b      	ldrb	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d109      	bne.n	800106c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	3b01      	subs	r3, #1
 800105e:	035a      	lsls	r2, r3, #13
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	e00b      	b.n	8001084 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001070:	f043 0220 	orr.w	r2, r3, #32
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107c:	f043 0201 	orr.w	r2, r3, #1
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	430a      	orrs	r2, r1
 8001096:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <HAL_ADC_Init+0x1a8>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	6812      	ldr	r2, [r2, #0]
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	430b      	orrs	r3, r1
 80010aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010b4:	d003      	beq.n	80010be <HAL_ADC_Init+0x126>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d104      	bne.n	80010c8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	051b      	lsls	r3, r3, #20
 80010c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ce:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	430a      	orrs	r2, r1
 80010da:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_ADC_Init+0x1ac>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d10b      	bne.n	8001104 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f6:	f023 0303 	bic.w	r3, r3, #3
 80010fa:	f043 0201 	orr.w	r2, r3, #1
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001102:	e018      	b.n	8001136 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	f023 0312 	bic.w	r3, r3, #18
 800110c:	f043 0210 	orr.w	r2, r3, #16
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001118:	f043 0201 	orr.w	r2, r3, #1
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001124:	e007      	b.n	8001136 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112a:	f043 0210 	orr.w	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001136:	7dfb      	ldrb	r3, [r7, #23]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	ffe1f7fd 	.word	0xffe1f7fd
 8001144:	ff1f0efe 	.word	0xff1f0efe

08001148 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <HAL_ADC_Start+0x1a>
 800115e:	2302      	movs	r3, #2
 8001160:	e098      	b.n	8001294 <HAL_ADC_Start+0x14c>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 fb92 	bl	8001894 <ADC_Enable>
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f040 8087 	bne.w	800128a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001184:	f023 0301 	bic.w	r3, r3, #1
 8001188:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a41      	ldr	r2, [pc, #260]	@ (800129c <HAL_ADC_Start+0x154>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d105      	bne.n	80011a6 <HAL_ADC_Start+0x5e>
 800119a:	4b41      	ldr	r3, [pc, #260]	@ (80012a0 <HAL_ADC_Start+0x158>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d115      	bne.n	80011d2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d026      	beq.n	800120e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011d0:	e01d      	b.n	800120e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a2f      	ldr	r2, [pc, #188]	@ (80012a0 <HAL_ADC_Start+0x158>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d004      	beq.n	80011f2 <HAL_ADC_Start+0xaa>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a2b      	ldr	r2, [pc, #172]	@ (800129c <HAL_ADC_Start+0x154>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10d      	bne.n	800120e <HAL_ADC_Start+0xc6>
 80011f2:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <HAL_ADC_Start+0x158>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001202:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001206:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001212:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121e:	f023 0206 	bic.w	r2, r3, #6
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001226:	e002      	b.n	800122e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f06f 0202 	mvn.w	r2, #2
 800123e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800124a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800124e:	d113      	bne.n	8001278 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001254:	4a11      	ldr	r2, [pc, #68]	@ (800129c <HAL_ADC_Start+0x154>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d105      	bne.n	8001266 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <HAL_ADC_Start+0x158>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001262:	2b00      	cmp	r3, #0
 8001264:	d108      	bne.n	8001278 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	e00c      	b.n	8001292 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	e003      	b.n	8001292 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40012800 	.word	0x40012800
 80012a0:	40012400 	.word	0x40012400

080012a4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_ADC_Stop+0x1a>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e01a      	b.n	80012f4 <HAL_ADC_Stop+0x50>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 fb3e 	bl	8001948 <ADC_ConversionStop_Disable>
 80012cc:	4603      	mov	r3, r0
 80012ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012de:	f023 0301 	bic.w	r3, r3, #1
 80012e2:	f043 0201 	orr.w	r2, r3, #1
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001312:	f7ff fe13 	bl	8000f3c <HAL_GetTick>
 8001316:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132a:	f043 0220 	orr.w	r2, r3, #32
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0d3      	b.n	80014e6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d131      	bne.n	80013b0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001352:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001356:	2b00      	cmp	r3, #0
 8001358:	d12a      	bne.n	80013b0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800135a:	e021      	b.n	80013a0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001362:	d01d      	beq.n	80013a0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <HAL_ADC_PollForConversion+0x7e>
 800136a:	f7ff fde7 	bl	8000f3c <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d212      	bcs.n	80013a0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10b      	bne.n	80013a0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138c:	f043 0204 	orr.w	r2, r3, #4
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e0a2      	b.n	80014e6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0d6      	beq.n	800135c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013ae:	e070      	b.n	8001492 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80013b0:	4b4f      	ldr	r3, [pc, #316]	@ (80014f0 <HAL_ADC_PollForConversion+0x1f4>)
 80013b2:	681c      	ldr	r4, [r3, #0]
 80013b4:	2002      	movs	r0, #2
 80013b6:	f001 fc2b 	bl	8002c10 <HAL_RCCEx_GetPeriphCLKFreq>
 80013ba:	4603      	mov	r3, r0
 80013bc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6919      	ldr	r1, [r3, #16]
 80013c6:	4b4b      	ldr	r3, [pc, #300]	@ (80014f4 <HAL_ADC_PollForConversion+0x1f8>)
 80013c8:	400b      	ands	r3, r1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d118      	bne.n	8001400 <HAL_ADC_PollForConversion+0x104>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68d9      	ldr	r1, [r3, #12]
 80013d4:	4b48      	ldr	r3, [pc, #288]	@ (80014f8 <HAL_ADC_PollForConversion+0x1fc>)
 80013d6:	400b      	ands	r3, r1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d111      	bne.n	8001400 <HAL_ADC_PollForConversion+0x104>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6919      	ldr	r1, [r3, #16]
 80013e2:	4b46      	ldr	r3, [pc, #280]	@ (80014fc <HAL_ADC_PollForConversion+0x200>)
 80013e4:	400b      	ands	r3, r1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d108      	bne.n	80013fc <HAL_ADC_PollForConversion+0x100>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	4b43      	ldr	r3, [pc, #268]	@ (8001500 <HAL_ADC_PollForConversion+0x204>)
 80013f2:	400b      	ands	r3, r1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_ADC_PollForConversion+0x100>
 80013f8:	2314      	movs	r3, #20
 80013fa:	e020      	b.n	800143e <HAL_ADC_PollForConversion+0x142>
 80013fc:	2329      	movs	r3, #41	@ 0x29
 80013fe:	e01e      	b.n	800143e <HAL_ADC_PollForConversion+0x142>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6919      	ldr	r1, [r3, #16]
 8001406:	4b3d      	ldr	r3, [pc, #244]	@ (80014fc <HAL_ADC_PollForConversion+0x200>)
 8001408:	400b      	ands	r3, r1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_ADC_PollForConversion+0x120>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68d9      	ldr	r1, [r3, #12]
 8001414:	4b3a      	ldr	r3, [pc, #232]	@ (8001500 <HAL_ADC_PollForConversion+0x204>)
 8001416:	400b      	ands	r3, r1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00d      	beq.n	8001438 <HAL_ADC_PollForConversion+0x13c>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6919      	ldr	r1, [r3, #16]
 8001422:	4b38      	ldr	r3, [pc, #224]	@ (8001504 <HAL_ADC_PollForConversion+0x208>)
 8001424:	400b      	ands	r3, r1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d108      	bne.n	800143c <HAL_ADC_PollForConversion+0x140>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68d9      	ldr	r1, [r3, #12]
 8001430:	4b34      	ldr	r3, [pc, #208]	@ (8001504 <HAL_ADC_PollForConversion+0x208>)
 8001432:	400b      	ands	r3, r1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_ADC_PollForConversion+0x140>
 8001438:	2354      	movs	r3, #84	@ 0x54
 800143a:	e000      	b.n	800143e <HAL_ADC_PollForConversion+0x142>
 800143c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001444:	e021      	b.n	800148a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d01a      	beq.n	8001484 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <HAL_ADC_PollForConversion+0x168>
 8001454:	f7ff fd72 	bl	8000f3c <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d20f      	bcs.n	8001484 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d90b      	bls.n	8001484 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001470:	f043 0204 	orr.w	r2, r3, #4
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e030      	b.n	80014e6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3301      	adds	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	429a      	cmp	r2, r3
 8001490:	d8d9      	bhi.n	8001446 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f06f 0212 	mvn.w	r2, #18
 800149a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80014b2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80014b6:	d115      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d111      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d105      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd90      	pop	{r4, r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000000 	.word	0x20000000
 80014f4:	24924924 	.word	0x24924924
 80014f8:	00924924 	.word	0x00924924
 80014fc:	12492492 	.word	0x12492492
 8001500:	00492492 	.word	0x00492492
 8001504:	00249249 	.word	0x00249249

08001508 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_ADC_Start_IT+0x1a>
 800151e:	2302      	movs	r3, #2
 8001520:	e0a0      	b.n	8001664 <HAL_ADC_Start_IT+0x15c>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f9b2 	bl	8001894 <ADC_Enable>
 8001530:	4603      	mov	r3, r0
 8001532:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	2b00      	cmp	r3, #0
 8001538:	f040 808f 	bne.w	800165a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001540:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a45      	ldr	r2, [pc, #276]	@ (800166c <HAL_ADC_Start_IT+0x164>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d105      	bne.n	8001566 <HAL_ADC_Start_IT+0x5e>
 800155a:	4b45      	ldr	r3, [pc, #276]	@ (8001670 <HAL_ADC_Start_IT+0x168>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d115      	bne.n	8001592 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800157c:	2b00      	cmp	r3, #0
 800157e:	d026      	beq.n	80015ce <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001584:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001588:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001590:	e01d      	b.n	80015ce <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001596:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a33      	ldr	r2, [pc, #204]	@ (8001670 <HAL_ADC_Start_IT+0x168>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d004      	beq.n	80015b2 <HAL_ADC_Start_IT+0xaa>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2f      	ldr	r2, [pc, #188]	@ (800166c <HAL_ADC_Start_IT+0x164>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d10d      	bne.n	80015ce <HAL_ADC_Start_IT+0xc6>
 80015b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001670 <HAL_ADC_Start_IT+0x168>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d007      	beq.n	80015ce <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015de:	f023 0206 	bic.w	r2, r3, #6
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015e6:	e002      	b.n	80015ee <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f06f 0202 	mvn.w	r2, #2
 80015fe:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0220 	orr.w	r2, r2, #32
 800160e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800161a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800161e:	d113      	bne.n	8001648 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001624:	4a11      	ldr	r2, [pc, #68]	@ (800166c <HAL_ADC_Start_IT+0x164>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d105      	bne.n	8001636 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <HAL_ADC_Start_IT+0x168>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001632:	2b00      	cmp	r3, #0
 8001634:	d108      	bne.n	8001648 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	e00c      	b.n	8001662 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	e003      	b.n	8001662 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40012800 	.word	0x40012800
 8001670:	40012400 	.word	0x40012400

08001674 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x20>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e0dc      	b.n	8001866 <HAL_ADC_ConfigChannel+0x1da>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b06      	cmp	r3, #6
 80016ba:	d81c      	bhi.n	80016f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	3b05      	subs	r3, #5
 80016ce:	221f      	movs	r2, #31
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4019      	ands	r1, r3
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	3b05      	subs	r3, #5
 80016e8:	fa00 f203 	lsl.w	r2, r0, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80016f4:	e03c      	b.n	8001770 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d81c      	bhi.n	8001738 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	3b23      	subs	r3, #35	@ 0x23
 8001710:	221f      	movs	r2, #31
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	4019      	ands	r1, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	3b23      	subs	r3, #35	@ 0x23
 800172a:	fa00 f203 	lsl.w	r2, r0, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	631a      	str	r2, [r3, #48]	@ 0x30
 8001736:	e01b      	b.n	8001770 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b41      	subs	r3, #65	@ 0x41
 800174a:	221f      	movs	r2, #31
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	4019      	ands	r1, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b41      	subs	r3, #65	@ 0x41
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b09      	cmp	r3, #9
 8001776:	d91c      	bls.n	80017b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68d9      	ldr	r1, [r3, #12]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	3b1e      	subs	r3, #30
 800178a:	2207      	movs	r2, #7
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	4019      	ands	r1, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	6898      	ldr	r0, [r3, #8]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	3b1e      	subs	r3, #30
 80017a4:	fa00 f203 	lsl.w	r2, r0, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	e019      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6919      	ldr	r1, [r3, #16]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	2207      	movs	r2, #7
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4019      	ands	r1, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	6898      	ldr	r0, [r3, #8]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	fa00 f203 	lsl.w	r2, r0, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d003      	beq.n	80017f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017f2:	2b11      	cmp	r3, #17
 80017f4:	d132      	bne.n	800185c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001870 <HAL_ADC_ConfigChannel+0x1e4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d125      	bne.n	800184c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d126      	bne.n	800185c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800181c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b10      	cmp	r3, #16
 8001824:	d11a      	bne.n	800185c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001826:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <HAL_ADC_ConfigChannel+0x1e8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a13      	ldr	r2, [pc, #76]	@ (8001878 <HAL_ADC_ConfigChannel+0x1ec>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9a      	lsrs	r2, r3, #18
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800183c:	e002      	b.n	8001844 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3b01      	subs	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f9      	bne.n	800183e <HAL_ADC_ConfigChannel+0x1b2>
 800184a:	e007      	b.n	800185c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001850:	f043 0220 	orr.w	r2, r3, #32
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001864:	7bfb      	ldrb	r3, [r7, #15]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	40012400 	.word	0x40012400
 8001874:	20000000 	.word	0x20000000
 8001878:	431bde83 	.word	0x431bde83

0800187c <HAL_ADC_GetState>:
  * @brief  return the ADC state
  * @param  hadc: ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
	...

08001894 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d040      	beq.n	8001934 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001940 <ADC_Enable+0xac>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001944 <ADC_Enable+0xb0>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	0c9b      	lsrs	r3, r3, #18
 80018ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018d0:	e002      	b.n	80018d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f9      	bne.n	80018d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018de:	f7ff fb2d 	bl	8000f3c <HAL_GetTick>
 80018e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018e4:	e01f      	b.n	8001926 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018e6:	f7ff fb29 	bl	8000f3c <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d918      	bls.n	8001926 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d011      	beq.n	8001926 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001906:	f043 0210 	orr.w	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e007      	b.n	8001936 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d1d8      	bne.n	80018e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000000 	.word	0x20000000
 8001944:	431bde83 	.word	0x431bde83

08001948 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b01      	cmp	r3, #1
 8001960:	d12e      	bne.n	80019c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0201 	bic.w	r2, r2, #1
 8001970:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001972:	f7ff fae3 	bl	8000f3c <HAL_GetTick>
 8001976:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001978:	e01b      	b.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800197a:	f7ff fadf 	bl	8000f3c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d914      	bls.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10d      	bne.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199a:	f043 0210 	orr.w	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a6:	f043 0201 	orr.w	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e007      	b.n	80019c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d0dc      	beq.n	800197a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADCEx_Calibration_Start+0x1e>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e097      	b.n	8001b1a <HAL_ADCEx_Calibration_Start+0x14e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffa8 	bl	8001948 <ADC_ConversionStop_Disable>
 80019f8:	4603      	mov	r3, r0
 80019fa:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff49 	bl	8001894 <ADC_Enable>
 8001a02:	4603      	mov	r3, r0
 8001a04:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f040 8081 	bne.w	8001b10 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a12:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a16:	f023 0302 	bic.w	r3, r3, #2
 8001a1a:	f043 0202 	orr.w	r2, r3, #2
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a22:	4b40      	ldr	r3, [pc, #256]	@ (8001b24 <HAL_ADCEx_Calibration_Start+0x158>)
 8001a24:	681c      	ldr	r4, [r3, #0]
 8001a26:	2002      	movs	r0, #2
 8001a28:	f001 f8f2 	bl	8002c10 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001a32:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001a34:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001a36:	e002      	b.n	8001a3e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f9      	bne.n	8001a38 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0208 	orr.w	r2, r2, #8
 8001a52:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001a54:	f7ff fa72 	bl	8000f3c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a5a:	e01b      	b.n	8001a94 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a5c:	f7ff fa6e 	bl	8000f3c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b0a      	cmp	r3, #10
 8001a68:	d914      	bls.n	8001a94 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00d      	beq.n	8001a94 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7c:	f023 0312 	bic.w	r3, r3, #18
 8001a80:	f043 0210 	orr.w	r2, r3, #16
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e042      	b.n	8001b1a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1dc      	bne.n	8001a5c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0204 	orr.w	r2, r2, #4
 8001ab0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001ab2:	f7ff fa43 	bl	8000f3c <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ab8:	e01b      	b.n	8001af2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001aba:	f7ff fa3f 	bl	8000f3c <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b0a      	cmp	r3, #10
 8001ac6:	d914      	bls.n	8001af2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00d      	beq.n	8001af2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ada:	f023 0312 	bic.w	r3, r3, #18
 8001ade:	f043 0210 	orr.w	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e013      	b.n	8001b1a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1dc      	bne.n	8001aba <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b04:	f023 0303 	bic.w	r3, r3, #3
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd90      	pop	{r4, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000000 	.word	0x20000000

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4906      	ldr	r1, [pc, #24]	@ (8001bc0 <__NVIC_EnableIRQ+0x34>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	@ (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	@ (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	@ 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	@ 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c8c:	d301      	bcc.n	8001c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00f      	b.n	8001cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c92:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <SysTick_Config+0x40>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f7ff ff90 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <SysTick_Config+0x40>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001caa:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <SysTick_Config+0x40>)
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff2d 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce8:	f7ff ff42 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7ff ff90 	bl	8001c18 <NVIC_EncodePriority>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff5f 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff35 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffa2 	bl	8001c7c <SysTick_Config>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d008      	beq.n	8001d6c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e020      	b.n	8001dae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 020e 	bic.w	r2, r2, #14
 8001d7a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0201 	bic.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d94:	2101      	movs	r1, #1
 8001d96:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d005      	beq.n	8001ddc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e051      	b.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 020e 	bic.w	r2, r2, #14
 8001dea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a22      	ldr	r2, [pc, #136]	@ (8001e8c <HAL_DMA_Abort_IT+0xd4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d029      	beq.n	8001e5a <HAL_DMA_Abort_IT+0xa2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a21      	ldr	r2, [pc, #132]	@ (8001e90 <HAL_DMA_Abort_IT+0xd8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d022      	beq.n	8001e56 <HAL_DMA_Abort_IT+0x9e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1f      	ldr	r2, [pc, #124]	@ (8001e94 <HAL_DMA_Abort_IT+0xdc>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d01a      	beq.n	8001e50 <HAL_DMA_Abort_IT+0x98>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001e98 <HAL_DMA_Abort_IT+0xe0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d012      	beq.n	8001e4a <HAL_DMA_Abort_IT+0x92>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1c      	ldr	r2, [pc, #112]	@ (8001e9c <HAL_DMA_Abort_IT+0xe4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00a      	beq.n	8001e44 <HAL_DMA_Abort_IT+0x8c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea0 <HAL_DMA_Abort_IT+0xe8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d102      	bne.n	8001e3e <HAL_DMA_Abort_IT+0x86>
 8001e38:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e3c:	e00e      	b.n	8001e5c <HAL_DMA_Abort_IT+0xa4>
 8001e3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e42:	e00b      	b.n	8001e5c <HAL_DMA_Abort_IT+0xa4>
 8001e44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e48:	e008      	b.n	8001e5c <HAL_DMA_Abort_IT+0xa4>
 8001e4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e4e:	e005      	b.n	8001e5c <HAL_DMA_Abort_IT+0xa4>
 8001e50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e54:	e002      	b.n	8001e5c <HAL_DMA_Abort_IT+0xa4>
 8001e56:	2310      	movs	r3, #16
 8001e58:	e000      	b.n	8001e5c <HAL_DMA_Abort_IT+0xa4>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	4a11      	ldr	r2, [pc, #68]	@ (8001ea4 <HAL_DMA_Abort_IT+0xec>)
 8001e5e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	4798      	blx	r3
    } 
  }
  return status;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40020008 	.word	0x40020008
 8001e90:	4002001c 	.word	0x4002001c
 8001e94:	40020030 	.word	0x40020030
 8001e98:	40020044 	.word	0x40020044
 8001e9c:	40020058 	.word	0x40020058
 8001ea0:	4002006c 	.word	0x4002006c
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b08b      	sub	sp, #44	@ 0x2c
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eba:	e169      	b.n	8002190 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 8158 	bne.w	800218a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4a9a      	ldr	r2, [pc, #616]	@ (8002148 <HAL_GPIO_Init+0x2a0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d05e      	beq.n	8001fa2 <HAL_GPIO_Init+0xfa>
 8001ee4:	4a98      	ldr	r2, [pc, #608]	@ (8002148 <HAL_GPIO_Init+0x2a0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d875      	bhi.n	8001fd6 <HAL_GPIO_Init+0x12e>
 8001eea:	4a98      	ldr	r2, [pc, #608]	@ (800214c <HAL_GPIO_Init+0x2a4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d058      	beq.n	8001fa2 <HAL_GPIO_Init+0xfa>
 8001ef0:	4a96      	ldr	r2, [pc, #600]	@ (800214c <HAL_GPIO_Init+0x2a4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d86f      	bhi.n	8001fd6 <HAL_GPIO_Init+0x12e>
 8001ef6:	4a96      	ldr	r2, [pc, #600]	@ (8002150 <HAL_GPIO_Init+0x2a8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d052      	beq.n	8001fa2 <HAL_GPIO_Init+0xfa>
 8001efc:	4a94      	ldr	r2, [pc, #592]	@ (8002150 <HAL_GPIO_Init+0x2a8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d869      	bhi.n	8001fd6 <HAL_GPIO_Init+0x12e>
 8001f02:	4a94      	ldr	r2, [pc, #592]	@ (8002154 <HAL_GPIO_Init+0x2ac>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d04c      	beq.n	8001fa2 <HAL_GPIO_Init+0xfa>
 8001f08:	4a92      	ldr	r2, [pc, #584]	@ (8002154 <HAL_GPIO_Init+0x2ac>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d863      	bhi.n	8001fd6 <HAL_GPIO_Init+0x12e>
 8001f0e:	4a92      	ldr	r2, [pc, #584]	@ (8002158 <HAL_GPIO_Init+0x2b0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d046      	beq.n	8001fa2 <HAL_GPIO_Init+0xfa>
 8001f14:	4a90      	ldr	r2, [pc, #576]	@ (8002158 <HAL_GPIO_Init+0x2b0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d85d      	bhi.n	8001fd6 <HAL_GPIO_Init+0x12e>
 8001f1a:	2b12      	cmp	r3, #18
 8001f1c:	d82a      	bhi.n	8001f74 <HAL_GPIO_Init+0xcc>
 8001f1e:	2b12      	cmp	r3, #18
 8001f20:	d859      	bhi.n	8001fd6 <HAL_GPIO_Init+0x12e>
 8001f22:	a201      	add	r2, pc, #4	@ (adr r2, 8001f28 <HAL_GPIO_Init+0x80>)
 8001f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f28:	08001fa3 	.word	0x08001fa3
 8001f2c:	08001f7d 	.word	0x08001f7d
 8001f30:	08001f8f 	.word	0x08001f8f
 8001f34:	08001fd1 	.word	0x08001fd1
 8001f38:	08001fd7 	.word	0x08001fd7
 8001f3c:	08001fd7 	.word	0x08001fd7
 8001f40:	08001fd7 	.word	0x08001fd7
 8001f44:	08001fd7 	.word	0x08001fd7
 8001f48:	08001fd7 	.word	0x08001fd7
 8001f4c:	08001fd7 	.word	0x08001fd7
 8001f50:	08001fd7 	.word	0x08001fd7
 8001f54:	08001fd7 	.word	0x08001fd7
 8001f58:	08001fd7 	.word	0x08001fd7
 8001f5c:	08001fd7 	.word	0x08001fd7
 8001f60:	08001fd7 	.word	0x08001fd7
 8001f64:	08001fd7 	.word	0x08001fd7
 8001f68:	08001fd7 	.word	0x08001fd7
 8001f6c:	08001f85 	.word	0x08001f85
 8001f70:	08001f99 	.word	0x08001f99
 8001f74:	4a79      	ldr	r2, [pc, #484]	@ (800215c <HAL_GPIO_Init+0x2b4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f7a:	e02c      	b.n	8001fd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e029      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	623b      	str	r3, [r7, #32]
          break;
 8001f8c:	e024      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	3308      	adds	r3, #8
 8001f94:	623b      	str	r3, [r7, #32]
          break;
 8001f96:	e01f      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	330c      	adds	r3, #12
 8001f9e:	623b      	str	r3, [r7, #32]
          break;
 8001fa0:	e01a      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001faa:	2304      	movs	r3, #4
 8001fac:	623b      	str	r3, [r7, #32]
          break;
 8001fae:	e013      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d105      	bne.n	8001fc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	611a      	str	r2, [r3, #16]
          break;
 8001fc2:	e009      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc4:	2308      	movs	r3, #8
 8001fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	615a      	str	r2, [r3, #20]
          break;
 8001fce:	e003      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	623b      	str	r3, [r7, #32]
          break;
 8001fd4:	e000      	b.n	8001fd8 <HAL_GPIO_Init+0x130>
          break;
 8001fd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2bff      	cmp	r3, #255	@ 0xff
 8001fdc:	d801      	bhi.n	8001fe2 <HAL_GPIO_Init+0x13a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	e001      	b.n	8001fe6 <HAL_GPIO_Init+0x13e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2bff      	cmp	r3, #255	@ 0xff
 8001fec:	d802      	bhi.n	8001ff4 <HAL_GPIO_Init+0x14c>
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	e002      	b.n	8001ffa <HAL_GPIO_Init+0x152>
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	3b08      	subs	r3, #8
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	210f      	movs	r1, #15
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	401a      	ands	r2, r3
 800200c:	6a39      	ldr	r1, [r7, #32]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	431a      	orrs	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80b1 	beq.w	800218a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002028:	4b4d      	ldr	r3, [pc, #308]	@ (8002160 <HAL_GPIO_Init+0x2b8>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a4c      	ldr	r2, [pc, #304]	@ (8002160 <HAL_GPIO_Init+0x2b8>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b4a      	ldr	r3, [pc, #296]	@ (8002160 <HAL_GPIO_Init+0x2b8>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002040:	4a48      	ldr	r2, [pc, #288]	@ (8002164 <HAL_GPIO_Init+0x2bc>)
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	220f      	movs	r2, #15
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a40      	ldr	r2, [pc, #256]	@ (8002168 <HAL_GPIO_Init+0x2c0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d013      	beq.n	8002094 <HAL_GPIO_Init+0x1ec>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a3f      	ldr	r2, [pc, #252]	@ (800216c <HAL_GPIO_Init+0x2c4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d00d      	beq.n	8002090 <HAL_GPIO_Init+0x1e8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a3e      	ldr	r2, [pc, #248]	@ (8002170 <HAL_GPIO_Init+0x2c8>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d007      	beq.n	800208c <HAL_GPIO_Init+0x1e4>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a3d      	ldr	r2, [pc, #244]	@ (8002174 <HAL_GPIO_Init+0x2cc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d101      	bne.n	8002088 <HAL_GPIO_Init+0x1e0>
 8002084:	2303      	movs	r3, #3
 8002086:	e006      	b.n	8002096 <HAL_GPIO_Init+0x1ee>
 8002088:	2304      	movs	r3, #4
 800208a:	e004      	b.n	8002096 <HAL_GPIO_Init+0x1ee>
 800208c:	2302      	movs	r3, #2
 800208e:	e002      	b.n	8002096 <HAL_GPIO_Init+0x1ee>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <HAL_GPIO_Init+0x1ee>
 8002094:	2300      	movs	r3, #0
 8002096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002098:	f002 0203 	and.w	r2, r2, #3
 800209c:	0092      	lsls	r2, r2, #2
 800209e:	4093      	lsls	r3, r2
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020a6:	492f      	ldr	r1, [pc, #188]	@ (8002164 <HAL_GPIO_Init+0x2bc>)
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d006      	beq.n	80020ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002178 <HAL_GPIO_Init+0x2d0>)
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	492c      	ldr	r1, [pc, #176]	@ (8002178 <HAL_GPIO_Init+0x2d0>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002178 <HAL_GPIO_Init+0x2d0>)
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	4928      	ldr	r1, [pc, #160]	@ (8002178 <HAL_GPIO_Init+0x2d0>)
 80020d8:	4013      	ands	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d006      	beq.n	80020f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020e8:	4b23      	ldr	r3, [pc, #140]	@ (8002178 <HAL_GPIO_Init+0x2d0>)
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4922      	ldr	r1, [pc, #136]	@ (8002178 <HAL_GPIO_Init+0x2d0>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60cb      	str	r3, [r1, #12]
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020f6:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <HAL_GPIO_Init+0x2d0>)
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	491e      	ldr	r1, [pc, #120]	@ (8002178 <HAL_GPIO_Init+0x2d0>)
 8002100:	4013      	ands	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002110:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <HAL_GPIO_Init+0x2d0>)
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	4918      	ldr	r1, [pc, #96]	@ (8002178 <HAL_GPIO_Init+0x2d0>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
 800211c:	e006      	b.n	800212c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800211e:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <HAL_GPIO_Init+0x2d0>)
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	43db      	mvns	r3, r3
 8002126:	4914      	ldr	r1, [pc, #80]	@ (8002178 <HAL_GPIO_Init+0x2d0>)
 8002128:	4013      	ands	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d021      	beq.n	800217c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002138:	4b0f      	ldr	r3, [pc, #60]	@ (8002178 <HAL_GPIO_Init+0x2d0>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	490e      	ldr	r1, [pc, #56]	@ (8002178 <HAL_GPIO_Init+0x2d0>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
 8002144:	e021      	b.n	800218a <HAL_GPIO_Init+0x2e2>
 8002146:	bf00      	nop
 8002148:	10320000 	.word	0x10320000
 800214c:	10310000 	.word	0x10310000
 8002150:	10220000 	.word	0x10220000
 8002154:	10210000 	.word	0x10210000
 8002158:	10120000 	.word	0x10120000
 800215c:	10110000 	.word	0x10110000
 8002160:	40021000 	.word	0x40021000
 8002164:	40010000 	.word	0x40010000
 8002168:	40010800 	.word	0x40010800
 800216c:	40010c00 	.word	0x40010c00
 8002170:	40011000 	.word	0x40011000
 8002174:	40011400 	.word	0x40011400
 8002178:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800217c:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <HAL_GPIO_Init+0x304>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	43db      	mvns	r3, r3
 8002184:	4909      	ldr	r1, [pc, #36]	@ (80021ac <HAL_GPIO_Init+0x304>)
 8002186:	4013      	ands	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	3301      	adds	r3, #1
 800218e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	fa22 f303 	lsr.w	r3, r2, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	f47f ae8e 	bne.w	8001ebc <HAL_GPIO_Init+0x14>
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	372c      	adds	r7, #44	@ 0x2c
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	40010400 	.word	0x40010400

080021b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e001      	b.n	80021d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	807b      	strh	r3, [r7, #2]
 80021ea:	4613      	mov	r3, r2
 80021ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ee:	787b      	ldrb	r3, [r7, #1]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f4:	887a      	ldrh	r2, [r7, #2]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021fa:	e003      	b.n	8002204 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021fc:	887b      	ldrh	r3, [r7, #2]
 80021fe:	041a      	lsls	r2, r3, #16
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	611a      	str	r2, [r3, #16]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002220:	887a      	ldrh	r2, [r7, #2]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4013      	ands	r3, r2
 8002226:	041a      	lsls	r2, r3, #16
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	43d9      	mvns	r1, r3
 800222c:	887b      	ldrh	r3, [r7, #2]
 800222e:	400b      	ands	r3, r1
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	611a      	str	r2, [r3, #16]
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800224a:	4b08      	ldr	r3, [pc, #32]	@ (800226c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002256:	4a05      	ldr	r2, [pc, #20]	@ (800226c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	4618      	mov	r0, r3
 8002260:	f000 f806 	bl	8002270 <HAL_GPIO_EXTI_Callback>
  }
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40010400 	.word	0x40010400

08002270 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e272      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8087 	beq.w	80023b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a4:	4b92      	ldr	r3, [pc, #584]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d00c      	beq.n	80022ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b0:	4b8f      	ldr	r3, [pc, #572]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d112      	bne.n	80022e2 <HAL_RCC_OscConfig+0x5e>
 80022bc:	4b8c      	ldr	r3, [pc, #560]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c8:	d10b      	bne.n	80022e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ca:	4b89      	ldr	r3, [pc, #548]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d06c      	beq.n	80023b0 <HAL_RCC_OscConfig+0x12c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d168      	bne.n	80023b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e24c      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x76>
 80022ec:	4b80      	ldr	r3, [pc, #512]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a7f      	ldr	r2, [pc, #508]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	e02e      	b.n	8002358 <HAL_RCC_OscConfig+0xd4>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x98>
 8002302:	4b7b      	ldr	r3, [pc, #492]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a7a      	ldr	r2, [pc, #488]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	4b78      	ldr	r3, [pc, #480]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a77      	ldr	r2, [pc, #476]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002314:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	e01d      	b.n	8002358 <HAL_RCC_OscConfig+0xd4>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002324:	d10c      	bne.n	8002340 <HAL_RCC_OscConfig+0xbc>
 8002326:	4b72      	ldr	r3, [pc, #456]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a71      	ldr	r2, [pc, #452]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800232c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b6f      	ldr	r3, [pc, #444]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a6e      	ldr	r2, [pc, #440]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e00b      	b.n	8002358 <HAL_RCC_OscConfig+0xd4>
 8002340:	4b6b      	ldr	r3, [pc, #428]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6a      	ldr	r2, [pc, #424]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b68      	ldr	r3, [pc, #416]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a67      	ldr	r2, [pc, #412]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002356:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7fe fdec 	bl	8000f3c <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002368:	f7fe fde8 	bl	8000f3c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	@ 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e200      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	4b5d      	ldr	r3, [pc, #372]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0xe4>
 8002386:	e014      	b.n	80023b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7fe fdd8 	bl	8000f3c <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002390:	f7fe fdd4 	bl	8000f3c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	@ 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e1ec      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	4b53      	ldr	r3, [pc, #332]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x10c>
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d063      	beq.n	8002486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023be:	4b4c      	ldr	r3, [pc, #304]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023ca:	4b49      	ldr	r3, [pc, #292]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d11c      	bne.n	8002410 <HAL_RCC_OscConfig+0x18c>
 80023d6:	4b46      	ldr	r3, [pc, #280]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d116      	bne.n	8002410 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e2:	4b43      	ldr	r3, [pc, #268]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_RCC_OscConfig+0x176>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d001      	beq.n	80023fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e1c0      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fa:	4b3d      	ldr	r3, [pc, #244]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4939      	ldr	r1, [pc, #228]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240e:	e03a      	b.n	8002486 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d020      	beq.n	800245a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002418:	4b36      	ldr	r3, [pc, #216]	@ (80024f4 <HAL_RCC_OscConfig+0x270>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241e:	f7fe fd8d 	bl	8000f3c <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002426:	f7fe fd89 	bl	8000f3c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e1a1      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002438:	4b2d      	ldr	r3, [pc, #180]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002444:	4b2a      	ldr	r3, [pc, #168]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4927      	ldr	r1, [pc, #156]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 8002454:	4313      	orrs	r3, r2
 8002456:	600b      	str	r3, [r1, #0]
 8002458:	e015      	b.n	8002486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245a:	4b26      	ldr	r3, [pc, #152]	@ (80024f4 <HAL_RCC_OscConfig+0x270>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7fe fd6c 	bl	8000f3c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002468:	f7fe fd68 	bl	8000f3c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e180      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247a:	4b1d      	ldr	r3, [pc, #116]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d03a      	beq.n	8002508 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d019      	beq.n	80024ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249a:	4b17      	ldr	r3, [pc, #92]	@ (80024f8 <HAL_RCC_OscConfig+0x274>)
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a0:	f7fe fd4c 	bl	8000f3c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a8:	f7fe fd48 	bl	8000f3c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e160      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ba:	4b0d      	ldr	r3, [pc, #52]	@ (80024f0 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024c6:	2001      	movs	r0, #1
 80024c8:	f000 face 	bl	8002a68 <RCC_Delay>
 80024cc:	e01c      	b.n	8002508 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ce:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <HAL_RCC_OscConfig+0x274>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d4:	f7fe fd32 	bl	8000f3c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024da:	e00f      	b.n	80024fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024dc:	f7fe fd2e 	bl	8000f3c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d908      	bls.n	80024fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e146      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	42420000 	.word	0x42420000
 80024f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024fc:	4b92      	ldr	r3, [pc, #584]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e9      	bne.n	80024dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80a6 	beq.w	8002662 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002516:	2300      	movs	r3, #0
 8002518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251a:	4b8b      	ldr	r3, [pc, #556]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10d      	bne.n	8002542 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	4b88      	ldr	r3, [pc, #544]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a87      	ldr	r2, [pc, #540]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002530:	61d3      	str	r3, [r2, #28]
 8002532:	4b85      	ldr	r3, [pc, #532]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253e:	2301      	movs	r3, #1
 8002540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002542:	4b82      	ldr	r3, [pc, #520]	@ (800274c <HAL_RCC_OscConfig+0x4c8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d118      	bne.n	8002580 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254e:	4b7f      	ldr	r3, [pc, #508]	@ (800274c <HAL_RCC_OscConfig+0x4c8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a7e      	ldr	r2, [pc, #504]	@ (800274c <HAL_RCC_OscConfig+0x4c8>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255a:	f7fe fcef 	bl	8000f3c <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002562:	f7fe fceb 	bl	8000f3c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b64      	cmp	r3, #100	@ 0x64
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e103      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	4b75      	ldr	r3, [pc, #468]	@ (800274c <HAL_RCC_OscConfig+0x4c8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d106      	bne.n	8002596 <HAL_RCC_OscConfig+0x312>
 8002588:	4b6f      	ldr	r3, [pc, #444]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4a6e      	ldr	r2, [pc, #440]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6213      	str	r3, [r2, #32]
 8002594:	e02d      	b.n	80025f2 <HAL_RCC_OscConfig+0x36e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x334>
 800259e:	4b6a      	ldr	r3, [pc, #424]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a69      	ldr	r2, [pc, #420]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6213      	str	r3, [r2, #32]
 80025aa:	4b67      	ldr	r3, [pc, #412]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	4a66      	ldr	r2, [pc, #408]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	6213      	str	r3, [r2, #32]
 80025b6:	e01c      	b.n	80025f2 <HAL_RCC_OscConfig+0x36e>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d10c      	bne.n	80025da <HAL_RCC_OscConfig+0x356>
 80025c0:	4b61      	ldr	r3, [pc, #388]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	4a60      	ldr	r2, [pc, #384]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	6213      	str	r3, [r2, #32]
 80025cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4a5d      	ldr	r2, [pc, #372]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6213      	str	r3, [r2, #32]
 80025d8:	e00b      	b.n	80025f2 <HAL_RCC_OscConfig+0x36e>
 80025da:	4b5b      	ldr	r3, [pc, #364]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	4a5a      	ldr	r2, [pc, #360]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	6213      	str	r3, [r2, #32]
 80025e6:	4b58      	ldr	r3, [pc, #352]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	4a57      	ldr	r2, [pc, #348]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d015      	beq.n	8002626 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7fe fc9f 	bl	8000f3c <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe fc9b 	bl	8000f3c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0b1      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002618:	4b4b      	ldr	r3, [pc, #300]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ee      	beq.n	8002602 <HAL_RCC_OscConfig+0x37e>
 8002624:	e014      	b.n	8002650 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002626:	f7fe fc89 	bl	8000f3c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe fc85 	bl	8000f3c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e09b      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002644:	4b40      	ldr	r3, [pc, #256]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ee      	bne.n	800262e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002650:	7dfb      	ldrb	r3, [r7, #23]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d105      	bne.n	8002662 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002656:	4b3c      	ldr	r3, [pc, #240]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	4a3b      	ldr	r2, [pc, #236]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002660:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8087 	beq.w	800277a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800266c:	4b36      	ldr	r3, [pc, #216]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b08      	cmp	r3, #8
 8002676:	d061      	beq.n	800273c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d146      	bne.n	800270e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002680:	4b33      	ldr	r3, [pc, #204]	@ (8002750 <HAL_RCC_OscConfig+0x4cc>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7fe fc59 	bl	8000f3c <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe fc55 	bl	8000f3c <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e06d      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a0:	4b29      	ldr	r3, [pc, #164]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b4:	d108      	bne.n	80026c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026b6:	4b24      	ldr	r3, [pc, #144]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	4921      	ldr	r1, [pc, #132]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a19      	ldr	r1, [r3, #32]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	430b      	orrs	r3, r1
 80026da:	491b      	ldr	r1, [pc, #108]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002750 <HAL_RCC_OscConfig+0x4cc>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe fc29 	bl	8000f3c <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7fe fc25 	bl	8000f3c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e03d      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x46a>
 800270c:	e035      	b.n	800277a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270e:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <HAL_RCC_OscConfig+0x4cc>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe fc12 	bl	8000f3c <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe fc0e 	bl	8000f3c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e026      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272e:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x498>
 800273a:	e01e      	b.n	800277a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d107      	bne.n	8002754 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e019      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
 8002748:	40021000 	.word	0x40021000
 800274c:	40007000 	.word	0x40007000
 8002750:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002754:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <HAL_RCC_OscConfig+0x500>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	429a      	cmp	r2, r3
 8002766:	d106      	bne.n	8002776 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000

08002788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0d0      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800279c:	4b6a      	ldr	r3, [pc, #424]	@ (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d910      	bls.n	80027cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b67      	ldr	r3, [pc, #412]	@ (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 0207 	bic.w	r2, r3, #7
 80027b2:	4965      	ldr	r1, [pc, #404]	@ (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b63      	ldr	r3, [pc, #396]	@ (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0b8      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e4:	4b59      	ldr	r3, [pc, #356]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a58      	ldr	r2, [pc, #352]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027fc:	4b53      	ldr	r3, [pc, #332]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a52      	ldr	r2, [pc, #328]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002806:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002808:	4b50      	ldr	r3, [pc, #320]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	494d      	ldr	r1, [pc, #308]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d040      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b47      	ldr	r3, [pc, #284]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d115      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e07f      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	4b41      	ldr	r3, [pc, #260]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e073      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	4b3d      	ldr	r3, [pc, #244]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e06b      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002866:	4b39      	ldr	r3, [pc, #228]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4936      	ldr	r1, [pc, #216]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002878:	f7fe fb60 	bl	8000f3c <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	e00a      	b.n	8002896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7fe fb5c 	bl	8000f3c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e053      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2d      	ldr	r3, [pc, #180]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 020c 	and.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1eb      	bne.n	8002880 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d210      	bcs.n	80028d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b24      	ldr	r3, [pc, #144]	@ (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 0207 	bic.w	r2, r3, #7
 80028be:	4922      	ldr	r1, [pc, #136]	@ (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b20      	ldr	r3, [pc, #128]	@ (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e032      	b.n	800293e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e4:	4b19      	ldr	r3, [pc, #100]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4916      	ldr	r1, [pc, #88]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002902:	4b12      	ldr	r3, [pc, #72]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	490e      	ldr	r1, [pc, #56]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002916:	f000 f821 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800291a:	4602      	mov	r2, r0
 800291c:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	490a      	ldr	r1, [pc, #40]	@ (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 8002928:	5ccb      	ldrb	r3, [r1, r3]
 800292a:	fa22 f303 	lsr.w	r3, r2, r3
 800292e:	4a09      	ldr	r2, [pc, #36]	@ (8002954 <HAL_RCC_ClockConfig+0x1cc>)
 8002930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002932:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <HAL_RCC_ClockConfig+0x1d0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fabe 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40022000 	.word	0x40022000
 800294c:	40021000 	.word	0x40021000
 8002950:	080049e0 	.word	0x080049e0
 8002954:	20000000 	.word	0x20000000
 8002958:	20000004 	.word	0x20000004

0800295c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002976:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b04      	cmp	r3, #4
 8002984:	d002      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x30>
 8002986:	2b08      	cmp	r3, #8
 8002988:	d003      	beq.n	8002992 <HAL_RCC_GetSysClockFreq+0x36>
 800298a:	e027      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800298c:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800298e:	613b      	str	r3, [r7, #16]
      break;
 8002990:	e027      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	0c9b      	lsrs	r3, r3, #18
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	4a17      	ldr	r2, [pc, #92]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800299c:	5cd3      	ldrb	r3, [r2, r3]
 800299e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d010      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029aa:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0c5b      	lsrs	r3, r3, #17
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	4a11      	ldr	r2, [pc, #68]	@ (80029fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80029b6:	5cd3      	ldrb	r3, [r2, r3]
 80029b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a0d      	ldr	r2, [pc, #52]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029be:	fb03 f202 	mul.w	r2, r3, r2
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	e004      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029d0:	fb02 f303 	mul.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	613b      	str	r3, [r7, #16]
      break;
 80029da:	e002      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80029de:	613b      	str	r3, [r7, #16]
      break;
 80029e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e2:	693b      	ldr	r3, [r7, #16]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	007a1200 	.word	0x007a1200
 80029f8:	080049f8 	.word	0x080049f8
 80029fc:	08004a08 	.word	0x08004a08
 8002a00:	003d0900 	.word	0x003d0900

08002a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a08:	4b02      	ldr	r3, [pc, #8]	@ (8002a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	20000000 	.word	0x20000000

08002a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a1c:	f7ff fff2 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	4903      	ldr	r1, [pc, #12]	@ (8002a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	080049f0 	.word	0x080049f0

08002a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a44:	f7ff ffde 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	0adb      	lsrs	r3, r3, #11
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	@ (8002a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	080049f0 	.word	0x080049f0

08002a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a70:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <RCC_Delay+0x34>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa0 <RCC_Delay+0x38>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0a5b      	lsrs	r3, r3, #9
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a84:	bf00      	nop
  }
  while (Delay --);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1e5a      	subs	r2, r3, #1
 8002a8a:	60fa      	str	r2, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f9      	bne.n	8002a84 <RCC_Delay+0x1c>
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	20000000 	.word	0x20000000
 8002aa0:	10624dd3 	.word	0x10624dd3

08002aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d07d      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac4:	4b4f      	ldr	r3, [pc, #316]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10d      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad0:	4b4c      	ldr	r3, [pc, #304]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	4a4b      	ldr	r2, [pc, #300]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ada:	61d3      	str	r3, [r2, #28]
 8002adc:	4b49      	ldr	r3, [pc, #292]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aec:	4b46      	ldr	r3, [pc, #280]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d118      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af8:	4b43      	ldr	r3, [pc, #268]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a42      	ldr	r2, [pc, #264]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b04:	f7fe fa1a 	bl	8000f3c <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	e008      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0c:	f7fe fa16 	bl	8000f3c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	@ 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e06d      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b2a:	4b36      	ldr	r3, [pc, #216]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d02e      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d027      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b48:	4b2e      	ldr	r3, [pc, #184]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b52:	4b2e      	ldr	r3, [pc, #184]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b58:	4b2c      	ldr	r3, [pc, #176]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b5e:	4a29      	ldr	r2, [pc, #164]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d014      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe f9e5 	bl	8000f3c <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7fe f9e1 	bl	8000f3c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e036      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ee      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b98:	4b1a      	ldr	r3, [pc, #104]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4917      	ldr	r1, [pc, #92]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb0:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	4a13      	ldr	r2, [pc, #76]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	490b      	ldr	r1, [pc, #44]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d008      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002be6:	4b07      	ldr	r3, [pc, #28]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4904      	ldr	r1, [pc, #16]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	42420440 	.word	0x42420440

08002c10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b10      	cmp	r3, #16
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	f200 808a 	bhi.w	8002d4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d045      	beq.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d075      	beq.n	8002d32 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002c46:	e082      	b.n	8002d4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002c48:	4b46      	ldr	r3, [pc, #280]	@ (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c4e:	4b45      	ldr	r3, [pc, #276]	@ (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d07b      	beq.n	8002d52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	0c9b      	lsrs	r3, r3, #18
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	4a41      	ldr	r2, [pc, #260]	@ (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002c64:	5cd3      	ldrb	r3, [r2, r3]
 8002c66:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d015      	beq.n	8002c9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c72:	4b3c      	ldr	r3, [pc, #240]	@ (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	0c5b      	lsrs	r3, r3, #17
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d6c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002c7e:	5cd3      	ldrb	r3, [r2, r3]
 8002c80:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00d      	beq.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c8c:	4a38      	ldr	r2, [pc, #224]	@ (8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	e004      	b.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4a34      	ldr	r2, [pc, #208]	@ (8002d74 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cb4:	d102      	bne.n	8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	61bb      	str	r3, [r7, #24]
      break;
 8002cba:	e04a      	b.n	8002d52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	085b      	lsrs	r3, r3, #1
 8002cc8:	61bb      	str	r3, [r7, #24]
      break;
 8002cca:	e042      	b.n	8002d52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002ccc:	4b25      	ldr	r3, [pc, #148]	@ (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cdc:	d108      	bne.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002ce8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	e01f      	b.n	8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cfa:	d109      	bne.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002d08:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	e00f      	b.n	8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d1a:	d11c      	bne.n	8002d56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d1c:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d016      	beq.n	8002d56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002d28:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002d2c:	61bb      	str	r3, [r7, #24]
      break;
 8002d2e:	e012      	b.n	8002d56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d30:	e011      	b.n	8002d56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002d32:	f7ff fe85 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 8002d36:	4602      	mov	r2, r0
 8002d38:	4b0a      	ldr	r3, [pc, #40]	@ (8002d64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	0b9b      	lsrs	r3, r3, #14
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	3301      	adds	r3, #1
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	61bb      	str	r3, [r7, #24]
      break;
 8002d4c:	e004      	b.n	8002d58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e002      	b.n	8002d58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d52:	bf00      	nop
 8002d54:	e000      	b.n	8002d58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d56:	bf00      	nop
    }
  }
  return (frequency);
 8002d58:	69bb      	ldr	r3, [r7, #24]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40021000 	.word	0x40021000
 8002d68:	08004a0c 	.word	0x08004a0c
 8002d6c:	08004a1c 	.word	0x08004a1c
 8002d70:	007a1200 	.word	0x007a1200
 8002d74:	003d0900 	.word	0x003d0900
 8002d78:	aaaaaaab 	.word	0xaaaaaaab

08002d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e042      	b.n	8002e14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fd fef2 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2224      	movs	r2, #36	@ 0x24
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fdb7 	bl	8003934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	@ 0x28
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d175      	bne.n	8002f28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_UART_Transmit+0x2c>
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e06e      	b.n	8002f2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2221      	movs	r2, #33	@ 0x21
 8002e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e5a:	f7fe f86f 	bl	8000f3c <HAL_GetTick>
 8002e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	88fa      	ldrh	r2, [r7, #6]
 8002e64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	88fa      	ldrh	r2, [r7, #6]
 8002e6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e74:	d108      	bne.n	8002e88 <HAL_UART_Transmit+0x6c>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e003      	b.n	8002e90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e90:	e02e      	b.n	8002ef0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2180      	movs	r1, #128	@ 0x80
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fb1c 	bl	80034da <UART_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e03a      	b.n	8002f2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ec8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	3302      	adds	r3, #2
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	e007      	b.n	8002ee2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	781a      	ldrb	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1cb      	bne.n	8002e92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2200      	movs	r2, #0
 8002f02:	2140      	movs	r1, #64	@ 0x40
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fae8 	bl	80034da <UART_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e006      	b.n	8002f2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e000      	b.n	8002f2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
  }
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d112      	bne.n	8002f72 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_UART_Receive_IT+0x26>
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e00b      	b.n	8002f74 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	461a      	mov	r2, r3
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fb0f 	bl	800358c <UART_Start_Receive_IT>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	e000      	b.n	8002f74 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
  }
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b0ba      	sub	sp, #232	@ 0xe8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002fba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x66>
 8002fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fbec 	bl	80037b8 <UART_Receive_IT>
      return;
 8002fe0:	e25b      	b.n	800349a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fe2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80de 	beq.w	80031a8 <HAL_UART_IRQHandler+0x22c>
 8002fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ffc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80d1 	beq.w	80031a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_UART_IRQHandler+0xae>
 8003012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003022:	f043 0201 	orr.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800302a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_UART_IRQHandler+0xd2>
 8003036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003046:	f043 0202 	orr.w	r2, r3, #2
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800304e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_UART_IRQHandler+0xf6>
 800305a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306a:	f043 0204 	orr.w	r2, r3, #4
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d011      	beq.n	80030a2 <HAL_UART_IRQHandler+0x126>
 800307e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	d105      	bne.n	8003096 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800308a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309a:	f043 0208 	orr.w	r2, r3, #8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 81f2 	beq.w	8003490 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_UART_IRQHandler+0x14e>
 80030b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fb77 	bl	80037b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_UART_IRQHandler+0x17a>
 80030ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d04f      	beq.n	8003196 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fa81 	bl	80035fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d041      	beq.n	800318e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3314      	adds	r3, #20
 8003110:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003120:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003128:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3314      	adds	r3, #20
 8003132:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003136:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800313a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003142:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800314e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1d9      	bne.n	800310a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315a:	2b00      	cmp	r3, #0
 800315c:	d013      	beq.n	8003186 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003162:	4a7e      	ldr	r2, [pc, #504]	@ (800335c <HAL_UART_IRQHandler+0x3e0>)
 8003164:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fe24 	bl	8001db8 <HAL_DMA_Abort_IT>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d016      	beq.n	80031a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003180:	4610      	mov	r0, r2
 8003182:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003184:	e00e      	b.n	80031a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f993 	bl	80034b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318c:	e00a      	b.n	80031a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f98f 	bl	80034b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003194:	e006      	b.n	80031a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f98b 	bl	80034b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80031a2:	e175      	b.n	8003490 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a4:	bf00      	nop
    return;
 80031a6:	e173      	b.n	8003490 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	f040 814f 	bne.w	8003450 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8148 	beq.w	8003450 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8141 	beq.w	8003450 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80b6 	beq.w	8003360 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003200:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8145 	beq.w	8003494 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800320e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003212:	429a      	cmp	r2, r3
 8003214:	f080 813e 	bcs.w	8003494 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800321e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b20      	cmp	r3, #32
 8003228:	f000 8088 	beq.w	800333c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	330c      	adds	r3, #12
 8003232:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800323a:	e853 3f00 	ldrex	r3, [r3]
 800323e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003242:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003246:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800324a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	330c      	adds	r3, #12
 8003254:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003258:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800325c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003260:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003264:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003268:	e841 2300 	strex	r3, r2, [r1]
 800326c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1d9      	bne.n	800322c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3314      	adds	r3, #20
 800327e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003282:	e853 3f00 	ldrex	r3, [r3]
 8003286:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003288:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3314      	adds	r3, #20
 8003298:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800329c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80032a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80032a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80032a8:	e841 2300 	strex	r3, r2, [r1]
 80032ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80032ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e1      	bne.n	8003278 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3314      	adds	r3, #20
 80032ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032be:	e853 3f00 	ldrex	r3, [r3]
 80032c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3314      	adds	r3, #20
 80032d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80032e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e3      	bne.n	80032b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003304:	e853 3f00 	ldrex	r3, [r3]
 8003308:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800330a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800330c:	f023 0310 	bic.w	r3, r3, #16
 8003310:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	330c      	adds	r3, #12
 800331a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800331e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003320:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003324:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800332c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e3      	bne.n	80032fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe fd03 	bl	8001d42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800334a:	b29b      	uxth	r3, r3
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	b29b      	uxth	r3, r3
 8003350:	4619      	mov	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f8b6 	bl	80034c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003358:	e09c      	b.n	8003494 <HAL_UART_IRQHandler+0x518>
 800335a:	bf00      	nop
 800335c:	080036c3 	.word	0x080036c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003368:	b29b      	uxth	r3, r3
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 808e 	beq.w	8003498 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800337c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8089 	beq.w	8003498 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003390:	e853 3f00 	ldrex	r3, [r3]
 8003394:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003398:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800339c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	330c      	adds	r3, #12
 80033a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80033aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80033ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1e3      	bne.n	8003386 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3314      	adds	r3, #20
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	e853 3f00 	ldrex	r3, [r3]
 80033cc:	623b      	str	r3, [r7, #32]
   return(result);
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3314      	adds	r3, #20
 80033de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80033e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e3      	bne.n	80033be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	330c      	adds	r3, #12
 800340a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	e853 3f00 	ldrex	r3, [r3]
 8003412:	60fb      	str	r3, [r7, #12]
   return(result);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0310 	bic.w	r3, r3, #16
 800341a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	330c      	adds	r3, #12
 8003424:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003428:	61fa      	str	r2, [r7, #28]
 800342a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342c:	69b9      	ldr	r1, [r7, #24]
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	e841 2300 	strex	r3, r2, [r1]
 8003434:	617b      	str	r3, [r7, #20]
   return(result);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e3      	bne.n	8003404 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003442:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003446:	4619      	mov	r1, r3
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f83b 	bl	80034c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800344e:	e023      	b.n	8003498 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003458:	2b00      	cmp	r3, #0
 800345a:	d009      	beq.n	8003470 <HAL_UART_IRQHandler+0x4f4>
 800345c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f93e 	bl	80036ea <UART_Transmit_IT>
    return;
 800346e:	e014      	b.n	800349a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00e      	beq.n	800349a <HAL_UART_IRQHandler+0x51e>
 800347c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f97d 	bl	8003788 <UART_EndTransmit_IT>
    return;
 800348e:	e004      	b.n	800349a <HAL_UART_IRQHandler+0x51e>
    return;
 8003490:	bf00      	nop
 8003492:	e002      	b.n	800349a <HAL_UART_IRQHandler+0x51e>
      return;
 8003494:	bf00      	nop
 8003496:	e000      	b.n	800349a <HAL_UART_IRQHandler+0x51e>
      return;
 8003498:	bf00      	nop
  }
}
 800349a:	37e8      	adds	r7, #232	@ 0xe8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ea:	e03b      	b.n	8003564 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f2:	d037      	beq.n	8003564 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f4:	f7fd fd22 	bl	8000f3c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	6a3a      	ldr	r2, [r7, #32]
 8003500:	429a      	cmp	r2, r3
 8003502:	d302      	bcc.n	800350a <UART_WaitOnFlagUntilTimeout+0x30>
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e03a      	b.n	8003584 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d023      	beq.n	8003564 <UART_WaitOnFlagUntilTimeout+0x8a>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b80      	cmp	r3, #128	@ 0x80
 8003520:	d020      	beq.n	8003564 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b40      	cmp	r3, #64	@ 0x40
 8003526:	d01d      	beq.n	8003564 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b08      	cmp	r3, #8
 8003534:	d116      	bne.n	8003564 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f856 	bl	80035fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2208      	movs	r2, #8
 8003556:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e00f      	b.n	8003584 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4013      	ands	r3, r2
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	429a      	cmp	r2, r3
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	429a      	cmp	r2, r3
 8003580:	d0b4      	beq.n	80034ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	4613      	mov	r3, r2
 8003598:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	88fa      	ldrh	r2, [r7, #6]
 80035a4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	88fa      	ldrh	r2, [r7, #6]
 80035aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2222      	movs	r2, #34	@ 0x22
 80035b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0201 	orr.w	r2, r2, #1
 80035e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0220 	orr.w	r2, r2, #32
 80035f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035fe:	b480      	push	{r7}
 8003600:	b095      	sub	sp, #84	@ 0x54
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	330c      	adds	r3, #12
 800360c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003610:	e853 3f00 	ldrex	r3, [r3]
 8003614:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003618:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800361c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	330c      	adds	r3, #12
 8003624:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003626:	643a      	str	r2, [r7, #64]	@ 0x40
 8003628:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800362c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e5      	bne.n	8003606 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3314      	adds	r3, #20
 8003640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	61fb      	str	r3, [r7, #28]
   return(result);
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3314      	adds	r3, #20
 8003658:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800365a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800365c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1e5      	bne.n	800363a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	2b01      	cmp	r3, #1
 8003674:	d119      	bne.n	80036aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	330c      	adds	r3, #12
 800367c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	60bb      	str	r3, [r7, #8]
   return(result);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f023 0310 	bic.w	r3, r3, #16
 800368c:	647b      	str	r3, [r7, #68]	@ 0x44
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003696:	61ba      	str	r2, [r7, #24]
 8003698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6979      	ldr	r1, [r7, #20]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	613b      	str	r3, [r7, #16]
   return(result);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e5      	bne.n	8003676 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036b8:	bf00      	nop
 80036ba:	3754      	adds	r7, #84	@ 0x54
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr

080036c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f7ff fee8 	bl	80034b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b085      	sub	sp, #20
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b21      	cmp	r3, #33	@ 0x21
 80036fc:	d13e      	bne.n	800377c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003706:	d114      	bne.n	8003732 <UART_Transmit_IT+0x48>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d110      	bne.n	8003732 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003724:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	1c9a      	adds	r2, r3, #2
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	621a      	str	r2, [r3, #32]
 8003730:	e008      	b.n	8003744 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	1c59      	adds	r1, r3, #1
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6211      	str	r1, [r2, #32]
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29b      	uxth	r3, r3
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	4619      	mov	r1, r3
 8003752:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10f      	bne.n	8003778 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003766:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003776:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	e000      	b.n	800377e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
  }
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800379e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff fe79 	bl	80034a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08c      	sub	sp, #48	@ 0x30
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b22      	cmp	r3, #34	@ 0x22
 80037ca:	f040 80ae 	bne.w	800392a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037d6:	d117      	bne.n	8003808 <UART_Receive_IT+0x50>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d113      	bne.n	8003808 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003800:	1c9a      	adds	r2, r3, #2
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	629a      	str	r2, [r3, #40]	@ 0x28
 8003806:	e026      	b.n	8003856 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800380e:	2300      	movs	r3, #0
 8003810:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800381a:	d007      	beq.n	800382c <UART_Receive_IT+0x74>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <UART_Receive_IT+0x82>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	b2da      	uxtb	r2, r3
 8003834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	e008      	b.n	800384c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003846:	b2da      	uxtb	r2, r3
 8003848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29b      	uxth	r3, r3
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4619      	mov	r1, r3
 8003864:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003866:	2b00      	cmp	r3, #0
 8003868:	d15d      	bne.n	8003926 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0220 	bic.w	r2, r2, #32
 8003878:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003888:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d135      	bne.n	800391c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	330c      	adds	r3, #12
 80038bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	613b      	str	r3, [r7, #16]
   return(result);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f023 0310 	bic.w	r3, r3, #16
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d6:	623a      	str	r2, [r7, #32]
 80038d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	69f9      	ldr	r1, [r7, #28]
 80038dc:	6a3a      	ldr	r2, [r7, #32]
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e5      	bne.n	80038b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d10a      	bne.n	800390e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003912:	4619      	mov	r1, r3
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff fdd5 	bl	80034c4 <HAL_UARTEx_RxEventCallback>
 800391a:	e002      	b.n	8003922 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7fc fc27 	bl	8000170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	e002      	b.n	800392c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	e000      	b.n	800392c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800392a:	2302      	movs	r3, #2
  }
}
 800392c:	4618      	mov	r0, r3
 800392e:	3730      	adds	r7, #48	@ 0x30
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800396e:	f023 030c 	bic.w	r3, r3, #12
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	430b      	orrs	r3, r1
 800397a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2c      	ldr	r2, [pc, #176]	@ (8003a48 <UART_SetConfig+0x114>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d103      	bne.n	80039a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800399c:	f7ff f850 	bl	8002a40 <HAL_RCC_GetPCLK2Freq>
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	e002      	b.n	80039aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039a4:	f7ff f838 	bl	8002a18 <HAL_RCC_GetPCLK1Freq>
 80039a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	009a      	lsls	r2, r3, #2
 80039b4:	441a      	add	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	4a22      	ldr	r2, [pc, #136]	@ (8003a4c <UART_SetConfig+0x118>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	0119      	lsls	r1, r3, #4
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	009a      	lsls	r2, r3, #2
 80039d4:	441a      	add	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a4c <UART_SetConfig+0x118>)
 80039e2:	fba3 0302 	umull	r0, r3, r3, r2
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2064      	movs	r0, #100	@ 0x64
 80039ea:	fb00 f303 	mul.w	r3, r0, r3
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	3332      	adds	r3, #50	@ 0x32
 80039f4:	4a15      	ldr	r2, [pc, #84]	@ (8003a4c <UART_SetConfig+0x118>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a00:	4419      	add	r1, r3
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	009a      	lsls	r2, r3, #2
 8003a0c:	441a      	add	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a18:	4b0c      	ldr	r3, [pc, #48]	@ (8003a4c <UART_SetConfig+0x118>)
 8003a1a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	2064      	movs	r0, #100	@ 0x64
 8003a22:	fb00 f303 	mul.w	r3, r0, r3
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	3332      	adds	r3, #50	@ 0x32
 8003a2c:	4a07      	ldr	r2, [pc, #28]	@ (8003a4c <UART_SetConfig+0x118>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	f003 020f 	and.w	r2, r3, #15
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	440a      	add	r2, r1
 8003a3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40013800 	.word	0x40013800
 8003a4c:	51eb851f 	.word	0x51eb851f

08003a50 <std>:
 8003a50:	2300      	movs	r3, #0
 8003a52:	b510      	push	{r4, lr}
 8003a54:	4604      	mov	r4, r0
 8003a56:	e9c0 3300 	strd	r3, r3, [r0]
 8003a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a5e:	6083      	str	r3, [r0, #8]
 8003a60:	8181      	strh	r1, [r0, #12]
 8003a62:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a64:	81c2      	strh	r2, [r0, #14]
 8003a66:	6183      	str	r3, [r0, #24]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	2208      	movs	r2, #8
 8003a6c:	305c      	adds	r0, #92	@ 0x5c
 8003a6e:	f000 f9f9 	bl	8003e64 <memset>
 8003a72:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <std+0x58>)
 8003a74:	6224      	str	r4, [r4, #32]
 8003a76:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a78:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <std+0x5c>)
 8003a7a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab0 <std+0x60>)
 8003a7e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a80:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab4 <std+0x64>)
 8003a82:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a84:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab8 <std+0x68>)
 8003a86:	429c      	cmp	r4, r3
 8003a88:	d006      	beq.n	8003a98 <std+0x48>
 8003a8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003a8e:	4294      	cmp	r4, r2
 8003a90:	d002      	beq.n	8003a98 <std+0x48>
 8003a92:	33d0      	adds	r3, #208	@ 0xd0
 8003a94:	429c      	cmp	r4, r3
 8003a96:	d105      	bne.n	8003aa4 <std+0x54>
 8003a98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aa0:	f000 ba58 	b.w	8003f54 <__retarget_lock_init_recursive>
 8003aa4:	bd10      	pop	{r4, pc}
 8003aa6:	bf00      	nop
 8003aa8:	08003cb5 	.word	0x08003cb5
 8003aac:	08003cd7 	.word	0x08003cd7
 8003ab0:	08003d0f 	.word	0x08003d0f
 8003ab4:	08003d33 	.word	0x08003d33
 8003ab8:	20000468 	.word	0x20000468

08003abc <stdio_exit_handler>:
 8003abc:	4a02      	ldr	r2, [pc, #8]	@ (8003ac8 <stdio_exit_handler+0xc>)
 8003abe:	4903      	ldr	r1, [pc, #12]	@ (8003acc <stdio_exit_handler+0x10>)
 8003ac0:	4803      	ldr	r0, [pc, #12]	@ (8003ad0 <stdio_exit_handler+0x14>)
 8003ac2:	f000 b869 	b.w	8003b98 <_fwalk_sglue>
 8003ac6:	bf00      	nop
 8003ac8:	2000000c 	.word	0x2000000c
 8003acc:	080047e9 	.word	0x080047e9
 8003ad0:	2000001c 	.word	0x2000001c

08003ad4 <cleanup_stdio>:
 8003ad4:	6841      	ldr	r1, [r0, #4]
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b08 <cleanup_stdio+0x34>)
 8003ad8:	b510      	push	{r4, lr}
 8003ada:	4299      	cmp	r1, r3
 8003adc:	4604      	mov	r4, r0
 8003ade:	d001      	beq.n	8003ae4 <cleanup_stdio+0x10>
 8003ae0:	f000 fe82 	bl	80047e8 <_fflush_r>
 8003ae4:	68a1      	ldr	r1, [r4, #8]
 8003ae6:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <cleanup_stdio+0x38>)
 8003ae8:	4299      	cmp	r1, r3
 8003aea:	d002      	beq.n	8003af2 <cleanup_stdio+0x1e>
 8003aec:	4620      	mov	r0, r4
 8003aee:	f000 fe7b 	bl	80047e8 <_fflush_r>
 8003af2:	68e1      	ldr	r1, [r4, #12]
 8003af4:	4b06      	ldr	r3, [pc, #24]	@ (8003b10 <cleanup_stdio+0x3c>)
 8003af6:	4299      	cmp	r1, r3
 8003af8:	d004      	beq.n	8003b04 <cleanup_stdio+0x30>
 8003afa:	4620      	mov	r0, r4
 8003afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b00:	f000 be72 	b.w	80047e8 <_fflush_r>
 8003b04:	bd10      	pop	{r4, pc}
 8003b06:	bf00      	nop
 8003b08:	20000468 	.word	0x20000468
 8003b0c:	200004d0 	.word	0x200004d0
 8003b10:	20000538 	.word	0x20000538

08003b14 <global_stdio_init.part.0>:
 8003b14:	b510      	push	{r4, lr}
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <global_stdio_init.part.0+0x30>)
 8003b18:	4c0b      	ldr	r4, [pc, #44]	@ (8003b48 <global_stdio_init.part.0+0x34>)
 8003b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b4c <global_stdio_init.part.0+0x38>)
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	2104      	movs	r1, #4
 8003b22:	2200      	movs	r2, #0
 8003b24:	f7ff ff94 	bl	8003a50 <std>
 8003b28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	2109      	movs	r1, #9
 8003b30:	f7ff ff8e 	bl	8003a50 <std>
 8003b34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b38:	2202      	movs	r2, #2
 8003b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b3e:	2112      	movs	r1, #18
 8003b40:	f7ff bf86 	b.w	8003a50 <std>
 8003b44:	200005a0 	.word	0x200005a0
 8003b48:	20000468 	.word	0x20000468
 8003b4c:	08003abd 	.word	0x08003abd

08003b50 <__sfp_lock_acquire>:
 8003b50:	4801      	ldr	r0, [pc, #4]	@ (8003b58 <__sfp_lock_acquire+0x8>)
 8003b52:	f000 ba00 	b.w	8003f56 <__retarget_lock_acquire_recursive>
 8003b56:	bf00      	nop
 8003b58:	200005a9 	.word	0x200005a9

08003b5c <__sfp_lock_release>:
 8003b5c:	4801      	ldr	r0, [pc, #4]	@ (8003b64 <__sfp_lock_release+0x8>)
 8003b5e:	f000 b9fb 	b.w	8003f58 <__retarget_lock_release_recursive>
 8003b62:	bf00      	nop
 8003b64:	200005a9 	.word	0x200005a9

08003b68 <__sinit>:
 8003b68:	b510      	push	{r4, lr}
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	f7ff fff0 	bl	8003b50 <__sfp_lock_acquire>
 8003b70:	6a23      	ldr	r3, [r4, #32]
 8003b72:	b11b      	cbz	r3, 8003b7c <__sinit+0x14>
 8003b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b78:	f7ff bff0 	b.w	8003b5c <__sfp_lock_release>
 8003b7c:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <__sinit+0x28>)
 8003b7e:	6223      	str	r3, [r4, #32]
 8003b80:	4b04      	ldr	r3, [pc, #16]	@ (8003b94 <__sinit+0x2c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f5      	bne.n	8003b74 <__sinit+0xc>
 8003b88:	f7ff ffc4 	bl	8003b14 <global_stdio_init.part.0>
 8003b8c:	e7f2      	b.n	8003b74 <__sinit+0xc>
 8003b8e:	bf00      	nop
 8003b90:	08003ad5 	.word	0x08003ad5
 8003b94:	200005a0 	.word	0x200005a0

08003b98 <_fwalk_sglue>:
 8003b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b9c:	4607      	mov	r7, r0
 8003b9e:	4688      	mov	r8, r1
 8003ba0:	4614      	mov	r4, r2
 8003ba2:	2600      	movs	r6, #0
 8003ba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ba8:	f1b9 0901 	subs.w	r9, r9, #1
 8003bac:	d505      	bpl.n	8003bba <_fwalk_sglue+0x22>
 8003bae:	6824      	ldr	r4, [r4, #0]
 8003bb0:	2c00      	cmp	r4, #0
 8003bb2:	d1f7      	bne.n	8003ba4 <_fwalk_sglue+0xc>
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bba:	89ab      	ldrh	r3, [r5, #12]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d907      	bls.n	8003bd0 <_fwalk_sglue+0x38>
 8003bc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	d003      	beq.n	8003bd0 <_fwalk_sglue+0x38>
 8003bc8:	4629      	mov	r1, r5
 8003bca:	4638      	mov	r0, r7
 8003bcc:	47c0      	blx	r8
 8003bce:	4306      	orrs	r6, r0
 8003bd0:	3568      	adds	r5, #104	@ 0x68
 8003bd2:	e7e9      	b.n	8003ba8 <_fwalk_sglue+0x10>

08003bd4 <iprintf>:
 8003bd4:	b40f      	push	{r0, r1, r2, r3}
 8003bd6:	b507      	push	{r0, r1, r2, lr}
 8003bd8:	4906      	ldr	r1, [pc, #24]	@ (8003bf4 <iprintf+0x20>)
 8003bda:	ab04      	add	r3, sp, #16
 8003bdc:	6808      	ldr	r0, [r1, #0]
 8003bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8003be2:	6881      	ldr	r1, [r0, #8]
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	f000 fad7 	bl	8004198 <_vfiprintf_r>
 8003bea:	b003      	add	sp, #12
 8003bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bf0:	b004      	add	sp, #16
 8003bf2:	4770      	bx	lr
 8003bf4:	20000018 	.word	0x20000018

08003bf8 <_puts_r>:
 8003bf8:	6a03      	ldr	r3, [r0, #32]
 8003bfa:	b570      	push	{r4, r5, r6, lr}
 8003bfc:	4605      	mov	r5, r0
 8003bfe:	460e      	mov	r6, r1
 8003c00:	6884      	ldr	r4, [r0, #8]
 8003c02:	b90b      	cbnz	r3, 8003c08 <_puts_r+0x10>
 8003c04:	f7ff ffb0 	bl	8003b68 <__sinit>
 8003c08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c0a:	07db      	lsls	r3, r3, #31
 8003c0c:	d405      	bmi.n	8003c1a <_puts_r+0x22>
 8003c0e:	89a3      	ldrh	r3, [r4, #12]
 8003c10:	0598      	lsls	r0, r3, #22
 8003c12:	d402      	bmi.n	8003c1a <_puts_r+0x22>
 8003c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c16:	f000 f99e 	bl	8003f56 <__retarget_lock_acquire_recursive>
 8003c1a:	89a3      	ldrh	r3, [r4, #12]
 8003c1c:	0719      	lsls	r1, r3, #28
 8003c1e:	d502      	bpl.n	8003c26 <_puts_r+0x2e>
 8003c20:	6923      	ldr	r3, [r4, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d135      	bne.n	8003c92 <_puts_r+0x9a>
 8003c26:	4621      	mov	r1, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f000 f8c5 	bl	8003db8 <__swsetup_r>
 8003c2e:	b380      	cbz	r0, 8003c92 <_puts_r+0x9a>
 8003c30:	f04f 35ff 	mov.w	r5, #4294967295
 8003c34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c36:	07da      	lsls	r2, r3, #31
 8003c38:	d405      	bmi.n	8003c46 <_puts_r+0x4e>
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	059b      	lsls	r3, r3, #22
 8003c3e:	d402      	bmi.n	8003c46 <_puts_r+0x4e>
 8003c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c42:	f000 f989 	bl	8003f58 <__retarget_lock_release_recursive>
 8003c46:	4628      	mov	r0, r5
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	da04      	bge.n	8003c58 <_puts_r+0x60>
 8003c4e:	69a2      	ldr	r2, [r4, #24]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	dc17      	bgt.n	8003c84 <_puts_r+0x8c>
 8003c54:	290a      	cmp	r1, #10
 8003c56:	d015      	beq.n	8003c84 <_puts_r+0x8c>
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	6022      	str	r2, [r4, #0]
 8003c5e:	7019      	strb	r1, [r3, #0]
 8003c60:	68a3      	ldr	r3, [r4, #8]
 8003c62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c66:	3b01      	subs	r3, #1
 8003c68:	60a3      	str	r3, [r4, #8]
 8003c6a:	2900      	cmp	r1, #0
 8003c6c:	d1ed      	bne.n	8003c4a <_puts_r+0x52>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	da11      	bge.n	8003c96 <_puts_r+0x9e>
 8003c72:	4622      	mov	r2, r4
 8003c74:	210a      	movs	r1, #10
 8003c76:	4628      	mov	r0, r5
 8003c78:	f000 f85f 	bl	8003d3a <__swbuf_r>
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	d0d7      	beq.n	8003c30 <_puts_r+0x38>
 8003c80:	250a      	movs	r5, #10
 8003c82:	e7d7      	b.n	8003c34 <_puts_r+0x3c>
 8003c84:	4622      	mov	r2, r4
 8003c86:	4628      	mov	r0, r5
 8003c88:	f000 f857 	bl	8003d3a <__swbuf_r>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d1e7      	bne.n	8003c60 <_puts_r+0x68>
 8003c90:	e7ce      	b.n	8003c30 <_puts_r+0x38>
 8003c92:	3e01      	subs	r6, #1
 8003c94:	e7e4      	b.n	8003c60 <_puts_r+0x68>
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	6022      	str	r2, [r4, #0]
 8003c9c:	220a      	movs	r2, #10
 8003c9e:	701a      	strb	r2, [r3, #0]
 8003ca0:	e7ee      	b.n	8003c80 <_puts_r+0x88>
	...

08003ca4 <puts>:
 8003ca4:	4b02      	ldr	r3, [pc, #8]	@ (8003cb0 <puts+0xc>)
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	f7ff bfa5 	b.w	8003bf8 <_puts_r>
 8003cae:	bf00      	nop
 8003cb0:	20000018 	.word	0x20000018

08003cb4 <__sread>:
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cbc:	f000 f8fc 	bl	8003eb8 <_read_r>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	bfab      	itete	ge
 8003cc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8003cc8:	181b      	addge	r3, r3, r0
 8003cca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003cce:	bfac      	ite	ge
 8003cd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003cd2:	81a3      	strhlt	r3, [r4, #12]
 8003cd4:	bd10      	pop	{r4, pc}

08003cd6 <__swrite>:
 8003cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cda:	461f      	mov	r7, r3
 8003cdc:	898b      	ldrh	r3, [r1, #12]
 8003cde:	4605      	mov	r5, r0
 8003ce0:	05db      	lsls	r3, r3, #23
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	4616      	mov	r6, r2
 8003ce6:	d505      	bpl.n	8003cf4 <__swrite+0x1e>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	2200      	movs	r2, #0
 8003cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf0:	f000 f8d0 	bl	8003e94 <_lseek_r>
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	4632      	mov	r2, r6
 8003cf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cfc:	81a3      	strh	r3, [r4, #12]
 8003cfe:	4628      	mov	r0, r5
 8003d00:	463b      	mov	r3, r7
 8003d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0a:	f000 b8e7 	b.w	8003edc <_write_r>

08003d0e <__sseek>:
 8003d0e:	b510      	push	{r4, lr}
 8003d10:	460c      	mov	r4, r1
 8003d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d16:	f000 f8bd 	bl	8003e94 <_lseek_r>
 8003d1a:	1c43      	adds	r3, r0, #1
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	bf15      	itete	ne
 8003d20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d2a:	81a3      	strheq	r3, [r4, #12]
 8003d2c:	bf18      	it	ne
 8003d2e:	81a3      	strhne	r3, [r4, #12]
 8003d30:	bd10      	pop	{r4, pc}

08003d32 <__sclose>:
 8003d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d36:	f000 b89d 	b.w	8003e74 <_close_r>

08003d3a <__swbuf_r>:
 8003d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3c:	460e      	mov	r6, r1
 8003d3e:	4614      	mov	r4, r2
 8003d40:	4605      	mov	r5, r0
 8003d42:	b118      	cbz	r0, 8003d4c <__swbuf_r+0x12>
 8003d44:	6a03      	ldr	r3, [r0, #32]
 8003d46:	b90b      	cbnz	r3, 8003d4c <__swbuf_r+0x12>
 8003d48:	f7ff ff0e 	bl	8003b68 <__sinit>
 8003d4c:	69a3      	ldr	r3, [r4, #24]
 8003d4e:	60a3      	str	r3, [r4, #8]
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	071a      	lsls	r2, r3, #28
 8003d54:	d501      	bpl.n	8003d5a <__swbuf_r+0x20>
 8003d56:	6923      	ldr	r3, [r4, #16]
 8003d58:	b943      	cbnz	r3, 8003d6c <__swbuf_r+0x32>
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	f000 f82b 	bl	8003db8 <__swsetup_r>
 8003d62:	b118      	cbz	r0, 8003d6c <__swbuf_r+0x32>
 8003d64:	f04f 37ff 	mov.w	r7, #4294967295
 8003d68:	4638      	mov	r0, r7
 8003d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	6922      	ldr	r2, [r4, #16]
 8003d70:	b2f6      	uxtb	r6, r6
 8003d72:	1a98      	subs	r0, r3, r2
 8003d74:	6963      	ldr	r3, [r4, #20]
 8003d76:	4637      	mov	r7, r6
 8003d78:	4283      	cmp	r3, r0
 8003d7a:	dc05      	bgt.n	8003d88 <__swbuf_r+0x4e>
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f000 fd32 	bl	80047e8 <_fflush_r>
 8003d84:	2800      	cmp	r0, #0
 8003d86:	d1ed      	bne.n	8003d64 <__swbuf_r+0x2a>
 8003d88:	68a3      	ldr	r3, [r4, #8]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	60a3      	str	r3, [r4, #8]
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	6022      	str	r2, [r4, #0]
 8003d94:	701e      	strb	r6, [r3, #0]
 8003d96:	6962      	ldr	r2, [r4, #20]
 8003d98:	1c43      	adds	r3, r0, #1
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d004      	beq.n	8003da8 <__swbuf_r+0x6e>
 8003d9e:	89a3      	ldrh	r3, [r4, #12]
 8003da0:	07db      	lsls	r3, r3, #31
 8003da2:	d5e1      	bpl.n	8003d68 <__swbuf_r+0x2e>
 8003da4:	2e0a      	cmp	r6, #10
 8003da6:	d1df      	bne.n	8003d68 <__swbuf_r+0x2e>
 8003da8:	4621      	mov	r1, r4
 8003daa:	4628      	mov	r0, r5
 8003dac:	f000 fd1c 	bl	80047e8 <_fflush_r>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d0d9      	beq.n	8003d68 <__swbuf_r+0x2e>
 8003db4:	e7d6      	b.n	8003d64 <__swbuf_r+0x2a>
	...

08003db8 <__swsetup_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	4b29      	ldr	r3, [pc, #164]	@ (8003e60 <__swsetup_r+0xa8>)
 8003dbc:	4605      	mov	r5, r0
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	b118      	cbz	r0, 8003dcc <__swsetup_r+0x14>
 8003dc4:	6a03      	ldr	r3, [r0, #32]
 8003dc6:	b90b      	cbnz	r3, 8003dcc <__swsetup_r+0x14>
 8003dc8:	f7ff fece 	bl	8003b68 <__sinit>
 8003dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dd0:	0719      	lsls	r1, r3, #28
 8003dd2:	d422      	bmi.n	8003e1a <__swsetup_r+0x62>
 8003dd4:	06da      	lsls	r2, r3, #27
 8003dd6:	d407      	bmi.n	8003de8 <__swsetup_r+0x30>
 8003dd8:	2209      	movs	r2, #9
 8003dda:	602a      	str	r2, [r5, #0]
 8003ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003de0:	f04f 30ff 	mov.w	r0, #4294967295
 8003de4:	81a3      	strh	r3, [r4, #12]
 8003de6:	e033      	b.n	8003e50 <__swsetup_r+0x98>
 8003de8:	0758      	lsls	r0, r3, #29
 8003dea:	d512      	bpl.n	8003e12 <__swsetup_r+0x5a>
 8003dec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003dee:	b141      	cbz	r1, 8003e02 <__swsetup_r+0x4a>
 8003df0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003df4:	4299      	cmp	r1, r3
 8003df6:	d002      	beq.n	8003dfe <__swsetup_r+0x46>
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f000 f8af 	bl	8003f5c <_free_r>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e02:	89a3      	ldrh	r3, [r4, #12]
 8003e04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003e08:	81a3      	strh	r3, [r4, #12]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6063      	str	r3, [r4, #4]
 8003e0e:	6923      	ldr	r3, [r4, #16]
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	89a3      	ldrh	r3, [r4, #12]
 8003e14:	f043 0308 	orr.w	r3, r3, #8
 8003e18:	81a3      	strh	r3, [r4, #12]
 8003e1a:	6923      	ldr	r3, [r4, #16]
 8003e1c:	b94b      	cbnz	r3, 8003e32 <__swsetup_r+0x7a>
 8003e1e:	89a3      	ldrh	r3, [r4, #12]
 8003e20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e28:	d003      	beq.n	8003e32 <__swsetup_r+0x7a>
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f000 fd28 	bl	8004882 <__smakebuf_r>
 8003e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e36:	f013 0201 	ands.w	r2, r3, #1
 8003e3a:	d00a      	beq.n	8003e52 <__swsetup_r+0x9a>
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	60a2      	str	r2, [r4, #8]
 8003e40:	6962      	ldr	r2, [r4, #20]
 8003e42:	4252      	negs	r2, r2
 8003e44:	61a2      	str	r2, [r4, #24]
 8003e46:	6922      	ldr	r2, [r4, #16]
 8003e48:	b942      	cbnz	r2, 8003e5c <__swsetup_r+0xa4>
 8003e4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003e4e:	d1c5      	bne.n	8003ddc <__swsetup_r+0x24>
 8003e50:	bd38      	pop	{r3, r4, r5, pc}
 8003e52:	0799      	lsls	r1, r3, #30
 8003e54:	bf58      	it	pl
 8003e56:	6962      	ldrpl	r2, [r4, #20]
 8003e58:	60a2      	str	r2, [r4, #8]
 8003e5a:	e7f4      	b.n	8003e46 <__swsetup_r+0x8e>
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	e7f7      	b.n	8003e50 <__swsetup_r+0x98>
 8003e60:	20000018 	.word	0x20000018

08003e64 <memset>:
 8003e64:	4603      	mov	r3, r0
 8003e66:	4402      	add	r2, r0
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d100      	bne.n	8003e6e <memset+0xa>
 8003e6c:	4770      	bx	lr
 8003e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e72:	e7f9      	b.n	8003e68 <memset+0x4>

08003e74 <_close_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	2300      	movs	r3, #0
 8003e78:	4d05      	ldr	r5, [pc, #20]	@ (8003e90 <_close_r+0x1c>)
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	f7fc ff71 	bl	8000d66 <_close>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d102      	bne.n	8003e8e <_close_r+0x1a>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	b103      	cbz	r3, 8003e8e <_close_r+0x1a>
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
 8003e90:	200005a4 	.word	0x200005a4

08003e94 <_lseek_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4604      	mov	r4, r0
 8003e98:	4608      	mov	r0, r1
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	4d05      	ldr	r5, [pc, #20]	@ (8003eb4 <_lseek_r+0x20>)
 8003ea0:	602a      	str	r2, [r5, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f7fc ff83 	bl	8000dae <_lseek>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	d102      	bne.n	8003eb2 <_lseek_r+0x1e>
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	b103      	cbz	r3, 8003eb2 <_lseek_r+0x1e>
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	bd38      	pop	{r3, r4, r5, pc}
 8003eb4:	200005a4 	.word	0x200005a4

08003eb8 <_read_r>:
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4604      	mov	r4, r0
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	4d05      	ldr	r5, [pc, #20]	@ (8003ed8 <_read_r+0x20>)
 8003ec4:	602a      	str	r2, [r5, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f7fc ff30 	bl	8000d2c <_read>
 8003ecc:	1c43      	adds	r3, r0, #1
 8003ece:	d102      	bne.n	8003ed6 <_read_r+0x1e>
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	b103      	cbz	r3, 8003ed6 <_read_r+0x1e>
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	bd38      	pop	{r3, r4, r5, pc}
 8003ed8:	200005a4 	.word	0x200005a4

08003edc <_write_r>:
 8003edc:	b538      	push	{r3, r4, r5, lr}
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	4d05      	ldr	r5, [pc, #20]	@ (8003efc <_write_r+0x20>)
 8003ee8:	602a      	str	r2, [r5, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f7fc fd12 	bl	8000914 <_write>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	d102      	bne.n	8003efa <_write_r+0x1e>
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	b103      	cbz	r3, 8003efa <_write_r+0x1e>
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
 8003efc:	200005a4 	.word	0x200005a4

08003f00 <__errno>:
 8003f00:	4b01      	ldr	r3, [pc, #4]	@ (8003f08 <__errno+0x8>)
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000018 	.word	0x20000018

08003f0c <__libc_init_array>:
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	2600      	movs	r6, #0
 8003f10:	4d0c      	ldr	r5, [pc, #48]	@ (8003f44 <__libc_init_array+0x38>)
 8003f12:	4c0d      	ldr	r4, [pc, #52]	@ (8003f48 <__libc_init_array+0x3c>)
 8003f14:	1b64      	subs	r4, r4, r5
 8003f16:	10a4      	asrs	r4, r4, #2
 8003f18:	42a6      	cmp	r6, r4
 8003f1a:	d109      	bne.n	8003f30 <__libc_init_array+0x24>
 8003f1c:	f000 fd2e 	bl	800497c <_init>
 8003f20:	2600      	movs	r6, #0
 8003f22:	4d0a      	ldr	r5, [pc, #40]	@ (8003f4c <__libc_init_array+0x40>)
 8003f24:	4c0a      	ldr	r4, [pc, #40]	@ (8003f50 <__libc_init_array+0x44>)
 8003f26:	1b64      	subs	r4, r4, r5
 8003f28:	10a4      	asrs	r4, r4, #2
 8003f2a:	42a6      	cmp	r6, r4
 8003f2c:	d105      	bne.n	8003f3a <__libc_init_array+0x2e>
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
 8003f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f34:	4798      	blx	r3
 8003f36:	3601      	adds	r6, #1
 8003f38:	e7ee      	b.n	8003f18 <__libc_init_array+0xc>
 8003f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f3e:	4798      	blx	r3
 8003f40:	3601      	adds	r6, #1
 8003f42:	e7f2      	b.n	8003f2a <__libc_init_array+0x1e>
 8003f44:	08004a54 	.word	0x08004a54
 8003f48:	08004a54 	.word	0x08004a54
 8003f4c:	08004a54 	.word	0x08004a54
 8003f50:	08004a58 	.word	0x08004a58

08003f54 <__retarget_lock_init_recursive>:
 8003f54:	4770      	bx	lr

08003f56 <__retarget_lock_acquire_recursive>:
 8003f56:	4770      	bx	lr

08003f58 <__retarget_lock_release_recursive>:
 8003f58:	4770      	bx	lr
	...

08003f5c <_free_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4605      	mov	r5, r0
 8003f60:	2900      	cmp	r1, #0
 8003f62:	d040      	beq.n	8003fe6 <_free_r+0x8a>
 8003f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f68:	1f0c      	subs	r4, r1, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bfb8      	it	lt
 8003f6e:	18e4      	addlt	r4, r4, r3
 8003f70:	f000 f8de 	bl	8004130 <__malloc_lock>
 8003f74:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe8 <_free_r+0x8c>)
 8003f76:	6813      	ldr	r3, [r2, #0]
 8003f78:	b933      	cbnz	r3, 8003f88 <_free_r+0x2c>
 8003f7a:	6063      	str	r3, [r4, #4]
 8003f7c:	6014      	str	r4, [r2, #0]
 8003f7e:	4628      	mov	r0, r5
 8003f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f84:	f000 b8da 	b.w	800413c <__malloc_unlock>
 8003f88:	42a3      	cmp	r3, r4
 8003f8a:	d908      	bls.n	8003f9e <_free_r+0x42>
 8003f8c:	6820      	ldr	r0, [r4, #0]
 8003f8e:	1821      	adds	r1, r4, r0
 8003f90:	428b      	cmp	r3, r1
 8003f92:	bf01      	itttt	eq
 8003f94:	6819      	ldreq	r1, [r3, #0]
 8003f96:	685b      	ldreq	r3, [r3, #4]
 8003f98:	1809      	addeq	r1, r1, r0
 8003f9a:	6021      	streq	r1, [r4, #0]
 8003f9c:	e7ed      	b.n	8003f7a <_free_r+0x1e>
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	b10b      	cbz	r3, 8003fa8 <_free_r+0x4c>
 8003fa4:	42a3      	cmp	r3, r4
 8003fa6:	d9fa      	bls.n	8003f9e <_free_r+0x42>
 8003fa8:	6811      	ldr	r1, [r2, #0]
 8003faa:	1850      	adds	r0, r2, r1
 8003fac:	42a0      	cmp	r0, r4
 8003fae:	d10b      	bne.n	8003fc8 <_free_r+0x6c>
 8003fb0:	6820      	ldr	r0, [r4, #0]
 8003fb2:	4401      	add	r1, r0
 8003fb4:	1850      	adds	r0, r2, r1
 8003fb6:	4283      	cmp	r3, r0
 8003fb8:	6011      	str	r1, [r2, #0]
 8003fba:	d1e0      	bne.n	8003f7e <_free_r+0x22>
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4408      	add	r0, r1
 8003fc2:	6010      	str	r0, [r2, #0]
 8003fc4:	6053      	str	r3, [r2, #4]
 8003fc6:	e7da      	b.n	8003f7e <_free_r+0x22>
 8003fc8:	d902      	bls.n	8003fd0 <_free_r+0x74>
 8003fca:	230c      	movs	r3, #12
 8003fcc:	602b      	str	r3, [r5, #0]
 8003fce:	e7d6      	b.n	8003f7e <_free_r+0x22>
 8003fd0:	6820      	ldr	r0, [r4, #0]
 8003fd2:	1821      	adds	r1, r4, r0
 8003fd4:	428b      	cmp	r3, r1
 8003fd6:	bf01      	itttt	eq
 8003fd8:	6819      	ldreq	r1, [r3, #0]
 8003fda:	685b      	ldreq	r3, [r3, #4]
 8003fdc:	1809      	addeq	r1, r1, r0
 8003fde:	6021      	streq	r1, [r4, #0]
 8003fe0:	6063      	str	r3, [r4, #4]
 8003fe2:	6054      	str	r4, [r2, #4]
 8003fe4:	e7cb      	b.n	8003f7e <_free_r+0x22>
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
 8003fe8:	200005b0 	.word	0x200005b0

08003fec <sbrk_aligned>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	4e0f      	ldr	r6, [pc, #60]	@ (800402c <sbrk_aligned+0x40>)
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	6831      	ldr	r1, [r6, #0]
 8003ff4:	4605      	mov	r5, r0
 8003ff6:	b911      	cbnz	r1, 8003ffe <sbrk_aligned+0x12>
 8003ff8:	f000 fca2 	bl	8004940 <_sbrk_r>
 8003ffc:	6030      	str	r0, [r6, #0]
 8003ffe:	4621      	mov	r1, r4
 8004000:	4628      	mov	r0, r5
 8004002:	f000 fc9d 	bl	8004940 <_sbrk_r>
 8004006:	1c43      	adds	r3, r0, #1
 8004008:	d103      	bne.n	8004012 <sbrk_aligned+0x26>
 800400a:	f04f 34ff 	mov.w	r4, #4294967295
 800400e:	4620      	mov	r0, r4
 8004010:	bd70      	pop	{r4, r5, r6, pc}
 8004012:	1cc4      	adds	r4, r0, #3
 8004014:	f024 0403 	bic.w	r4, r4, #3
 8004018:	42a0      	cmp	r0, r4
 800401a:	d0f8      	beq.n	800400e <sbrk_aligned+0x22>
 800401c:	1a21      	subs	r1, r4, r0
 800401e:	4628      	mov	r0, r5
 8004020:	f000 fc8e 	bl	8004940 <_sbrk_r>
 8004024:	3001      	adds	r0, #1
 8004026:	d1f2      	bne.n	800400e <sbrk_aligned+0x22>
 8004028:	e7ef      	b.n	800400a <sbrk_aligned+0x1e>
 800402a:	bf00      	nop
 800402c:	200005ac 	.word	0x200005ac

08004030 <_malloc_r>:
 8004030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004034:	1ccd      	adds	r5, r1, #3
 8004036:	f025 0503 	bic.w	r5, r5, #3
 800403a:	3508      	adds	r5, #8
 800403c:	2d0c      	cmp	r5, #12
 800403e:	bf38      	it	cc
 8004040:	250c      	movcc	r5, #12
 8004042:	2d00      	cmp	r5, #0
 8004044:	4606      	mov	r6, r0
 8004046:	db01      	blt.n	800404c <_malloc_r+0x1c>
 8004048:	42a9      	cmp	r1, r5
 800404a:	d904      	bls.n	8004056 <_malloc_r+0x26>
 800404c:	230c      	movs	r3, #12
 800404e:	6033      	str	r3, [r6, #0]
 8004050:	2000      	movs	r0, #0
 8004052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004056:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800412c <_malloc_r+0xfc>
 800405a:	f000 f869 	bl	8004130 <__malloc_lock>
 800405e:	f8d8 3000 	ldr.w	r3, [r8]
 8004062:	461c      	mov	r4, r3
 8004064:	bb44      	cbnz	r4, 80040b8 <_malloc_r+0x88>
 8004066:	4629      	mov	r1, r5
 8004068:	4630      	mov	r0, r6
 800406a:	f7ff ffbf 	bl	8003fec <sbrk_aligned>
 800406e:	1c43      	adds	r3, r0, #1
 8004070:	4604      	mov	r4, r0
 8004072:	d158      	bne.n	8004126 <_malloc_r+0xf6>
 8004074:	f8d8 4000 	ldr.w	r4, [r8]
 8004078:	4627      	mov	r7, r4
 800407a:	2f00      	cmp	r7, #0
 800407c:	d143      	bne.n	8004106 <_malloc_r+0xd6>
 800407e:	2c00      	cmp	r4, #0
 8004080:	d04b      	beq.n	800411a <_malloc_r+0xea>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	4639      	mov	r1, r7
 8004086:	4630      	mov	r0, r6
 8004088:	eb04 0903 	add.w	r9, r4, r3
 800408c:	f000 fc58 	bl	8004940 <_sbrk_r>
 8004090:	4581      	cmp	r9, r0
 8004092:	d142      	bne.n	800411a <_malloc_r+0xea>
 8004094:	6821      	ldr	r1, [r4, #0]
 8004096:	4630      	mov	r0, r6
 8004098:	1a6d      	subs	r5, r5, r1
 800409a:	4629      	mov	r1, r5
 800409c:	f7ff ffa6 	bl	8003fec <sbrk_aligned>
 80040a0:	3001      	adds	r0, #1
 80040a2:	d03a      	beq.n	800411a <_malloc_r+0xea>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	442b      	add	r3, r5
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	f8d8 3000 	ldr.w	r3, [r8]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	bb62      	cbnz	r2, 800410c <_malloc_r+0xdc>
 80040b2:	f8c8 7000 	str.w	r7, [r8]
 80040b6:	e00f      	b.n	80040d8 <_malloc_r+0xa8>
 80040b8:	6822      	ldr	r2, [r4, #0]
 80040ba:	1b52      	subs	r2, r2, r5
 80040bc:	d420      	bmi.n	8004100 <_malloc_r+0xd0>
 80040be:	2a0b      	cmp	r2, #11
 80040c0:	d917      	bls.n	80040f2 <_malloc_r+0xc2>
 80040c2:	1961      	adds	r1, r4, r5
 80040c4:	42a3      	cmp	r3, r4
 80040c6:	6025      	str	r5, [r4, #0]
 80040c8:	bf18      	it	ne
 80040ca:	6059      	strne	r1, [r3, #4]
 80040cc:	6863      	ldr	r3, [r4, #4]
 80040ce:	bf08      	it	eq
 80040d0:	f8c8 1000 	streq.w	r1, [r8]
 80040d4:	5162      	str	r2, [r4, r5]
 80040d6:	604b      	str	r3, [r1, #4]
 80040d8:	4630      	mov	r0, r6
 80040da:	f000 f82f 	bl	800413c <__malloc_unlock>
 80040de:	f104 000b 	add.w	r0, r4, #11
 80040e2:	1d23      	adds	r3, r4, #4
 80040e4:	f020 0007 	bic.w	r0, r0, #7
 80040e8:	1ac2      	subs	r2, r0, r3
 80040ea:	bf1c      	itt	ne
 80040ec:	1a1b      	subne	r3, r3, r0
 80040ee:	50a3      	strne	r3, [r4, r2]
 80040f0:	e7af      	b.n	8004052 <_malloc_r+0x22>
 80040f2:	6862      	ldr	r2, [r4, #4]
 80040f4:	42a3      	cmp	r3, r4
 80040f6:	bf0c      	ite	eq
 80040f8:	f8c8 2000 	streq.w	r2, [r8]
 80040fc:	605a      	strne	r2, [r3, #4]
 80040fe:	e7eb      	b.n	80040d8 <_malloc_r+0xa8>
 8004100:	4623      	mov	r3, r4
 8004102:	6864      	ldr	r4, [r4, #4]
 8004104:	e7ae      	b.n	8004064 <_malloc_r+0x34>
 8004106:	463c      	mov	r4, r7
 8004108:	687f      	ldr	r7, [r7, #4]
 800410a:	e7b6      	b.n	800407a <_malloc_r+0x4a>
 800410c:	461a      	mov	r2, r3
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	42a3      	cmp	r3, r4
 8004112:	d1fb      	bne.n	800410c <_malloc_r+0xdc>
 8004114:	2300      	movs	r3, #0
 8004116:	6053      	str	r3, [r2, #4]
 8004118:	e7de      	b.n	80040d8 <_malloc_r+0xa8>
 800411a:	230c      	movs	r3, #12
 800411c:	4630      	mov	r0, r6
 800411e:	6033      	str	r3, [r6, #0]
 8004120:	f000 f80c 	bl	800413c <__malloc_unlock>
 8004124:	e794      	b.n	8004050 <_malloc_r+0x20>
 8004126:	6005      	str	r5, [r0, #0]
 8004128:	e7d6      	b.n	80040d8 <_malloc_r+0xa8>
 800412a:	bf00      	nop
 800412c:	200005b0 	.word	0x200005b0

08004130 <__malloc_lock>:
 8004130:	4801      	ldr	r0, [pc, #4]	@ (8004138 <__malloc_lock+0x8>)
 8004132:	f7ff bf10 	b.w	8003f56 <__retarget_lock_acquire_recursive>
 8004136:	bf00      	nop
 8004138:	200005a8 	.word	0x200005a8

0800413c <__malloc_unlock>:
 800413c:	4801      	ldr	r0, [pc, #4]	@ (8004144 <__malloc_unlock+0x8>)
 800413e:	f7ff bf0b 	b.w	8003f58 <__retarget_lock_release_recursive>
 8004142:	bf00      	nop
 8004144:	200005a8 	.word	0x200005a8

08004148 <__sfputc_r>:
 8004148:	6893      	ldr	r3, [r2, #8]
 800414a:	b410      	push	{r4}
 800414c:	3b01      	subs	r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	6093      	str	r3, [r2, #8]
 8004152:	da07      	bge.n	8004164 <__sfputc_r+0x1c>
 8004154:	6994      	ldr	r4, [r2, #24]
 8004156:	42a3      	cmp	r3, r4
 8004158:	db01      	blt.n	800415e <__sfputc_r+0x16>
 800415a:	290a      	cmp	r1, #10
 800415c:	d102      	bne.n	8004164 <__sfputc_r+0x1c>
 800415e:	bc10      	pop	{r4}
 8004160:	f7ff bdeb 	b.w	8003d3a <__swbuf_r>
 8004164:	6813      	ldr	r3, [r2, #0]
 8004166:	1c58      	adds	r0, r3, #1
 8004168:	6010      	str	r0, [r2, #0]
 800416a:	7019      	strb	r1, [r3, #0]
 800416c:	4608      	mov	r0, r1
 800416e:	bc10      	pop	{r4}
 8004170:	4770      	bx	lr

08004172 <__sfputs_r>:
 8004172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004174:	4606      	mov	r6, r0
 8004176:	460f      	mov	r7, r1
 8004178:	4614      	mov	r4, r2
 800417a:	18d5      	adds	r5, r2, r3
 800417c:	42ac      	cmp	r4, r5
 800417e:	d101      	bne.n	8004184 <__sfputs_r+0x12>
 8004180:	2000      	movs	r0, #0
 8004182:	e007      	b.n	8004194 <__sfputs_r+0x22>
 8004184:	463a      	mov	r2, r7
 8004186:	4630      	mov	r0, r6
 8004188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800418c:	f7ff ffdc 	bl	8004148 <__sfputc_r>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d1f3      	bne.n	800417c <__sfputs_r+0xa>
 8004194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004198 <_vfiprintf_r>:
 8004198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800419c:	460d      	mov	r5, r1
 800419e:	4614      	mov	r4, r2
 80041a0:	4698      	mov	r8, r3
 80041a2:	4606      	mov	r6, r0
 80041a4:	b09d      	sub	sp, #116	@ 0x74
 80041a6:	b118      	cbz	r0, 80041b0 <_vfiprintf_r+0x18>
 80041a8:	6a03      	ldr	r3, [r0, #32]
 80041aa:	b90b      	cbnz	r3, 80041b0 <_vfiprintf_r+0x18>
 80041ac:	f7ff fcdc 	bl	8003b68 <__sinit>
 80041b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041b2:	07d9      	lsls	r1, r3, #31
 80041b4:	d405      	bmi.n	80041c2 <_vfiprintf_r+0x2a>
 80041b6:	89ab      	ldrh	r3, [r5, #12]
 80041b8:	059a      	lsls	r2, r3, #22
 80041ba:	d402      	bmi.n	80041c2 <_vfiprintf_r+0x2a>
 80041bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041be:	f7ff feca 	bl	8003f56 <__retarget_lock_acquire_recursive>
 80041c2:	89ab      	ldrh	r3, [r5, #12]
 80041c4:	071b      	lsls	r3, r3, #28
 80041c6:	d501      	bpl.n	80041cc <_vfiprintf_r+0x34>
 80041c8:	692b      	ldr	r3, [r5, #16]
 80041ca:	b99b      	cbnz	r3, 80041f4 <_vfiprintf_r+0x5c>
 80041cc:	4629      	mov	r1, r5
 80041ce:	4630      	mov	r0, r6
 80041d0:	f7ff fdf2 	bl	8003db8 <__swsetup_r>
 80041d4:	b170      	cbz	r0, 80041f4 <_vfiprintf_r+0x5c>
 80041d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041d8:	07dc      	lsls	r4, r3, #31
 80041da:	d504      	bpl.n	80041e6 <_vfiprintf_r+0x4e>
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	b01d      	add	sp, #116	@ 0x74
 80041e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e6:	89ab      	ldrh	r3, [r5, #12]
 80041e8:	0598      	lsls	r0, r3, #22
 80041ea:	d4f7      	bmi.n	80041dc <_vfiprintf_r+0x44>
 80041ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041ee:	f7ff feb3 	bl	8003f58 <__retarget_lock_release_recursive>
 80041f2:	e7f3      	b.n	80041dc <_vfiprintf_r+0x44>
 80041f4:	2300      	movs	r3, #0
 80041f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80041f8:	2320      	movs	r3, #32
 80041fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041fe:	2330      	movs	r3, #48	@ 0x30
 8004200:	f04f 0901 	mov.w	r9, #1
 8004204:	f8cd 800c 	str.w	r8, [sp, #12]
 8004208:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80043b4 <_vfiprintf_r+0x21c>
 800420c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004210:	4623      	mov	r3, r4
 8004212:	469a      	mov	sl, r3
 8004214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004218:	b10a      	cbz	r2, 800421e <_vfiprintf_r+0x86>
 800421a:	2a25      	cmp	r2, #37	@ 0x25
 800421c:	d1f9      	bne.n	8004212 <_vfiprintf_r+0x7a>
 800421e:	ebba 0b04 	subs.w	fp, sl, r4
 8004222:	d00b      	beq.n	800423c <_vfiprintf_r+0xa4>
 8004224:	465b      	mov	r3, fp
 8004226:	4622      	mov	r2, r4
 8004228:	4629      	mov	r1, r5
 800422a:	4630      	mov	r0, r6
 800422c:	f7ff ffa1 	bl	8004172 <__sfputs_r>
 8004230:	3001      	adds	r0, #1
 8004232:	f000 80a7 	beq.w	8004384 <_vfiprintf_r+0x1ec>
 8004236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004238:	445a      	add	r2, fp
 800423a:	9209      	str	r2, [sp, #36]	@ 0x24
 800423c:	f89a 3000 	ldrb.w	r3, [sl]
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 809f 	beq.w	8004384 <_vfiprintf_r+0x1ec>
 8004246:	2300      	movs	r3, #0
 8004248:	f04f 32ff 	mov.w	r2, #4294967295
 800424c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004250:	f10a 0a01 	add.w	sl, sl, #1
 8004254:	9304      	str	r3, [sp, #16]
 8004256:	9307      	str	r3, [sp, #28]
 8004258:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800425c:	931a      	str	r3, [sp, #104]	@ 0x68
 800425e:	4654      	mov	r4, sl
 8004260:	2205      	movs	r2, #5
 8004262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004266:	4853      	ldr	r0, [pc, #332]	@ (80043b4 <_vfiprintf_r+0x21c>)
 8004268:	f000 fb7a 	bl	8004960 <memchr>
 800426c:	9a04      	ldr	r2, [sp, #16]
 800426e:	b9d8      	cbnz	r0, 80042a8 <_vfiprintf_r+0x110>
 8004270:	06d1      	lsls	r1, r2, #27
 8004272:	bf44      	itt	mi
 8004274:	2320      	movmi	r3, #32
 8004276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800427a:	0713      	lsls	r3, r2, #28
 800427c:	bf44      	itt	mi
 800427e:	232b      	movmi	r3, #43	@ 0x2b
 8004280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004284:	f89a 3000 	ldrb.w	r3, [sl]
 8004288:	2b2a      	cmp	r3, #42	@ 0x2a
 800428a:	d015      	beq.n	80042b8 <_vfiprintf_r+0x120>
 800428c:	4654      	mov	r4, sl
 800428e:	2000      	movs	r0, #0
 8004290:	f04f 0c0a 	mov.w	ip, #10
 8004294:	9a07      	ldr	r2, [sp, #28]
 8004296:	4621      	mov	r1, r4
 8004298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800429c:	3b30      	subs	r3, #48	@ 0x30
 800429e:	2b09      	cmp	r3, #9
 80042a0:	d94b      	bls.n	800433a <_vfiprintf_r+0x1a2>
 80042a2:	b1b0      	cbz	r0, 80042d2 <_vfiprintf_r+0x13a>
 80042a4:	9207      	str	r2, [sp, #28]
 80042a6:	e014      	b.n	80042d2 <_vfiprintf_r+0x13a>
 80042a8:	eba0 0308 	sub.w	r3, r0, r8
 80042ac:	fa09 f303 	lsl.w	r3, r9, r3
 80042b0:	4313      	orrs	r3, r2
 80042b2:	46a2      	mov	sl, r4
 80042b4:	9304      	str	r3, [sp, #16]
 80042b6:	e7d2      	b.n	800425e <_vfiprintf_r+0xc6>
 80042b8:	9b03      	ldr	r3, [sp, #12]
 80042ba:	1d19      	adds	r1, r3, #4
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	9103      	str	r1, [sp, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bfbb      	ittet	lt
 80042c4:	425b      	neglt	r3, r3
 80042c6:	f042 0202 	orrlt.w	r2, r2, #2
 80042ca:	9307      	strge	r3, [sp, #28]
 80042cc:	9307      	strlt	r3, [sp, #28]
 80042ce:	bfb8      	it	lt
 80042d0:	9204      	strlt	r2, [sp, #16]
 80042d2:	7823      	ldrb	r3, [r4, #0]
 80042d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80042d6:	d10a      	bne.n	80042ee <_vfiprintf_r+0x156>
 80042d8:	7863      	ldrb	r3, [r4, #1]
 80042da:	2b2a      	cmp	r3, #42	@ 0x2a
 80042dc:	d132      	bne.n	8004344 <_vfiprintf_r+0x1ac>
 80042de:	9b03      	ldr	r3, [sp, #12]
 80042e0:	3402      	adds	r4, #2
 80042e2:	1d1a      	adds	r2, r3, #4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	9203      	str	r2, [sp, #12]
 80042e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042ec:	9305      	str	r3, [sp, #20]
 80042ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80043b8 <_vfiprintf_r+0x220>
 80042f2:	2203      	movs	r2, #3
 80042f4:	4650      	mov	r0, sl
 80042f6:	7821      	ldrb	r1, [r4, #0]
 80042f8:	f000 fb32 	bl	8004960 <memchr>
 80042fc:	b138      	cbz	r0, 800430e <_vfiprintf_r+0x176>
 80042fe:	2240      	movs	r2, #64	@ 0x40
 8004300:	9b04      	ldr	r3, [sp, #16]
 8004302:	eba0 000a 	sub.w	r0, r0, sl
 8004306:	4082      	lsls	r2, r0
 8004308:	4313      	orrs	r3, r2
 800430a:	3401      	adds	r4, #1
 800430c:	9304      	str	r3, [sp, #16]
 800430e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004312:	2206      	movs	r2, #6
 8004314:	4829      	ldr	r0, [pc, #164]	@ (80043bc <_vfiprintf_r+0x224>)
 8004316:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800431a:	f000 fb21 	bl	8004960 <memchr>
 800431e:	2800      	cmp	r0, #0
 8004320:	d03f      	beq.n	80043a2 <_vfiprintf_r+0x20a>
 8004322:	4b27      	ldr	r3, [pc, #156]	@ (80043c0 <_vfiprintf_r+0x228>)
 8004324:	bb1b      	cbnz	r3, 800436e <_vfiprintf_r+0x1d6>
 8004326:	9b03      	ldr	r3, [sp, #12]
 8004328:	3307      	adds	r3, #7
 800432a:	f023 0307 	bic.w	r3, r3, #7
 800432e:	3308      	adds	r3, #8
 8004330:	9303      	str	r3, [sp, #12]
 8004332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004334:	443b      	add	r3, r7
 8004336:	9309      	str	r3, [sp, #36]	@ 0x24
 8004338:	e76a      	b.n	8004210 <_vfiprintf_r+0x78>
 800433a:	460c      	mov	r4, r1
 800433c:	2001      	movs	r0, #1
 800433e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004342:	e7a8      	b.n	8004296 <_vfiprintf_r+0xfe>
 8004344:	2300      	movs	r3, #0
 8004346:	f04f 0c0a 	mov.w	ip, #10
 800434a:	4619      	mov	r1, r3
 800434c:	3401      	adds	r4, #1
 800434e:	9305      	str	r3, [sp, #20]
 8004350:	4620      	mov	r0, r4
 8004352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004356:	3a30      	subs	r2, #48	@ 0x30
 8004358:	2a09      	cmp	r2, #9
 800435a:	d903      	bls.n	8004364 <_vfiprintf_r+0x1cc>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0c6      	beq.n	80042ee <_vfiprintf_r+0x156>
 8004360:	9105      	str	r1, [sp, #20]
 8004362:	e7c4      	b.n	80042ee <_vfiprintf_r+0x156>
 8004364:	4604      	mov	r4, r0
 8004366:	2301      	movs	r3, #1
 8004368:	fb0c 2101 	mla	r1, ip, r1, r2
 800436c:	e7f0      	b.n	8004350 <_vfiprintf_r+0x1b8>
 800436e:	ab03      	add	r3, sp, #12
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	462a      	mov	r2, r5
 8004374:	4630      	mov	r0, r6
 8004376:	4b13      	ldr	r3, [pc, #76]	@ (80043c4 <_vfiprintf_r+0x22c>)
 8004378:	a904      	add	r1, sp, #16
 800437a:	f3af 8000 	nop.w
 800437e:	4607      	mov	r7, r0
 8004380:	1c78      	adds	r0, r7, #1
 8004382:	d1d6      	bne.n	8004332 <_vfiprintf_r+0x19a>
 8004384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004386:	07d9      	lsls	r1, r3, #31
 8004388:	d405      	bmi.n	8004396 <_vfiprintf_r+0x1fe>
 800438a:	89ab      	ldrh	r3, [r5, #12]
 800438c:	059a      	lsls	r2, r3, #22
 800438e:	d402      	bmi.n	8004396 <_vfiprintf_r+0x1fe>
 8004390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004392:	f7ff fde1 	bl	8003f58 <__retarget_lock_release_recursive>
 8004396:	89ab      	ldrh	r3, [r5, #12]
 8004398:	065b      	lsls	r3, r3, #25
 800439a:	f53f af1f 	bmi.w	80041dc <_vfiprintf_r+0x44>
 800439e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043a0:	e71e      	b.n	80041e0 <_vfiprintf_r+0x48>
 80043a2:	ab03      	add	r3, sp, #12
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	462a      	mov	r2, r5
 80043a8:	4630      	mov	r0, r6
 80043aa:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <_vfiprintf_r+0x22c>)
 80043ac:	a904      	add	r1, sp, #16
 80043ae:	f000 f87d 	bl	80044ac <_printf_i>
 80043b2:	e7e4      	b.n	800437e <_vfiprintf_r+0x1e6>
 80043b4:	08004a1e 	.word	0x08004a1e
 80043b8:	08004a24 	.word	0x08004a24
 80043bc:	08004a28 	.word	0x08004a28
 80043c0:	00000000 	.word	0x00000000
 80043c4:	08004173 	.word	0x08004173

080043c8 <_printf_common>:
 80043c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043cc:	4616      	mov	r6, r2
 80043ce:	4698      	mov	r8, r3
 80043d0:	688a      	ldr	r2, [r1, #8]
 80043d2:	690b      	ldr	r3, [r1, #16]
 80043d4:	4607      	mov	r7, r0
 80043d6:	4293      	cmp	r3, r2
 80043d8:	bfb8      	it	lt
 80043da:	4613      	movlt	r3, r2
 80043dc:	6033      	str	r3, [r6, #0]
 80043de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043e2:	460c      	mov	r4, r1
 80043e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043e8:	b10a      	cbz	r2, 80043ee <_printf_common+0x26>
 80043ea:	3301      	adds	r3, #1
 80043ec:	6033      	str	r3, [r6, #0]
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	0699      	lsls	r1, r3, #26
 80043f2:	bf42      	ittt	mi
 80043f4:	6833      	ldrmi	r3, [r6, #0]
 80043f6:	3302      	addmi	r3, #2
 80043f8:	6033      	strmi	r3, [r6, #0]
 80043fa:	6825      	ldr	r5, [r4, #0]
 80043fc:	f015 0506 	ands.w	r5, r5, #6
 8004400:	d106      	bne.n	8004410 <_printf_common+0x48>
 8004402:	f104 0a19 	add.w	sl, r4, #25
 8004406:	68e3      	ldr	r3, [r4, #12]
 8004408:	6832      	ldr	r2, [r6, #0]
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	42ab      	cmp	r3, r5
 800440e:	dc2b      	bgt.n	8004468 <_printf_common+0xa0>
 8004410:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004414:	6822      	ldr	r2, [r4, #0]
 8004416:	3b00      	subs	r3, #0
 8004418:	bf18      	it	ne
 800441a:	2301      	movne	r3, #1
 800441c:	0692      	lsls	r2, r2, #26
 800441e:	d430      	bmi.n	8004482 <_printf_common+0xba>
 8004420:	4641      	mov	r1, r8
 8004422:	4638      	mov	r0, r7
 8004424:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004428:	47c8      	blx	r9
 800442a:	3001      	adds	r0, #1
 800442c:	d023      	beq.n	8004476 <_printf_common+0xae>
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	6922      	ldr	r2, [r4, #16]
 8004432:	f003 0306 	and.w	r3, r3, #6
 8004436:	2b04      	cmp	r3, #4
 8004438:	bf14      	ite	ne
 800443a:	2500      	movne	r5, #0
 800443c:	6833      	ldreq	r3, [r6, #0]
 800443e:	f04f 0600 	mov.w	r6, #0
 8004442:	bf08      	it	eq
 8004444:	68e5      	ldreq	r5, [r4, #12]
 8004446:	f104 041a 	add.w	r4, r4, #26
 800444a:	bf08      	it	eq
 800444c:	1aed      	subeq	r5, r5, r3
 800444e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004452:	bf08      	it	eq
 8004454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004458:	4293      	cmp	r3, r2
 800445a:	bfc4      	itt	gt
 800445c:	1a9b      	subgt	r3, r3, r2
 800445e:	18ed      	addgt	r5, r5, r3
 8004460:	42b5      	cmp	r5, r6
 8004462:	d11a      	bne.n	800449a <_printf_common+0xd2>
 8004464:	2000      	movs	r0, #0
 8004466:	e008      	b.n	800447a <_printf_common+0xb2>
 8004468:	2301      	movs	r3, #1
 800446a:	4652      	mov	r2, sl
 800446c:	4641      	mov	r1, r8
 800446e:	4638      	mov	r0, r7
 8004470:	47c8      	blx	r9
 8004472:	3001      	adds	r0, #1
 8004474:	d103      	bne.n	800447e <_printf_common+0xb6>
 8004476:	f04f 30ff 	mov.w	r0, #4294967295
 800447a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800447e:	3501      	adds	r5, #1
 8004480:	e7c1      	b.n	8004406 <_printf_common+0x3e>
 8004482:	2030      	movs	r0, #48	@ 0x30
 8004484:	18e1      	adds	r1, r4, r3
 8004486:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004490:	4422      	add	r2, r4
 8004492:	3302      	adds	r3, #2
 8004494:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004498:	e7c2      	b.n	8004420 <_printf_common+0x58>
 800449a:	2301      	movs	r3, #1
 800449c:	4622      	mov	r2, r4
 800449e:	4641      	mov	r1, r8
 80044a0:	4638      	mov	r0, r7
 80044a2:	47c8      	blx	r9
 80044a4:	3001      	adds	r0, #1
 80044a6:	d0e6      	beq.n	8004476 <_printf_common+0xae>
 80044a8:	3601      	adds	r6, #1
 80044aa:	e7d9      	b.n	8004460 <_printf_common+0x98>

080044ac <_printf_i>:
 80044ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044b0:	7e0f      	ldrb	r7, [r1, #24]
 80044b2:	4691      	mov	r9, r2
 80044b4:	2f78      	cmp	r7, #120	@ 0x78
 80044b6:	4680      	mov	r8, r0
 80044b8:	460c      	mov	r4, r1
 80044ba:	469a      	mov	sl, r3
 80044bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044c2:	d807      	bhi.n	80044d4 <_printf_i+0x28>
 80044c4:	2f62      	cmp	r7, #98	@ 0x62
 80044c6:	d80a      	bhi.n	80044de <_printf_i+0x32>
 80044c8:	2f00      	cmp	r7, #0
 80044ca:	f000 80d1 	beq.w	8004670 <_printf_i+0x1c4>
 80044ce:	2f58      	cmp	r7, #88	@ 0x58
 80044d0:	f000 80b8 	beq.w	8004644 <_printf_i+0x198>
 80044d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044dc:	e03a      	b.n	8004554 <_printf_i+0xa8>
 80044de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044e2:	2b15      	cmp	r3, #21
 80044e4:	d8f6      	bhi.n	80044d4 <_printf_i+0x28>
 80044e6:	a101      	add	r1, pc, #4	@ (adr r1, 80044ec <_printf_i+0x40>)
 80044e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044ec:	08004545 	.word	0x08004545
 80044f0:	08004559 	.word	0x08004559
 80044f4:	080044d5 	.word	0x080044d5
 80044f8:	080044d5 	.word	0x080044d5
 80044fc:	080044d5 	.word	0x080044d5
 8004500:	080044d5 	.word	0x080044d5
 8004504:	08004559 	.word	0x08004559
 8004508:	080044d5 	.word	0x080044d5
 800450c:	080044d5 	.word	0x080044d5
 8004510:	080044d5 	.word	0x080044d5
 8004514:	080044d5 	.word	0x080044d5
 8004518:	08004657 	.word	0x08004657
 800451c:	08004583 	.word	0x08004583
 8004520:	08004611 	.word	0x08004611
 8004524:	080044d5 	.word	0x080044d5
 8004528:	080044d5 	.word	0x080044d5
 800452c:	08004679 	.word	0x08004679
 8004530:	080044d5 	.word	0x080044d5
 8004534:	08004583 	.word	0x08004583
 8004538:	080044d5 	.word	0x080044d5
 800453c:	080044d5 	.word	0x080044d5
 8004540:	08004619 	.word	0x08004619
 8004544:	6833      	ldr	r3, [r6, #0]
 8004546:	1d1a      	adds	r2, r3, #4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6032      	str	r2, [r6, #0]
 800454c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004550:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004554:	2301      	movs	r3, #1
 8004556:	e09c      	b.n	8004692 <_printf_i+0x1e6>
 8004558:	6833      	ldr	r3, [r6, #0]
 800455a:	6820      	ldr	r0, [r4, #0]
 800455c:	1d19      	adds	r1, r3, #4
 800455e:	6031      	str	r1, [r6, #0]
 8004560:	0606      	lsls	r6, r0, #24
 8004562:	d501      	bpl.n	8004568 <_printf_i+0xbc>
 8004564:	681d      	ldr	r5, [r3, #0]
 8004566:	e003      	b.n	8004570 <_printf_i+0xc4>
 8004568:	0645      	lsls	r5, r0, #25
 800456a:	d5fb      	bpl.n	8004564 <_printf_i+0xb8>
 800456c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004570:	2d00      	cmp	r5, #0
 8004572:	da03      	bge.n	800457c <_printf_i+0xd0>
 8004574:	232d      	movs	r3, #45	@ 0x2d
 8004576:	426d      	negs	r5, r5
 8004578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800457c:	230a      	movs	r3, #10
 800457e:	4858      	ldr	r0, [pc, #352]	@ (80046e0 <_printf_i+0x234>)
 8004580:	e011      	b.n	80045a6 <_printf_i+0xfa>
 8004582:	6821      	ldr	r1, [r4, #0]
 8004584:	6833      	ldr	r3, [r6, #0]
 8004586:	0608      	lsls	r0, r1, #24
 8004588:	f853 5b04 	ldr.w	r5, [r3], #4
 800458c:	d402      	bmi.n	8004594 <_printf_i+0xe8>
 800458e:	0649      	lsls	r1, r1, #25
 8004590:	bf48      	it	mi
 8004592:	b2ad      	uxthmi	r5, r5
 8004594:	2f6f      	cmp	r7, #111	@ 0x6f
 8004596:	6033      	str	r3, [r6, #0]
 8004598:	bf14      	ite	ne
 800459a:	230a      	movne	r3, #10
 800459c:	2308      	moveq	r3, #8
 800459e:	4850      	ldr	r0, [pc, #320]	@ (80046e0 <_printf_i+0x234>)
 80045a0:	2100      	movs	r1, #0
 80045a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045a6:	6866      	ldr	r6, [r4, #4]
 80045a8:	2e00      	cmp	r6, #0
 80045aa:	60a6      	str	r6, [r4, #8]
 80045ac:	db05      	blt.n	80045ba <_printf_i+0x10e>
 80045ae:	6821      	ldr	r1, [r4, #0]
 80045b0:	432e      	orrs	r6, r5
 80045b2:	f021 0104 	bic.w	r1, r1, #4
 80045b6:	6021      	str	r1, [r4, #0]
 80045b8:	d04b      	beq.n	8004652 <_printf_i+0x1a6>
 80045ba:	4616      	mov	r6, r2
 80045bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80045c0:	fb03 5711 	mls	r7, r3, r1, r5
 80045c4:	5dc7      	ldrb	r7, [r0, r7]
 80045c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045ca:	462f      	mov	r7, r5
 80045cc:	42bb      	cmp	r3, r7
 80045ce:	460d      	mov	r5, r1
 80045d0:	d9f4      	bls.n	80045bc <_printf_i+0x110>
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d10b      	bne.n	80045ee <_printf_i+0x142>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	07df      	lsls	r7, r3, #31
 80045da:	d508      	bpl.n	80045ee <_printf_i+0x142>
 80045dc:	6923      	ldr	r3, [r4, #16]
 80045de:	6861      	ldr	r1, [r4, #4]
 80045e0:	4299      	cmp	r1, r3
 80045e2:	bfde      	ittt	le
 80045e4:	2330      	movle	r3, #48	@ 0x30
 80045e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045ee:	1b92      	subs	r2, r2, r6
 80045f0:	6122      	str	r2, [r4, #16]
 80045f2:	464b      	mov	r3, r9
 80045f4:	4621      	mov	r1, r4
 80045f6:	4640      	mov	r0, r8
 80045f8:	f8cd a000 	str.w	sl, [sp]
 80045fc:	aa03      	add	r2, sp, #12
 80045fe:	f7ff fee3 	bl	80043c8 <_printf_common>
 8004602:	3001      	adds	r0, #1
 8004604:	d14a      	bne.n	800469c <_printf_i+0x1f0>
 8004606:	f04f 30ff 	mov.w	r0, #4294967295
 800460a:	b004      	add	sp, #16
 800460c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	f043 0320 	orr.w	r3, r3, #32
 8004616:	6023      	str	r3, [r4, #0]
 8004618:	2778      	movs	r7, #120	@ 0x78
 800461a:	4832      	ldr	r0, [pc, #200]	@ (80046e4 <_printf_i+0x238>)
 800461c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	6831      	ldr	r1, [r6, #0]
 8004624:	061f      	lsls	r7, r3, #24
 8004626:	f851 5b04 	ldr.w	r5, [r1], #4
 800462a:	d402      	bmi.n	8004632 <_printf_i+0x186>
 800462c:	065f      	lsls	r7, r3, #25
 800462e:	bf48      	it	mi
 8004630:	b2ad      	uxthmi	r5, r5
 8004632:	6031      	str	r1, [r6, #0]
 8004634:	07d9      	lsls	r1, r3, #31
 8004636:	bf44      	itt	mi
 8004638:	f043 0320 	orrmi.w	r3, r3, #32
 800463c:	6023      	strmi	r3, [r4, #0]
 800463e:	b11d      	cbz	r5, 8004648 <_printf_i+0x19c>
 8004640:	2310      	movs	r3, #16
 8004642:	e7ad      	b.n	80045a0 <_printf_i+0xf4>
 8004644:	4826      	ldr	r0, [pc, #152]	@ (80046e0 <_printf_i+0x234>)
 8004646:	e7e9      	b.n	800461c <_printf_i+0x170>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	f023 0320 	bic.w	r3, r3, #32
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	e7f6      	b.n	8004640 <_printf_i+0x194>
 8004652:	4616      	mov	r6, r2
 8004654:	e7bd      	b.n	80045d2 <_printf_i+0x126>
 8004656:	6833      	ldr	r3, [r6, #0]
 8004658:	6825      	ldr	r5, [r4, #0]
 800465a:	1d18      	adds	r0, r3, #4
 800465c:	6961      	ldr	r1, [r4, #20]
 800465e:	6030      	str	r0, [r6, #0]
 8004660:	062e      	lsls	r6, r5, #24
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	d501      	bpl.n	800466a <_printf_i+0x1be>
 8004666:	6019      	str	r1, [r3, #0]
 8004668:	e002      	b.n	8004670 <_printf_i+0x1c4>
 800466a:	0668      	lsls	r0, r5, #25
 800466c:	d5fb      	bpl.n	8004666 <_printf_i+0x1ba>
 800466e:	8019      	strh	r1, [r3, #0]
 8004670:	2300      	movs	r3, #0
 8004672:	4616      	mov	r6, r2
 8004674:	6123      	str	r3, [r4, #16]
 8004676:	e7bc      	b.n	80045f2 <_printf_i+0x146>
 8004678:	6833      	ldr	r3, [r6, #0]
 800467a:	2100      	movs	r1, #0
 800467c:	1d1a      	adds	r2, r3, #4
 800467e:	6032      	str	r2, [r6, #0]
 8004680:	681e      	ldr	r6, [r3, #0]
 8004682:	6862      	ldr	r2, [r4, #4]
 8004684:	4630      	mov	r0, r6
 8004686:	f000 f96b 	bl	8004960 <memchr>
 800468a:	b108      	cbz	r0, 8004690 <_printf_i+0x1e4>
 800468c:	1b80      	subs	r0, r0, r6
 800468e:	6060      	str	r0, [r4, #4]
 8004690:	6863      	ldr	r3, [r4, #4]
 8004692:	6123      	str	r3, [r4, #16]
 8004694:	2300      	movs	r3, #0
 8004696:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800469a:	e7aa      	b.n	80045f2 <_printf_i+0x146>
 800469c:	4632      	mov	r2, r6
 800469e:	4649      	mov	r1, r9
 80046a0:	4640      	mov	r0, r8
 80046a2:	6923      	ldr	r3, [r4, #16]
 80046a4:	47d0      	blx	sl
 80046a6:	3001      	adds	r0, #1
 80046a8:	d0ad      	beq.n	8004606 <_printf_i+0x15a>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	079b      	lsls	r3, r3, #30
 80046ae:	d413      	bmi.n	80046d8 <_printf_i+0x22c>
 80046b0:	68e0      	ldr	r0, [r4, #12]
 80046b2:	9b03      	ldr	r3, [sp, #12]
 80046b4:	4298      	cmp	r0, r3
 80046b6:	bfb8      	it	lt
 80046b8:	4618      	movlt	r0, r3
 80046ba:	e7a6      	b.n	800460a <_printf_i+0x15e>
 80046bc:	2301      	movs	r3, #1
 80046be:	4632      	mov	r2, r6
 80046c0:	4649      	mov	r1, r9
 80046c2:	4640      	mov	r0, r8
 80046c4:	47d0      	blx	sl
 80046c6:	3001      	adds	r0, #1
 80046c8:	d09d      	beq.n	8004606 <_printf_i+0x15a>
 80046ca:	3501      	adds	r5, #1
 80046cc:	68e3      	ldr	r3, [r4, #12]
 80046ce:	9903      	ldr	r1, [sp, #12]
 80046d0:	1a5b      	subs	r3, r3, r1
 80046d2:	42ab      	cmp	r3, r5
 80046d4:	dcf2      	bgt.n	80046bc <_printf_i+0x210>
 80046d6:	e7eb      	b.n	80046b0 <_printf_i+0x204>
 80046d8:	2500      	movs	r5, #0
 80046da:	f104 0619 	add.w	r6, r4, #25
 80046de:	e7f5      	b.n	80046cc <_printf_i+0x220>
 80046e0:	08004a2f 	.word	0x08004a2f
 80046e4:	08004a40 	.word	0x08004a40

080046e8 <__sflush_r>:
 80046e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	0716      	lsls	r6, r2, #28
 80046f0:	4605      	mov	r5, r0
 80046f2:	460c      	mov	r4, r1
 80046f4:	d454      	bmi.n	80047a0 <__sflush_r+0xb8>
 80046f6:	684b      	ldr	r3, [r1, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	dc02      	bgt.n	8004702 <__sflush_r+0x1a>
 80046fc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	dd48      	ble.n	8004794 <__sflush_r+0xac>
 8004702:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004704:	2e00      	cmp	r6, #0
 8004706:	d045      	beq.n	8004794 <__sflush_r+0xac>
 8004708:	2300      	movs	r3, #0
 800470a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800470e:	682f      	ldr	r7, [r5, #0]
 8004710:	6a21      	ldr	r1, [r4, #32]
 8004712:	602b      	str	r3, [r5, #0]
 8004714:	d030      	beq.n	8004778 <__sflush_r+0x90>
 8004716:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	0759      	lsls	r1, r3, #29
 800471c:	d505      	bpl.n	800472a <__sflush_r+0x42>
 800471e:	6863      	ldr	r3, [r4, #4]
 8004720:	1ad2      	subs	r2, r2, r3
 8004722:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004724:	b10b      	cbz	r3, 800472a <__sflush_r+0x42>
 8004726:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004728:	1ad2      	subs	r2, r2, r3
 800472a:	2300      	movs	r3, #0
 800472c:	4628      	mov	r0, r5
 800472e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004730:	6a21      	ldr	r1, [r4, #32]
 8004732:	47b0      	blx	r6
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	d106      	bne.n	8004748 <__sflush_r+0x60>
 800473a:	6829      	ldr	r1, [r5, #0]
 800473c:	291d      	cmp	r1, #29
 800473e:	d82b      	bhi.n	8004798 <__sflush_r+0xb0>
 8004740:	4a28      	ldr	r2, [pc, #160]	@ (80047e4 <__sflush_r+0xfc>)
 8004742:	40ca      	lsrs	r2, r1
 8004744:	07d6      	lsls	r6, r2, #31
 8004746:	d527      	bpl.n	8004798 <__sflush_r+0xb0>
 8004748:	2200      	movs	r2, #0
 800474a:	6062      	str	r2, [r4, #4]
 800474c:	6922      	ldr	r2, [r4, #16]
 800474e:	04d9      	lsls	r1, r3, #19
 8004750:	6022      	str	r2, [r4, #0]
 8004752:	d504      	bpl.n	800475e <__sflush_r+0x76>
 8004754:	1c42      	adds	r2, r0, #1
 8004756:	d101      	bne.n	800475c <__sflush_r+0x74>
 8004758:	682b      	ldr	r3, [r5, #0]
 800475a:	b903      	cbnz	r3, 800475e <__sflush_r+0x76>
 800475c:	6560      	str	r0, [r4, #84]	@ 0x54
 800475e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004760:	602f      	str	r7, [r5, #0]
 8004762:	b1b9      	cbz	r1, 8004794 <__sflush_r+0xac>
 8004764:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004768:	4299      	cmp	r1, r3
 800476a:	d002      	beq.n	8004772 <__sflush_r+0x8a>
 800476c:	4628      	mov	r0, r5
 800476e:	f7ff fbf5 	bl	8003f5c <_free_r>
 8004772:	2300      	movs	r3, #0
 8004774:	6363      	str	r3, [r4, #52]	@ 0x34
 8004776:	e00d      	b.n	8004794 <__sflush_r+0xac>
 8004778:	2301      	movs	r3, #1
 800477a:	4628      	mov	r0, r5
 800477c:	47b0      	blx	r6
 800477e:	4602      	mov	r2, r0
 8004780:	1c50      	adds	r0, r2, #1
 8004782:	d1c9      	bne.n	8004718 <__sflush_r+0x30>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0c6      	beq.n	8004718 <__sflush_r+0x30>
 800478a:	2b1d      	cmp	r3, #29
 800478c:	d001      	beq.n	8004792 <__sflush_r+0xaa>
 800478e:	2b16      	cmp	r3, #22
 8004790:	d11d      	bne.n	80047ce <__sflush_r+0xe6>
 8004792:	602f      	str	r7, [r5, #0]
 8004794:	2000      	movs	r0, #0
 8004796:	e021      	b.n	80047dc <__sflush_r+0xf4>
 8004798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800479c:	b21b      	sxth	r3, r3
 800479e:	e01a      	b.n	80047d6 <__sflush_r+0xee>
 80047a0:	690f      	ldr	r7, [r1, #16]
 80047a2:	2f00      	cmp	r7, #0
 80047a4:	d0f6      	beq.n	8004794 <__sflush_r+0xac>
 80047a6:	0793      	lsls	r3, r2, #30
 80047a8:	bf18      	it	ne
 80047aa:	2300      	movne	r3, #0
 80047ac:	680e      	ldr	r6, [r1, #0]
 80047ae:	bf08      	it	eq
 80047b0:	694b      	ldreq	r3, [r1, #20]
 80047b2:	1bf6      	subs	r6, r6, r7
 80047b4:	600f      	str	r7, [r1, #0]
 80047b6:	608b      	str	r3, [r1, #8]
 80047b8:	2e00      	cmp	r6, #0
 80047ba:	ddeb      	ble.n	8004794 <__sflush_r+0xac>
 80047bc:	4633      	mov	r3, r6
 80047be:	463a      	mov	r2, r7
 80047c0:	4628      	mov	r0, r5
 80047c2:	6a21      	ldr	r1, [r4, #32]
 80047c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80047c8:	47e0      	blx	ip
 80047ca:	2800      	cmp	r0, #0
 80047cc:	dc07      	bgt.n	80047de <__sflush_r+0xf6>
 80047ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047d6:	f04f 30ff 	mov.w	r0, #4294967295
 80047da:	81a3      	strh	r3, [r4, #12]
 80047dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047de:	4407      	add	r7, r0
 80047e0:	1a36      	subs	r6, r6, r0
 80047e2:	e7e9      	b.n	80047b8 <__sflush_r+0xd0>
 80047e4:	20400001 	.word	0x20400001

080047e8 <_fflush_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	690b      	ldr	r3, [r1, #16]
 80047ec:	4605      	mov	r5, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	b913      	cbnz	r3, 80047f8 <_fflush_r+0x10>
 80047f2:	2500      	movs	r5, #0
 80047f4:	4628      	mov	r0, r5
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	b118      	cbz	r0, 8004802 <_fflush_r+0x1a>
 80047fa:	6a03      	ldr	r3, [r0, #32]
 80047fc:	b90b      	cbnz	r3, 8004802 <_fflush_r+0x1a>
 80047fe:	f7ff f9b3 	bl	8003b68 <__sinit>
 8004802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f3      	beq.n	80047f2 <_fflush_r+0xa>
 800480a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800480c:	07d0      	lsls	r0, r2, #31
 800480e:	d404      	bmi.n	800481a <_fflush_r+0x32>
 8004810:	0599      	lsls	r1, r3, #22
 8004812:	d402      	bmi.n	800481a <_fflush_r+0x32>
 8004814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004816:	f7ff fb9e 	bl	8003f56 <__retarget_lock_acquire_recursive>
 800481a:	4628      	mov	r0, r5
 800481c:	4621      	mov	r1, r4
 800481e:	f7ff ff63 	bl	80046e8 <__sflush_r>
 8004822:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004824:	4605      	mov	r5, r0
 8004826:	07da      	lsls	r2, r3, #31
 8004828:	d4e4      	bmi.n	80047f4 <_fflush_r+0xc>
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	059b      	lsls	r3, r3, #22
 800482e:	d4e1      	bmi.n	80047f4 <_fflush_r+0xc>
 8004830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004832:	f7ff fb91 	bl	8003f58 <__retarget_lock_release_recursive>
 8004836:	e7dd      	b.n	80047f4 <_fflush_r+0xc>

08004838 <__swhatbuf_r>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	460c      	mov	r4, r1
 800483c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004840:	4615      	mov	r5, r2
 8004842:	2900      	cmp	r1, #0
 8004844:	461e      	mov	r6, r3
 8004846:	b096      	sub	sp, #88	@ 0x58
 8004848:	da0c      	bge.n	8004864 <__swhatbuf_r+0x2c>
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	2100      	movs	r1, #0
 800484e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004852:	bf14      	ite	ne
 8004854:	2340      	movne	r3, #64	@ 0x40
 8004856:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800485a:	2000      	movs	r0, #0
 800485c:	6031      	str	r1, [r6, #0]
 800485e:	602b      	str	r3, [r5, #0]
 8004860:	b016      	add	sp, #88	@ 0x58
 8004862:	bd70      	pop	{r4, r5, r6, pc}
 8004864:	466a      	mov	r2, sp
 8004866:	f000 f849 	bl	80048fc <_fstat_r>
 800486a:	2800      	cmp	r0, #0
 800486c:	dbed      	blt.n	800484a <__swhatbuf_r+0x12>
 800486e:	9901      	ldr	r1, [sp, #4]
 8004870:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004874:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004878:	4259      	negs	r1, r3
 800487a:	4159      	adcs	r1, r3
 800487c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004880:	e7eb      	b.n	800485a <__swhatbuf_r+0x22>

08004882 <__smakebuf_r>:
 8004882:	898b      	ldrh	r3, [r1, #12]
 8004884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004886:	079d      	lsls	r5, r3, #30
 8004888:	4606      	mov	r6, r0
 800488a:	460c      	mov	r4, r1
 800488c:	d507      	bpl.n	800489e <__smakebuf_r+0x1c>
 800488e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004892:	6023      	str	r3, [r4, #0]
 8004894:	6123      	str	r3, [r4, #16]
 8004896:	2301      	movs	r3, #1
 8004898:	6163      	str	r3, [r4, #20]
 800489a:	b003      	add	sp, #12
 800489c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800489e:	466a      	mov	r2, sp
 80048a0:	ab01      	add	r3, sp, #4
 80048a2:	f7ff ffc9 	bl	8004838 <__swhatbuf_r>
 80048a6:	9f00      	ldr	r7, [sp, #0]
 80048a8:	4605      	mov	r5, r0
 80048aa:	4639      	mov	r1, r7
 80048ac:	4630      	mov	r0, r6
 80048ae:	f7ff fbbf 	bl	8004030 <_malloc_r>
 80048b2:	b948      	cbnz	r0, 80048c8 <__smakebuf_r+0x46>
 80048b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b8:	059a      	lsls	r2, r3, #22
 80048ba:	d4ee      	bmi.n	800489a <__smakebuf_r+0x18>
 80048bc:	f023 0303 	bic.w	r3, r3, #3
 80048c0:	f043 0302 	orr.w	r3, r3, #2
 80048c4:	81a3      	strh	r3, [r4, #12]
 80048c6:	e7e2      	b.n	800488e <__smakebuf_r+0xc>
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80048ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d2:	81a3      	strh	r3, [r4, #12]
 80048d4:	9b01      	ldr	r3, [sp, #4]
 80048d6:	6020      	str	r0, [r4, #0]
 80048d8:	b15b      	cbz	r3, 80048f2 <__smakebuf_r+0x70>
 80048da:	4630      	mov	r0, r6
 80048dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048e0:	f000 f81e 	bl	8004920 <_isatty_r>
 80048e4:	b128      	cbz	r0, 80048f2 <__smakebuf_r+0x70>
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	f023 0303 	bic.w	r3, r3, #3
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	81a3      	strh	r3, [r4, #12]
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	431d      	orrs	r5, r3
 80048f6:	81a5      	strh	r5, [r4, #12]
 80048f8:	e7cf      	b.n	800489a <__smakebuf_r+0x18>
	...

080048fc <_fstat_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	2300      	movs	r3, #0
 8004900:	4d06      	ldr	r5, [pc, #24]	@ (800491c <_fstat_r+0x20>)
 8004902:	4604      	mov	r4, r0
 8004904:	4608      	mov	r0, r1
 8004906:	4611      	mov	r1, r2
 8004908:	602b      	str	r3, [r5, #0]
 800490a:	f7fc fa37 	bl	8000d7c <_fstat>
 800490e:	1c43      	adds	r3, r0, #1
 8004910:	d102      	bne.n	8004918 <_fstat_r+0x1c>
 8004912:	682b      	ldr	r3, [r5, #0]
 8004914:	b103      	cbz	r3, 8004918 <_fstat_r+0x1c>
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	bd38      	pop	{r3, r4, r5, pc}
 800491a:	bf00      	nop
 800491c:	200005a4 	.word	0x200005a4

08004920 <_isatty_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	2300      	movs	r3, #0
 8004924:	4d05      	ldr	r5, [pc, #20]	@ (800493c <_isatty_r+0x1c>)
 8004926:	4604      	mov	r4, r0
 8004928:	4608      	mov	r0, r1
 800492a:	602b      	str	r3, [r5, #0]
 800492c:	f7fc fa35 	bl	8000d9a <_isatty>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_isatty_r+0x1a>
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	b103      	cbz	r3, 800493a <_isatty_r+0x1a>
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	200005a4 	.word	0x200005a4

08004940 <_sbrk_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	2300      	movs	r3, #0
 8004944:	4d05      	ldr	r5, [pc, #20]	@ (800495c <_sbrk_r+0x1c>)
 8004946:	4604      	mov	r4, r0
 8004948:	4608      	mov	r0, r1
 800494a:	602b      	str	r3, [r5, #0]
 800494c:	f7fc fa3c 	bl	8000dc8 <_sbrk>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	d102      	bne.n	800495a <_sbrk_r+0x1a>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	b103      	cbz	r3, 800495a <_sbrk_r+0x1a>
 8004958:	6023      	str	r3, [r4, #0]
 800495a:	bd38      	pop	{r3, r4, r5, pc}
 800495c:	200005a4 	.word	0x200005a4

08004960 <memchr>:
 8004960:	4603      	mov	r3, r0
 8004962:	b510      	push	{r4, lr}
 8004964:	b2c9      	uxtb	r1, r1
 8004966:	4402      	add	r2, r0
 8004968:	4293      	cmp	r3, r2
 800496a:	4618      	mov	r0, r3
 800496c:	d101      	bne.n	8004972 <memchr+0x12>
 800496e:	2000      	movs	r0, #0
 8004970:	e003      	b.n	800497a <memchr+0x1a>
 8004972:	7804      	ldrb	r4, [r0, #0]
 8004974:	3301      	adds	r3, #1
 8004976:	428c      	cmp	r4, r1
 8004978:	d1f6      	bne.n	8004968 <memchr+0x8>
 800497a:	bd10      	pop	{r4, pc}

0800497c <_init>:
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	bf00      	nop
 8004980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004982:	bc08      	pop	{r3}
 8004984:	469e      	mov	lr, r3
 8004986:	4770      	bx	lr

08004988 <_fini>:
 8004988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498a:	bf00      	nop
 800498c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498e:	bc08      	pop	{r3}
 8004990:	469e      	mov	lr, r3
 8004992:	4770      	bx	lr
