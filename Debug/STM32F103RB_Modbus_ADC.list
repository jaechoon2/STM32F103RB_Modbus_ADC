
STM32F103RB_Modbus_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053ac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080054b8  080054b8  000064b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005578  08005578  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005578  08005578  00007068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005578  08005578  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005578  08005578  00006578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800557c  0800557c  0000657c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005580  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000068  080055e8  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  080055e8  00007544  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f43a  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b45  00000000  00000000  000164cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00019010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdf  00000000  00000000  00019f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c29  00000000  00000000  0001ab47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c20  00000000  00000000  00034770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000919e4  00000000  00000000  00047390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8d74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045fc  00000000  00000000  000d8db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000dd3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080054a0 	.word	0x080054a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080054a0 	.word	0x080054a0

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f001 f98f 	bl	80014ac <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fd7e 	bl	8000c94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000198:	2301      	movs	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f001 fc43 	bl	8001a34 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fd6e 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000084 	.word	0x20000084
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	@ 0x28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0318 	add.w	r3, r7, #24
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a2a      	ldr	r2, [pc, #168]	@ (800028c <HAL_ADC_MspInit+0xc4>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d14d      	bne.n	8000284 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b29      	ldr	r3, [pc, #164]	@ (8000290 <HAL_ADC_MspInit+0xc8>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a28      	ldr	r2, [pc, #160]	@ (8000290 <HAL_ADC_MspInit+0xc8>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b26      	ldr	r3, [pc, #152]	@ (8000290 <HAL_ADC_MspInit+0xc8>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80001fc:	617b      	str	r3, [r7, #20]
 80001fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000200:	4b23      	ldr	r3, [pc, #140]	@ (8000290 <HAL_ADC_MspInit+0xc8>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a22      	ldr	r2, [pc, #136]	@ (8000290 <HAL_ADC_MspInit+0xc8>)
 8000206:	f043 0310 	orr.w	r3, r3, #16
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b20      	ldr	r3, [pc, #128]	@ (8000290 <HAL_ADC_MspInit+0xc8>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0310 	and.w	r3, r3, #16
 8000214:	613b      	str	r3, [r7, #16]
 8000216:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000218:	4b1d      	ldr	r3, [pc, #116]	@ (8000290 <HAL_ADC_MspInit+0xc8>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a1c      	ldr	r2, [pc, #112]	@ (8000290 <HAL_ADC_MspInit+0xc8>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6193      	str	r3, [r2, #24]
 8000224:	4b1a      	ldr	r3, [pc, #104]	@ (8000290 <HAL_ADC_MspInit+0xc8>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	f003 0304 	and.w	r3, r3, #4
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000230:	4b17      	ldr	r3, [pc, #92]	@ (8000290 <HAL_ADC_MspInit+0xc8>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a16      	ldr	r2, [pc, #88]	@ (8000290 <HAL_ADC_MspInit+0xc8>)
 8000236:	f043 0308 	orr.w	r3, r3, #8
 800023a:	6193      	str	r3, [r2, #24]
 800023c:	4b14      	ldr	r3, [pc, #80]	@ (8000290 <HAL_ADC_MspInit+0xc8>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	f003 0308 	and.w	r3, r3, #8
 8000244:	60bb      	str	r3, [r7, #8]
 8000246:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000248:	230f      	movs	r3, #15
 800024a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800024c:	2303      	movs	r3, #3
 800024e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000250:	f107 0318 	add.w	r3, r7, #24
 8000254:	4619      	mov	r1, r3
 8000256:	480f      	ldr	r0, [pc, #60]	@ (8000294 <HAL_ADC_MspInit+0xcc>)
 8000258:	f001 fffa 	bl	8002250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800025c:	23d2      	movs	r3, #210	@ 0xd2
 800025e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000260:	2303      	movs	r3, #3
 8000262:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000264:	f107 0318 	add.w	r3, r7, #24
 8000268:	4619      	mov	r1, r3
 800026a:	480b      	ldr	r0, [pc, #44]	@ (8000298 <HAL_ADC_MspInit+0xd0>)
 800026c:	f001 fff0 	bl	8002250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000270:	2303      	movs	r3, #3
 8000272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000274:	2303      	movs	r3, #3
 8000276:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4619      	mov	r1, r3
 800027e:	4807      	ldr	r0, [pc, #28]	@ (800029c <HAL_ADC_MspInit+0xd4>)
 8000280:	f001 ffe6 	bl	8002250 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000284:	bf00      	nop
 8000286:	3728      	adds	r7, #40	@ 0x28
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40012400 	.word	0x40012400
 8000290:	40021000 	.word	0x40021000
 8000294:	40011000 	.word	0x40011000
 8000298:	40010800 	.word	0x40010800
 800029c:	40010c00 	.word	0x40010c00

080002a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b088      	sub	sp, #32
 80002a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	f107 0310 	add.w	r3, r7, #16
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b4:	4b42      	ldr	r3, [pc, #264]	@ (80003c0 <MX_GPIO_Init+0x120>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a41      	ldr	r2, [pc, #260]	@ (80003c0 <MX_GPIO_Init+0x120>)
 80002ba:	f043 0310 	orr.w	r3, r3, #16
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b3f      	ldr	r3, [pc, #252]	@ (80003c0 <MX_GPIO_Init+0x120>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0310 	and.w	r3, r3, #16
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002cc:	4b3c      	ldr	r3, [pc, #240]	@ (80003c0 <MX_GPIO_Init+0x120>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a3b      	ldr	r2, [pc, #236]	@ (80003c0 <MX_GPIO_Init+0x120>)
 80002d2:	f043 0320 	orr.w	r3, r3, #32
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b39      	ldr	r3, [pc, #228]	@ (80003c0 <MX_GPIO_Init+0x120>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0320 	and.w	r3, r3, #32
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	4b36      	ldr	r3, [pc, #216]	@ (80003c0 <MX_GPIO_Init+0x120>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a35      	ldr	r2, [pc, #212]	@ (80003c0 <MX_GPIO_Init+0x120>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b33      	ldr	r3, [pc, #204]	@ (80003c0 <MX_GPIO_Init+0x120>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b30      	ldr	r3, [pc, #192]	@ (80003c0 <MX_GPIO_Init+0x120>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a2f      	ldr	r2, [pc, #188]	@ (80003c0 <MX_GPIO_Init+0x120>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b2d      	ldr	r3, [pc, #180]	@ (80003c0 <MX_GPIO_Init+0x120>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	603b      	str	r3, [r7, #0]
 8000312:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	2120      	movs	r1, #32
 8000318:	482a      	ldr	r0, [pc, #168]	@ (80003c4 <MX_GPIO_Init+0x124>)
 800031a:	f002 f934 	bl	8002586 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RE_Pin|DE_Pin, GPIO_PIN_RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000324:	4828      	ldr	r0, [pc, #160]	@ (80003c8 <MX_GPIO_Init+0x128>)
 8000326:	f002 f92e 	bl	8002586 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000330:	4826      	ldr	r0, [pc, #152]	@ (80003cc <MX_GPIO_Init+0x12c>)
 8000332:	f002 f928 	bl	8002586 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000336:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800033a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800033c:	4b24      	ldr	r3, [pc, #144]	@ (80003d0 <MX_GPIO_Init+0x130>)
 800033e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000344:	f107 0310 	add.w	r3, r7, #16
 8000348:	4619      	mov	r1, r3
 800034a:	4820      	ldr	r0, [pc, #128]	@ (80003cc <MX_GPIO_Init+0x12c>)
 800034c:	f001 ff80 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000350:	2320      	movs	r3, #32
 8000352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000354:	2301      	movs	r3, #1
 8000356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035c:	2302      	movs	r3, #2
 800035e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000360:	f107 0310 	add.w	r3, r7, #16
 8000364:	4619      	mov	r1, r3
 8000366:	4817      	ldr	r0, [pc, #92]	@ (80003c4 <MX_GPIO_Init+0x124>)
 8000368:	f001 ff72 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : RE_Pin DE_Pin */
  GPIO_InitStruct.Pin = RE_Pin|DE_Pin;
 800036c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000372:	2301      	movs	r3, #1
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000376:	2301      	movs	r3, #1
 8000378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	2302      	movs	r3, #2
 800037c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	4619      	mov	r1, r3
 8000384:	4810      	ldr	r0, [pc, #64]	@ (80003c8 <MX_GPIO_Init+0x128>)
 8000386:	f001 ff63 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800038a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800038e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000390:	2301      	movs	r3, #1
 8000392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000398:	2302      	movs	r3, #2
 800039a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	480a      	ldr	r0, [pc, #40]	@ (80003cc <MX_GPIO_Init+0x12c>)
 80003a4:	f001 ff54 	bl	8002250 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2100      	movs	r1, #0
 80003ac:	2028      	movs	r0, #40	@ 0x28
 80003ae:	f001 fe66 	bl	800207e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003b2:	2028      	movs	r0, #40	@ 0x28
 80003b4:	f001 fe7f 	bl	80020b6 <HAL_NVIC_EnableIRQ>

}
 80003b8:	bf00      	nop
 80003ba:	3720      	adds	r7, #32
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010800 	.word	0x40010800
 80003c8:	40010c00 	.word	0x40010c00
 80003cc:	40011000 	.word	0x40011000
 80003d0:	10110000 	.word	0x10110000

080003d4 <RS485_TX_ENABLE>:

// --- RS485 제어 매크로 ---
// DE와 /RE 핀이 어떻게 연결되었는지 확인 필요.
// 일반적으로 DE와 /RE를 묶어서 하나의 핀으로 제어하는 경우가 많음 (예: PB13)
// 여기서는 DE(PB13), /RE(PB14) 개별 제어로 가정
void RS485_TX_ENABLE() {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
    // 전송 시작 전 DE High, /RE High (트랜시버에 따라 다를 수 있음, 데이터시트 확인!)
    HAL_GPIO_WritePin(GPIOB, DE_Pin, GPIO_PIN_RESET);     // DE High
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003de:	4805      	ldr	r0, [pc, #20]	@ (80003f4 <RS485_TX_ENABLE+0x20>)
 80003e0:	f002 f8d1 	bl	8002586 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, RE_Pin, GPIO_PIN_SET);     // /RE High (보통 DE와 반대거나 같음)
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003ea:	4802      	ldr	r0, [pc, #8]	@ (80003f4 <RS485_TX_ENABLE+0x20>)
 80003ec:	f002 f8cb 	bl	8002586 <HAL_GPIO_WritePin>
    // 짧은 지연시간 (필요시)
    // for(volatile int i=0; i<10; i++); // 매우 짧은 지연, 클럭 속도에 따라 조절
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40010c00 	.word	0x40010c00

080003f8 <RS485_RX_ENABLE>:

void RS485_RX_ENABLE() {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
    // 전송 완료 후 또는 평상시 DE Low, /RE Low
    // for(volatile int i=0; i<10; i++); // 전송 완료 보장 위한 짧은 지연 (필요시)
    HAL_GPIO_WritePin(GPIOB, DE_Pin, GPIO_PIN_SET);   // DE Low
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000402:	4805      	ldr	r0, [pc, #20]	@ (8000418 <RS485_RX_ENABLE+0x20>)
 8000404:	f002 f8bf 	bl	8002586 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, RE_Pin, GPIO_PIN_RESET);   // /RE Low
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800040e:	4802      	ldr	r0, [pc, #8]	@ (8000418 <RS485_RX_ENABLE+0x20>)
 8000410:	f002 f8b9 	bl	8002586 <HAL_GPIO_WritePin>
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40010c00 	.word	0x40010c00

0800041c <HAL_UART_RxCpltCallback>:


// --- UART 수신 콜백 (Modbus T3.5 타이머 연동) ---
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a13      	ldr	r2, [pc, #76]	@ (8000478 <HAL_UART_RxCpltCallback+0x5c>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d120      	bne.n	8000470 <HAL_UART_RxCpltCallback+0x54>
        // 수신 버퍼 오버플로우 방지
        if (ModbusReceiveIndex < MODBUS_BUFFER_SIZE) {
 800042e:	4b13      	ldr	r3, [pc, #76]	@ (800047c <HAL_UART_RxCpltCallback+0x60>)
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	b29b      	uxth	r3, r3
 8000434:	2bff      	cmp	r3, #255	@ 0xff
 8000436:	d813      	bhi.n	8000460 <HAL_UART_RxCpltCallback+0x44>
            ModbusReceiveBuffer[ModbusReceiveIndex++] = UART1_RxBuffer;
 8000438:	4b10      	ldr	r3, [pc, #64]	@ (800047c <HAL_UART_RxCpltCallback+0x60>)
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	b29b      	uxth	r3, r3
 800043e:	1c5a      	adds	r2, r3, #1
 8000440:	b291      	uxth	r1, r2
 8000442:	4a0e      	ldr	r2, [pc, #56]	@ (800047c <HAL_UART_RxCpltCallback+0x60>)
 8000444:	8011      	strh	r1, [r2, #0]
 8000446:	461a      	mov	r2, r3
 8000448:	4b0d      	ldr	r3, [pc, #52]	@ (8000480 <HAL_UART_RxCpltCallback+0x64>)
 800044a:	7819      	ldrb	r1, [r3, #0]
 800044c:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <HAL_UART_RxCpltCallback+0x68>)
 800044e:	5499      	strb	r1, [r3, r2]

            // T3.5 타이머 리셋 및 시작 (문자 수신 시마다 재시작)
            __HAL_TIM_SET_COUNTER(&htim2, 0); // 카운터 초기화
 8000450:	4b0d      	ldr	r3, [pc, #52]	@ (8000488 <HAL_UART_RxCpltCallback+0x6c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2200      	movs	r2, #0
 8000456:	625a      	str	r2, [r3, #36]	@ 0x24
            HAL_TIM_Base_Start_IT(&htim2);    // 타이머 시작 (One Pulse Mode 권장)
 8000458:	480b      	ldr	r0, [pc, #44]	@ (8000488 <HAL_UART_RxCpltCallback+0x6c>)
 800045a:	f002 feb3 	bl	80031c4 <HAL_TIM_Base_Start_IT>
 800045e:	e002      	b.n	8000466 <HAL_UART_RxCpltCallback+0x4a>
        } else {
            // 버퍼 오버플로우 처리 (예: 인덱스 초기화)
            ModbusReceiveIndex = 0;
 8000460:	4b06      	ldr	r3, [pc, #24]	@ (800047c <HAL_UART_RxCpltCallback+0x60>)
 8000462:	2200      	movs	r2, #0
 8000464:	801a      	strh	r2, [r3, #0]
            // 에러 로그 등
        }

        // 다음 1 바이트 수신 준비
        HAL_UART_Receive_IT(&huart1, &UART1_RxBuffer, 1);
 8000466:	2201      	movs	r2, #1
 8000468:	4905      	ldr	r1, [pc, #20]	@ (8000480 <HAL_UART_RxCpltCallback+0x64>)
 800046a:	4808      	ldr	r0, [pc, #32]	@ (800048c <HAL_UART_RxCpltCallback+0x70>)
 800046c:	f003 fad5 	bl	8003a1a <HAL_UART_Receive_IT>

    }
    // else if (huart->Instance == USART2) {
    //     // USART2 수신 처리 (printf용이면 보통 불필요)
    // }
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40013800 	.word	0x40013800
 800047c:	200001b6 	.word	0x200001b6
 8000480:	200001b4 	.word	0x200001b4
 8000484:	200000b4 	.word	0x200000b4
 8000488:	200002d4 	.word	0x200002d4
 800048c:	2000031c 	.word	0x2000031c

08000490 <ModbusCRC>:
        }
    }
}

// --- CRC 계산 함수 (기존 코드 유지) ---
uint16_t ModbusCRC(uint8_t *buf, int len) {
 8000490:	b480      	push	{r7}
 8000492:	b087      	sub	sp, #28
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 800049a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800049e:	82fb      	strh	r3, [r7, #22]
    for (int pos = 0; pos < len; pos++) {
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	e026      	b.n	80004f4 <ModbusCRC+0x64>
        crc ^= (uint16_t)buf[pos];
 80004a6:	693b      	ldr	r3, [r7, #16]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	4413      	add	r3, r2
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	461a      	mov	r2, r3
 80004b0:	8afb      	ldrh	r3, [r7, #22]
 80004b2:	4053      	eors	r3, r2
 80004b4:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--) {
 80004b6:	2308      	movs	r3, #8
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	e015      	b.n	80004e8 <ModbusCRC+0x58>
            if ((crc & 1) != 0) {
 80004bc:	8afb      	ldrh	r3, [r7, #22]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d00a      	beq.n	80004dc <ModbusCRC+0x4c>
                crc >>= 1;
 80004c6:	8afb      	ldrh	r3, [r7, #22]
 80004c8:	085b      	lsrs	r3, r3, #1
 80004ca:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 80004cc:	8afb      	ldrh	r3, [r7, #22]
 80004ce:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 80004d2:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 80004d6:	43db      	mvns	r3, r3
 80004d8:	82fb      	strh	r3, [r7, #22]
 80004da:	e002      	b.n	80004e2 <ModbusCRC+0x52>
            } else {
                crc >>= 1;
 80004dc:	8afb      	ldrh	r3, [r7, #22]
 80004de:	085b      	lsrs	r3, r3, #1
 80004e0:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--) {
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	3b01      	subs	r3, #1
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d1e6      	bne.n	80004bc <ModbusCRC+0x2c>
    for (int pos = 0; pos < len; pos++) {
 80004ee:	693b      	ldr	r3, [r7, #16]
 80004f0:	3301      	adds	r3, #1
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693a      	ldr	r2, [r7, #16]
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	dbd4      	blt.n	80004a6 <ModbusCRC+0x16>
            }
        }
    }
    // Modbus RTU는 LSB first, MSB last
    // return crc; // 이대로 반환하면 LSB가 먼저 나옴
     return (crc >> 8) | (crc << 8); // SWAP bytes for correct comparison/transmission
 80004fc:	8afb      	ldrh	r3, [r7, #22]
 80004fe:	0a1b      	lsrs	r3, r3, #8
 8000500:	b29b      	uxth	r3, r3
 8000502:	b21a      	sxth	r2, r3
 8000504:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000508:	021b      	lsls	r3, r3, #8
 800050a:	b21b      	sxth	r3, r3
 800050c:	4313      	orrs	r3, r2
 800050e:	b21b      	sxth	r3, r3
 8000510:	b29b      	uxth	r3, r3
}
 8000512:	4618      	mov	r0, r3
 8000514:	371c      	adds	r7, #28
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <ProcessModbusPacket>:

// --- Modbus 패킷 처리 함수 ---
void ProcessModbusPacket(uint8_t *buf, int len) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b0ca      	sub	sp, #296	@ 0x128
 8000520:	af00      	add	r7, sp, #0
 8000522:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000526:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800052a:	6018      	str	r0, [r3, #0]
 800052c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000530:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000534:	6019      	str	r1, [r3, #0]
    // 1. 최소 길이 확인 (SlaveID + FuncCode + CRC = 4 bytes)
    if (len < 4) {
 8000536:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800053a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b03      	cmp	r3, #3
 8000542:	f340 8201 	ble.w	8000948 <ProcessModbusPacket+0x42c>
        return; // 너무 짧은 패킷
    }

    // 2. 슬레이브 주소 확인
    uint8_t slaveAddress = buf[0];
 8000546:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800054a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (slaveAddress != SLAVE_ADDRESS) {
 8000556:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800055a:	2b01      	cmp	r3, #1
 800055c:	f040 81f6 	bne.w	800094c <ProcessModbusPacket+0x430>
        return; // 내 주소가 아님
    }

    // 3. CRC 확인 (수정: CRC 체크 활성화 및 바이트 순서 고려)
    uint16_t received_crc = (buf[len - 1] << 8) | buf[len - 2]; // MSB first in calculation
 8000560:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000564:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3b01      	subs	r3, #1
 800056c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000570:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8000574:	6812      	ldr	r2, [r2, #0]
 8000576:	4413      	add	r3, r2
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b21b      	sxth	r3, r3
 800057c:	021b      	lsls	r3, r3, #8
 800057e:	b21a      	sxth	r2, r3
 8000580:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000584:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3b02      	subs	r3, #2
 800058c:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8000590:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 8000594:	6809      	ldr	r1, [r1, #0]
 8000596:	440b      	add	r3, r1
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b21b      	sxth	r3, r3
 800059c:	4313      	orrs	r3, r2
 800059e:	b21b      	sxth	r3, r3
 80005a0:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
    uint16_t calculated_crc = ModbusCRC(buf, len - 2);
 80005a4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80005a8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	1e9a      	subs	r2, r3, #2
 80005b0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80005b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80005b8:	4611      	mov	r1, r2
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	f7ff ff68 	bl	8000490 <ModbusCRC>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    // calculated_crc = (calculated_crc >> 8) | (calculated_crc << 8); // SWAP bytes

    if (received_crc != calculated_crc) {
 80005c6:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 80005ca:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d008      	beq.n	80005e4 <ProcessModbusPacket+0xc8>
         // CRC 오류 처리 (예: 에러 로그, 무시)
         printf("CRC Error! Received: 0x%04X, Calculated: 0x4X\r\n", received_crc, calculated_crc);
 80005d2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 80005d6:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 80005da:	4619      	mov	r1, r3
 80005dc:	48b7      	ldr	r0, [pc, #732]	@ (80008bc <ProcessModbusPacket+0x3a0>)
 80005de:	f004 f88b 	bl	80046f8 <iprintf>
         return;
 80005e2:	e1b8      	b.n	8000956 <ProcessModbusPacket+0x43a>
    }


    // 4. 함수 코드 확인 및 처리
    uint8_t functionCode = buf[1];
 80005e4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80005e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	785b      	ldrb	r3, [r3, #1]
 80005f0:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
    uint8_t response[MODBUS_BUFFER_SIZE]; // 응답 버퍼
    int responseLength = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    uint16_t startAddress, numRegisters, regValue, writeValue, crc;

    switch (functionCode) {
 80005fa:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80005fe:	2b10      	cmp	r3, #16
 8000600:	f000 815e 	beq.w	80008c0 <ProcessModbusPacket+0x3a4>
 8000604:	2b10      	cmp	r3, #16
 8000606:	f300 813d 	bgt.w	8000884 <ProcessModbusPacket+0x368>
 800060a:	2b03      	cmp	r3, #3
 800060c:	d003      	beq.n	8000616 <ProcessModbusPacket+0xfa>
 800060e:	2b06      	cmp	r3, #6
 8000610:	f000 80ab 	beq.w	800076a <ProcessModbusPacket+0x24e>
 8000614:	e136      	b.n	8000884 <ProcessModbusPacket+0x368>
        case 0x03: // Read Holding Registers
            if (len != 8) return; // FC03 요청 길이는 8바이트
 8000616:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800061a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b08      	cmp	r3, #8
 8000622:	f040 8195 	bne.w	8000950 <ProcessModbusPacket+0x434>
            startAddress = (buf[2] << 8) | buf[3];
 8000626:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800062a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3302      	adds	r3, #2
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b21b      	sxth	r3, r3
 8000636:	021b      	lsls	r3, r3, #8
 8000638:	b21a      	sxth	r2, r3
 800063a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800063e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3303      	adds	r3, #3
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b21b      	sxth	r3, r3
 800064a:	4313      	orrs	r3, r2
 800064c:	b21b      	sxth	r3, r3
 800064e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
            numRegisters = (buf[4] << 8) | buf[5];
 8000652:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000656:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3304      	adds	r3, #4
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b21b      	sxth	r3, r3
 8000662:	021b      	lsls	r3, r3, #8
 8000664:	b21a      	sxth	r2, r3
 8000666:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800066a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	3305      	adds	r3, #5
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b21b      	sxth	r3, r3
 8000676:	4313      	orrs	r3, r2
 8000678:	b21b      	sxth	r3, r3
 800067a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

            // 주소 및 개수 유효성 검사 (예: ADC 배열 범위 확인)
            if ((startAddress + numRegisters) > (sizeof(uwADCxConvertedValue) / sizeof(uwADCxConvertedValue[0]))) {
 800067e:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 8000682:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8000686:	4413      	add	r3, r2
 8000688:	2b0a      	cmp	r3, #10
 800068a:	d91a      	bls.n	80006c2 <ProcessModbusPacket+0x1a6>
                // 예외 처리: Illegal Data Address
                response[0] = slaveAddress;
 800068c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000690:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000694:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8000698:	701a      	strb	r2, [r3, #0]
                response[1] = functionCode | 0x80; // 예외 응답 코드
 800069a:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800069e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80006a8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80006ac:	705a      	strb	r2, [r3, #1]
                response[2] = 0x02; // 예외 코드: Illegal Data Address
 80006ae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80006b2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80006b6:	2202      	movs	r2, #2
 80006b8:	709a      	strb	r2, [r3, #2]
                responseLength = 3;
 80006ba:	2303      	movs	r3, #3
 80006bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                    regValue = ReadHoldingRegister(startAddress + i);
                    response[responseLength++] = regValue >> 8;   // MSB
                    response[responseLength++] = regValue & 0xFF; // LSB
                }
            }
            break;
 80006c0:	e0ff      	b.n	80008c2 <ProcessModbusPacket+0x3a6>
                response[0] = slaveAddress;
 80006c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80006c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80006ca:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 80006ce:	701a      	strb	r2, [r3, #0]
                response[1] = functionCode;
 80006d0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80006d4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80006d8:	f897 2115 	ldrb.w	r2, [r7, #277]	@ 0x115
 80006dc:	705a      	strb	r2, [r3, #1]
                response[2] = numRegisters * 2; // 바이트 수
 80006de:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80006ec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80006f0:	709a      	strb	r2, [r3, #2]
                responseLength = 3;
 80006f2:	2303      	movs	r3, #3
 80006f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                for (int i = 0; i < numRegisters; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80006fe:	e02d      	b.n	800075c <ProcessModbusPacket+0x240>
                    regValue = ReadHoldingRegister(startAddress + i);
 8000700:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000704:	b29a      	uxth	r2, r3
 8000706:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 800070a:	4413      	add	r3, r2
 800070c:	b29b      	uxth	r3, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f928 	bl	8000964 <ReadHoldingRegister>
 8000714:	4603      	mov	r3, r0
 8000716:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
                    response[responseLength++] = regValue >> 8;   // MSB
 800071a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	b299      	uxth	r1, r3
 8000722:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000726:	1c5a      	adds	r2, r3, #1
 8000728:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 800072c:	b2c9      	uxtb	r1, r1
 800072e:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000732:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8000736:	54d1      	strb	r1, [r2, r3]
                    response[responseLength++] = regValue & 0xFF; // LSB
 8000738:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8000742:	f8b7 210c 	ldrh.w	r2, [r7, #268]	@ 0x10c
 8000746:	b2d1      	uxtb	r1, r2
 8000748:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800074c:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8000750:	54d1      	strb	r1, [r2, r3]
                for (int i = 0; i < numRegisters; i++) {
 8000752:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000756:	3301      	adds	r3, #1
 8000758:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800075c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8000760:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000764:	429a      	cmp	r2, r3
 8000766:	dbcb      	blt.n	8000700 <ProcessModbusPacket+0x1e4>
            break;
 8000768:	e0ab      	b.n	80008c2 <ProcessModbusPacket+0x3a6>

        case 0x06: // Write Single Register
            if (len != 8) return; // FC06 요청 길이는 8바이트
 800076a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800076e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b08      	cmp	r3, #8
 8000776:	f040 80ed 	bne.w	8000954 <ProcessModbusPacket+0x438>
            startAddress = (buf[2] << 8) | buf[3]; // 레지스터 주소 (릴레이 번호)
 800077a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800077e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3302      	adds	r3, #2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b21b      	sxth	r3, r3
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	b21a      	sxth	r2, r3
 800078e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000792:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3303      	adds	r3, #3
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
            writeValue = (buf[4] << 8) | buf[5];   // 쓸 값 (ON/OFF)
 80007a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80007aa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3304      	adds	r3, #4
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b21b      	sxth	r3, r3
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80007be:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3305      	adds	r3, #5
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b21b      	sxth	r3, r3
 80007ca:	4313      	orrs	r3, r2
 80007cc:	b21b      	sxth	r3, r3
 80007ce:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110

            // 주소 유효성 검사 (1~4번 릴레이 가정)
            if (startAddress < 1 || startAddress > 4) {
 80007d2:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <ProcessModbusPacket+0x2c6>
 80007da:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 80007de:	2b04      	cmp	r3, #4
 80007e0:	d91a      	bls.n	8000818 <ProcessModbusPacket+0x2fc>
                 // 예외 처리: Illegal Data Address
                response[0] = slaveAddress;
 80007e2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80007e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80007ea:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 80007ee:	701a      	strb	r2, [r3, #0]
                response[1] = functionCode | 0x80;
 80007f0:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80007f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80007fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000802:	705a      	strb	r2, [r3, #1]
                response[2] = 0x02;
 8000804:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000808:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800080c:	2202      	movs	r2, #2
 800080e:	709a      	strb	r2, [r3, #2]
                responseLength = 3;
 8000810:	2303      	movs	r3, #3
 8000812:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                 for(int i=0; i<len-2; i++) { // CRC 제외하고 복사
                     response[i] = buf[i];
                 }
                 responseLength = len - 2; // CRC 제외 길이
            }
            break;
 8000816:	e054      	b.n	80008c2 <ProcessModbusPacket+0x3a6>
                 WriteSingleRegister(startAddress, writeValue);
 8000818:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800081c:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f8b4 	bl	8000990 <WriteSingleRegister>
                 for(int i=0; i<len-2; i++) { // CRC 제외하고 복사
 8000828:	2300      	movs	r3, #0
 800082a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800082e:	e016      	b.n	800085e <ProcessModbusPacket+0x342>
                     response[i] = buf[i];
 8000830:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000834:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000838:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800083c:	6812      	ldr	r2, [r2, #0]
 800083e:	4413      	add	r3, r2
 8000840:	7819      	ldrb	r1, [r3, #0]
 8000842:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000846:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800084a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800084e:	4413      	add	r3, r2
 8000850:	460a      	mov	r2, r1
 8000852:	701a      	strb	r2, [r3, #0]
                 for(int i=0; i<len-2; i++) { // CRC 제외하고 복사
 8000854:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000858:	3301      	adds	r3, #1
 800085a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800085e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000862:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3b02      	subs	r3, #2
 800086a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800086e:	429a      	cmp	r2, r3
 8000870:	dbde      	blt.n	8000830 <ProcessModbusPacket+0x314>
                 responseLength = len - 2; // CRC 제외 길이
 8000872:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000876:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3b02      	subs	r3, #2
 800087e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 8000882:	e01e      	b.n	80008c2 <ProcessModbusPacket+0x3a6>
             // ... 구현 ...
             break;

        default:
            // 지원하지 않는 함수 코드 예외 처리
            response[0] = slaveAddress;
 8000884:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000888:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800088c:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8000890:	701a      	strb	r2, [r3, #0]
            response[1] = functionCode | 0x80;
 8000892:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000896:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800089a:	b2da      	uxtb	r2, r3
 800089c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80008a0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80008a4:	705a      	strb	r2, [r3, #1]
            response[2] = 0x01; // 예외 코드: Illegal Function
 80008a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80008aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80008ae:	2201      	movs	r2, #1
 80008b0:	709a      	strb	r2, [r3, #2]
            responseLength = 3;
 80008b2:	2303      	movs	r3, #3
 80008b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 80008b8:	e003      	b.n	80008c2 <ProcessModbusPacket+0x3a6>
 80008ba:	bf00      	nop
 80008bc:	080054bc 	.word	0x080054bc
             break;
 80008c0:	bf00      	nop
    }

    // 5. 응답 전송 (예외 또는 정상 응답)
    if (responseLength > 0) {
 80008c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	dd45      	ble.n	8000956 <ProcessModbusPacket+0x43a>
        crc = ModbusCRC(response, responseLength);
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fddc 	bl	8000490 <ModbusCRC>
 80008d8:	4603      	mov	r3, r0
 80008da:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        response[responseLength++] = crc & 0xFF;       // CRC LSB
 80008de:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80008e8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80008ec:	b2d1      	uxtb	r1, r2
 80008ee:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80008f2:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80008f6:	54d1      	strb	r1, [r2, r3]
        response[responseLength++] = (crc >> 8) & 0xFF; // CRC MSB (ModbusCRC 함수 수정으로 인해 순서 변경됨)
 80008f8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80008fc:	0a1b      	lsrs	r3, r3, #8
 80008fe:	b299      	uxth	r1, r3
 8000900:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000904:	1c5a      	adds	r2, r3, #1
 8000906:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 800090a:	b2c9      	uxtb	r1, r1
 800090c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000910:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8000914:	54d1      	strb	r1, [r2, r3]

        RS485_TX_ENABLE(); // 송신 모드 설정
 8000916:	f7ff fd5d 	bl	80003d4 <RS485_TX_ENABLE>
        HAL_Delay(1); // DE 핀 안정화 시간 (필요시, 매우 짧게)
 800091a:	2001      	movs	r0, #1
 800091c:	f000 fda2 	bl	8001464 <HAL_Delay>
        HAL_UART_Transmit(&huart1, response, responseLength, HAL_MAX_DELAY); // 블로킹 방식 전송
 8000920:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000924:	b29a      	uxth	r2, r3
 8000926:	f107 0108 	add.w	r1, r7, #8
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	480c      	ldr	r0, [pc, #48]	@ (8000960 <ProcessModbusPacket+0x444>)
 8000930:	f002 ffe8 	bl	8003904 <HAL_UART_Transmit>
        // HAL_UART_Transmit_IT 또는 HAL_UART_Transmit_DMA 사용 시 주의:
        // 전송 완료 콜백(HAL_UART_TxCpltCallback)에서 RS485_RX_ENABLE() 호출 필요

        // 전송 완료 후 수신 모드 설정 (블로킹 함수 뒤에 호출)
        // 전송 버퍼가 비워지는 것을 기다리는 약간의 지연이 필요할 수 있음
        while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY); // 간단한 대기 (더 정확한 방법 고려)
 8000934:	bf00      	nop
 8000936:	480a      	ldr	r0, [pc, #40]	@ (8000960 <ProcessModbusPacket+0x444>)
 8000938:	f003 fb43 	bl	8003fc2 <HAL_UART_GetState>
 800093c:	4603      	mov	r3, r0
 800093e:	2b20      	cmp	r3, #32
 8000940:	d1f9      	bne.n	8000936 <ProcessModbusPacket+0x41a>
        RS485_RX_ENABLE();
 8000942:	f7ff fd59 	bl	80003f8 <RS485_RX_ENABLE>
 8000946:	e006      	b.n	8000956 <ProcessModbusPacket+0x43a>
        return; // 너무 짧은 패킷
 8000948:	bf00      	nop
 800094a:	e004      	b.n	8000956 <ProcessModbusPacket+0x43a>
        return; // 내 주소가 아님
 800094c:	bf00      	nop
 800094e:	e002      	b.n	8000956 <ProcessModbusPacket+0x43a>
            if (len != 8) return; // FC03 요청 길이는 8바이트
 8000950:	bf00      	nop
 8000952:	e000      	b.n	8000956 <ProcessModbusPacket+0x43a>
            if (len != 8) return; // FC06 요청 길이는 8바이트
 8000954:	bf00      	nop
    }
}
 8000956:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000031c 	.word	0x2000031c

08000964 <ReadHoldingRegister>:

// --- Holding Register 읽기 함수 ---
uint16_t ReadHoldingRegister(uint16_t address) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
    // 주소 유효성 검사 (0부터 시작하는 인덱스 가정)
    if (address < (sizeof(uwADCxConvertedValue) / sizeof(uwADCxConvertedValue[0]))) {
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	2b09      	cmp	r3, #9
 8000972:	d805      	bhi.n	8000980 <ReadHoldingRegister+0x1c>
        return uwADCxConvertedValue[address];
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	4a05      	ldr	r2, [pc, #20]	@ (800098c <ReadHoldingRegister+0x28>)
 8000978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097c:	b29b      	uxth	r3, r3
 800097e:	e000      	b.n	8000982 <ReadHoldingRegister+0x1e>
    }
    // 다른 레지스터 영역 처리 (필요시)
    return 0; // 잘못된 주소면 0 반환
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	200001bc 	.word	0x200001bc

08000990 <WriteSingleRegister>:

// --- Single Register 쓰기 함수 (릴레이 제어) ---
void WriteSingleRegister(uint16_t address, uint16_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	460a      	mov	r2, r1
 800099a:	80fb      	strh	r3, [r7, #6]
 800099c:	4613      	mov	r3, r2
 800099e:	80bb      	strh	r3, [r7, #4]
    GPIO_PinState pinState = (value == 0xFF00) ? GPIO_PIN_RESET : GPIO_PIN_SET; // 0xFF00: ON(LOW), 0x0000: OFF(HIGH) - 릴레이 특성에 맞게 조절
 80009a0:	88bb      	ldrh	r3, [r7, #4]
 80009a2:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 80009a6:	bf14      	ite	ne
 80009a8:	2301      	movne	r3, #1
 80009aa:	2300      	moveq	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	73fb      	strb	r3, [r7, #15]

    switch (address) {
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d829      	bhi.n	8000a0c <WriteSingleRegister+0x7c>
 80009b8:	a201      	add	r2, pc, #4	@ (adr r2, 80009c0 <WriteSingleRegister+0x30>)
 80009ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009be:	bf00      	nop
 80009c0:	080009d1 	.word	0x080009d1
 80009c4:	080009df 	.word	0x080009df
 80009c8:	080009ed 	.word	0x080009ed
 80009cc:	080009fd 	.word	0x080009fd
        case 1: // 릴레이 1 주소
            HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, pinState);
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	461a      	mov	r2, r3
 80009d4:	2140      	movs	r1, #64	@ 0x40
 80009d6:	4810      	ldr	r0, [pc, #64]	@ (8000a18 <WriteSingleRegister+0x88>)
 80009d8:	f001 fdd5 	bl	8002586 <HAL_GPIO_WritePin>
            break;
 80009dc:	e017      	b.n	8000a0e <WriteSingleRegister+0x7e>
        case 2: // 릴레이 2 주소
            HAL_GPIO_WritePin(RELAY2_PORT, RELAY2_PIN, pinState);
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	461a      	mov	r2, r3
 80009e2:	2180      	movs	r1, #128	@ 0x80
 80009e4:	480c      	ldr	r0, [pc, #48]	@ (8000a18 <WriteSingleRegister+0x88>)
 80009e6:	f001 fdce 	bl	8002586 <HAL_GPIO_WritePin>
            break;
 80009ea:	e010      	b.n	8000a0e <WriteSingleRegister+0x7e>
        case 3: // 릴레이 3 주소
            HAL_GPIO_WritePin(RELAY3_PORT, RELAY3_PIN, pinState);
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	461a      	mov	r2, r3
 80009f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009f4:	4808      	ldr	r0, [pc, #32]	@ (8000a18 <WriteSingleRegister+0x88>)
 80009f6:	f001 fdc6 	bl	8002586 <HAL_GPIO_WritePin>
            break;
 80009fa:	e008      	b.n	8000a0e <WriteSingleRegister+0x7e>
        case 4: // 릴레이 4 주소
            HAL_GPIO_WritePin(RELAY4_PORT, RELAY4_PIN, pinState);
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	461a      	mov	r2, r3
 8000a00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a04:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <WriteSingleRegister+0x88>)
 8000a06:	f001 fdbe 	bl	8002586 <HAL_GPIO_WritePin>
            break;
 8000a0a:	e000      	b.n	8000a0e <WriteSingleRegister+0x7e>
        default:
            // 잘못된 주소
            break;
 8000a0c:	bf00      	nop
    }
    // 다른 레지스터 영역 처리 (필요시)
}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40011000 	.word	0x40011000

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a22:	f000 fcbd 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a26:	f000 f8c3 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2a:	f7ff fc39 	bl	80002a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a2e:	f7ff fb8d 	bl	800014c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000a32:	f000 fb45 	bl	80010c0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a36:	f000 fb6d 	bl	8001114 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a3a:	f000 fac1 	bl	8000fc0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000a3e:	f000 fb93 	bl	8001168 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // 초기 릴레이 상태 설정 (OFF)
  HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2140      	movs	r1, #64	@ 0x40
 8000a46:	484f      	ldr	r0, [pc, #316]	@ (8000b84 <main+0x168>)
 8000a48:	f001 fd9d 	bl	8002586 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY2_PORT, RELAY2_PIN, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2180      	movs	r1, #128	@ 0x80
 8000a50:	484c      	ldr	r0, [pc, #304]	@ (8000b84 <main+0x168>)
 8000a52:	f001 fd98 	bl	8002586 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY3_PORT, RELAY3_PIN, GPIO_PIN_SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a5c:	4849      	ldr	r0, [pc, #292]	@ (8000b84 <main+0x168>)
 8000a5e:	f001 fd92 	bl	8002586 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY4_PORT, RELAY4_PIN, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a68:	4846      	ldr	r0, [pc, #280]	@ (8000b84 <main+0x168>)
 8000a6a:	f001 fd8c 	bl	8002586 <HAL_GPIO_WritePin>

  RS485_RX_ENABLE(); // 초기 상태는 수신 모드
 8000a6e:	f7ff fcc3 	bl	80003f8 <RS485_RX_ENABLE>

  // Modbus 수신 시작 (첫 1 바이트)
  HAL_UART_Receive_IT(&huart1, &UART1_RxBuffer, 1);
 8000a72:	2201      	movs	r2, #1
 8000a74:	4944      	ldr	r1, [pc, #272]	@ (8000b88 <main+0x16c>)
 8000a76:	4845      	ldr	r0, [pc, #276]	@ (8000b8c <main+0x170>)
 8000a78:	f002 ffcf 	bl	8003a1a <HAL_UART_Receive_IT>

  // ADC 설정
  if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK) {
 8000a7c:	4844      	ldr	r0, [pc, #272]	@ (8000b90 <main+0x174>)
 8000a7e:	f001 f979 	bl	8001d74 <HAL_ADCEx_Calibration_Start>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <main+0x70>
      Error_Handler();
 8000a88:	f000 f904 	bl	8000c94 <Error_Handler>
  }
  // ADC 인터럽트 방식 사용 시 시작 (콜백에서 값 읽기)
  // if (HAL_ADC_Start_IT(&hadc1) != HAL_OK) { Error_Handler(); }
  // 또는 폴링 방식 사용 시 아래 루프 내에서 처리

   uint16_t len = modbus_build_request(0x01, 0x0000, 0x0001, 1, tx_buf);
 8000a8c:	4b41      	ldr	r3, [pc, #260]	@ (8000b94 <main+0x178>)
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2301      	movs	r3, #1
 8000a92:	2201      	movs	r2, #1
 8000a94:	2100      	movs	r1, #0
 8000a96:	2001      	movs	r0, #1
 8000a98:	f000 f93f 	bl	8000d1a <modbus_build_request>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	80bb      	strh	r3, [r7, #4]
   RS485_TX_ENABLE();
 8000aa0:	f7ff fc98 	bl	80003d4 <RS485_TX_ENABLE>
   HAL_UART_Transmit(&huart1, tx_buf, len, 100);
 8000aa4:	88ba      	ldrh	r2, [r7, #4]
 8000aa6:	2364      	movs	r3, #100	@ 0x64
 8000aa8:	493a      	ldr	r1, [pc, #232]	@ (8000b94 <main+0x178>)
 8000aaa:	4838      	ldr	r0, [pc, #224]	@ (8000b8c <main+0x170>)
 8000aac:	f002 ff2a 	bl	8003904 <HAL_UART_Transmit>
   HAL_Delay(1000);
 8000ab0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab4:	f000 fcd6 	bl	8001464 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // --- Modbus 프레임 처리 ---
    if (ModbusFrameReceived) {
 8000ab8:	4b37      	ldr	r3, [pc, #220]	@ (8000b98 <main+0x17c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d00c      	beq.n	8000adc <main+0xc0>
        ProcessModbusPacket(ModbusReceiveBuffer, ModbusReceiveIndex);
 8000ac2:	4b36      	ldr	r3, [pc, #216]	@ (8000b9c <main+0x180>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4835      	ldr	r0, [pc, #212]	@ (8000ba0 <main+0x184>)
 8000acc:	f7ff fd26 	bl	800051c <ProcessModbusPacket>
        ModbusReceiveIndex = 0;      // 인덱스 초기화
 8000ad0:	4b32      	ldr	r3, [pc, #200]	@ (8000b9c <main+0x180>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	801a      	strh	r2, [r3, #0]
        ModbusFrameReceived = false; // 플래그 리셋
 8000ad6:	4b30      	ldr	r3, [pc, #192]	@ (8000b98 <main+0x17c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
    }


    // --- ADC 값 읽기 (폴링 방식 예시) ---
    // ADC 인터럽트 방식을 사용하면 이 부분은 필요 없음
	 HAL_ADC_Start(&hadc1);
 8000adc:	482c      	ldr	r0, [pc, #176]	@ (8000b90 <main+0x174>)
 8000ade:	f000 fdbd 	bl	800165c <HAL_ADC_Start>
	 for (uint8_t i = 0; i < (sizeof(uwADCxConvertedValue) / sizeof(uwADCxConvertedValue[0])); i++) {
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	71fb      	strb	r3, [r7, #7]
 8000ae6:	e018      	b.n	8000b1a <main+0xfe>
		 // ADC 채널 변경 로직 필요 시 추가 (CubeMX에서 Scan 모드 설정 시 자동)
		 HAL_ADC_PollForConversion(&hadc1, 10); // 타임아웃 10ms
 8000ae8:	210a      	movs	r1, #10
 8000aea:	4829      	ldr	r0, [pc, #164]	@ (8000b90 <main+0x174>)
 8000aec:	f000 fe90 	bl	8001810 <HAL_ADC_PollForConversion>
		 if ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC) {
 8000af0:	4827      	ldr	r0, [pc, #156]	@ (8000b90 <main+0x174>)
 8000af2:	f001 f897 	bl	8001c24 <HAL_ADC_GetState>
 8000af6:	4603      	mov	r3, r0
 8000af8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000afc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b00:	d108      	bne.n	8000b14 <main+0xf8>
			 uwADCxConvertedValue[i] = HAL_ADC_GetValue(&hadc1);
 8000b02:	4823      	ldr	r0, [pc, #140]	@ (8000b90 <main+0x174>)
 8000b04:	f000 ff8a 	bl	8001a1c <HAL_ADC_GetValue>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	b291      	uxth	r1, r2
 8000b0e:	4a25      	ldr	r2, [pc, #148]	@ (8000ba4 <main+0x188>)
 8000b10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	 for (uint8_t i = 0; i < (sizeof(uwADCxConvertedValue) / sizeof(uwADCxConvertedValue[0])); i++) {
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	3301      	adds	r3, #1
 8000b18:	71fb      	strb	r3, [r7, #7]
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b09      	cmp	r3, #9
 8000b1e:	d9e3      	bls.n	8000ae8 <main+0xcc>
		 } else {
			 // ADC 읽기 오류 처리
		 }
	 }
	 HAL_ADC_Stop(&hadc1);
 8000b20:	481b      	ldr	r0, [pc, #108]	@ (8000b90 <main+0x174>)
 8000b22:	f000 fe49 	bl	80017b8 <HAL_ADC_Stop>

	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // PA5 핀에 연결된 LED 제어 (핀 이름은 실제 설정에 맞게 변경)
 8000b26:	2120      	movs	r1, #32
 8000b28:	481f      	ldr	r0, [pc, #124]	@ (8000ba8 <main+0x18c>)
 8000b2a:	f001 fd44 	bl	80025b6 <HAL_GPIO_TogglePin>
	 HAL_Delay(500); // 500ms 지연
 8000b2e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b32:	f000 fc97 	bl	8001464 <HAL_Delay>

	 // 버튼(B1, 예를 들어 PC13)이 눌렸는지 확인 (Pull-up 저항 사용 가정, 누르면 LOW)
	 if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000b36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b3a:	4812      	ldr	r0, [pc, #72]	@ (8000b84 <main+0x168>)
 8000b3c:	f001 fd0c 	bl	8002558 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10e      	bne.n	8000b64 <main+0x148>
	 {
		 printf("Blue Button Pressed...\r\n");
 8000b46:	4819      	ldr	r0, [pc, #100]	@ (8000bac <main+0x190>)
 8000b48:	f003 fe3e 	bl	80047c8 <puts>

		// 버튼 눌렸을 때 처리 (Debouncing은 추가 구현 필요)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // LED 켜기
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2120      	movs	r1, #32
 8000b50:	4815      	ldr	r0, [pc, #84]	@ (8000ba8 <main+0x18c>)
 8000b52:	f001 fd18 	bl	8002586 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // Relay Off
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b5c:	4809      	ldr	r0, [pc, #36]	@ (8000b84 <main+0x168>)
 8000b5e:	f001 fd12 	bl	8002586 <HAL_GPIO_WritePin>
 8000b62:	e005      	b.n	8000b70 <main+0x154>

	 }else {

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Relay On
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b6a:	4806      	ldr	r0, [pc, #24]	@ (8000b84 <main+0x168>)
 8000b6c:	f001 fd0b 	bl	8002586 <HAL_GPIO_WritePin>
	 }


    // --- 기타 작업 ---
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // LD2 토글 (하트비트)
 8000b70:	2120      	movs	r1, #32
 8000b72:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <main+0x18c>)
 8000b74:	f001 fd1f 	bl	80025b6 <HAL_GPIO_TogglePin>
    HAL_Delay(500); // 메인 루프 지연 (다른 작업에 따라 조절)
 8000b78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b7c:	f000 fc72 	bl	8001464 <HAL_Delay>
    if (ModbusFrameReceived) {
 8000b80:	e79a      	b.n	8000ab8 <main+0x9c>
 8000b82:	bf00      	nop
 8000b84:	40011000 	.word	0x40011000
 8000b88:	200001b4 	.word	0x200001b4
 8000b8c:	2000031c 	.word	0x2000031c
 8000b90:	20000084 	.word	0x20000084
 8000b94:	200001d0 	.word	0x200001d0
 8000b98:	200001b8 	.word	0x200001b8
 8000b9c:	200001b6 	.word	0x200001b6
 8000ba0:	200000b4 	.word	0x200000b4
 8000ba4:	200001bc 	.word	0x200001bc
 8000ba8:	40010800 	.word	0x40010800
 8000bac:	080054ec 	.word	0x080054ec

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b094      	sub	sp, #80	@ 0x50
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bba:	2228      	movs	r2, #40	@ 0x28
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f003 fee2 	bl	8004988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000be4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bfc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 fd10 	bl	800262c <HAL_RCC_OscConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c12:	f000 f83f 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	230f      	movs	r3, #15
 8000c18:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2102      	movs	r1, #2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 ff7c 	bl	8002b30 <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c3e:	f000 f829 	bl	8000c94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c42:	2302      	movs	r3, #2
 8000c44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c4a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 f8fc 	bl	8002e4c <HAL_RCCEx_PeriphCLKConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c5a:	f000 f81b 	bl	8000c94 <Error_Handler>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3750      	adds	r7, #80	@ 0x50
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <_write+0x28>)
 8000c80:	f002 fe40 	bl	8003904 <HAL_UART_Transmit>
    return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200003ac 	.word	0x200003ac

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <Error_Handler+0x8>

08000ca0 <modbus_crc16>:
#include "modbus.h"

uint16_t modbus_crc16(uint8_t *buf, uint16_t len)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8000cac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cb0:	81fb      	strh	r3, [r7, #14]
    for (uint16_t pos = 0; pos < len; pos++) {
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	81bb      	strh	r3, [r7, #12]
 8000cb6:	e026      	b.n	8000d06 <modbus_crc16+0x66>
        crc ^= (uint16_t)buf[pos];
 8000cb8:	89bb      	ldrh	r3, [r7, #12]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	89fb      	ldrh	r3, [r7, #14]
 8000cc4:	4053      	eors	r3, r2
 8000cc6:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	e015      	b.n	8000cfa <modbus_crc16+0x5a>
            if ((crc & 0x0001) != 0) {
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00a      	beq.n	8000cee <modbus_crc16+0x4e>
                crc >>= 1;
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	085b      	lsrs	r3, r3, #1
 8000cdc:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 8000cde:	89fb      	ldrh	r3, [r7, #14]
 8000ce0:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8000ce4:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	81fb      	strh	r3, [r7, #14]
 8000cec:	e002      	b.n	8000cf4 <modbus_crc16+0x54>
            } else {
                crc >>= 1;
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	085b      	lsrs	r3, r3, #1
 8000cf2:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	2b07      	cmp	r3, #7
 8000cfe:	dde6      	ble.n	8000cce <modbus_crc16+0x2e>
    for (uint16_t pos = 0; pos < len; pos++) {
 8000d00:	89bb      	ldrh	r3, [r7, #12]
 8000d02:	3301      	adds	r3, #1
 8000d04:	81bb      	strh	r3, [r7, #12]
 8000d06:	89ba      	ldrh	r2, [r7, #12]
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d3d4      	bcc.n	8000cb8 <modbus_crc16+0x18>
            }
        }
    }
    return crc;
 8000d0e:	89fb      	ldrh	r3, [r7, #14]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <modbus_build_request>:

uint16_t modbus_build_request(uint8_t slave_id, uint8_t func_code, uint16_t reg_addr, uint16_t reg_count, uint8_t *tx_buf)
{
 8000d1a:	b590      	push	{r4, r7, lr}
 8000d1c:	b085      	sub	sp, #20
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4604      	mov	r4, r0
 8000d22:	4608      	mov	r0, r1
 8000d24:	4611      	mov	r1, r2
 8000d26:	461a      	mov	r2, r3
 8000d28:	4623      	mov	r3, r4
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	71bb      	strb	r3, [r7, #6]
 8000d30:	460b      	mov	r3, r1
 8000d32:	80bb      	strh	r3, [r7, #4]
 8000d34:	4613      	mov	r3, r2
 8000d36:	807b      	strh	r3, [r7, #2]
    tx_buf[0] = slave_id;
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	79fa      	ldrb	r2, [r7, #7]
 8000d3c:	701a      	strb	r2, [r3, #0]
    tx_buf[1] = func_code;
 8000d3e:	6a3b      	ldr	r3, [r7, #32]
 8000d40:	3301      	adds	r3, #1
 8000d42:	79ba      	ldrb	r2, [r7, #6]
 8000d44:	701a      	strb	r2, [r3, #0]
    tx_buf[2] = reg_addr >> 8;
 8000d46:	88bb      	ldrh	r3, [r7, #4]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	3302      	adds	r3, #2
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	701a      	strb	r2, [r3, #0]
    tx_buf[3] = reg_addr & 0xFF;
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	3303      	adds	r3, #3
 8000d58:	88ba      	ldrh	r2, [r7, #4]
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	701a      	strb	r2, [r3, #0]
    tx_buf[4] = reg_count >> 8;
 8000d5e:	887b      	ldrh	r3, [r7, #2]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	6a3b      	ldr	r3, [r7, #32]
 8000d66:	3304      	adds	r3, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	701a      	strb	r2, [r3, #0]
    tx_buf[5] = reg_count & 0xFF;
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	3305      	adds	r3, #5
 8000d70:	887a      	ldrh	r2, [r7, #2]
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	701a      	strb	r2, [r3, #0]
    uint16_t crc = modbus_crc16(tx_buf, 6);
 8000d76:	2106      	movs	r1, #6
 8000d78:	6a38      	ldr	r0, [r7, #32]
 8000d7a:	f7ff ff91 	bl	8000ca0 <modbus_crc16>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	81fb      	strh	r3, [r7, #14]
    tx_buf[6] = crc & 0xFF;
 8000d82:	6a3b      	ldr	r3, [r7, #32]
 8000d84:	3306      	adds	r3, #6
 8000d86:	89fa      	ldrh	r2, [r7, #14]
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	701a      	strb	r2, [r3, #0]
    tx_buf[7] = crc >> 8;
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
 8000d8e:	0a1b      	lsrs	r3, r3, #8
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	6a3b      	ldr	r3, [r7, #32]
 8000d94:	3307      	adds	r3, #7
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	701a      	strb	r2, [r3, #0]
    return 8;
 8000d9a:	2308      	movs	r3, #8
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd90      	pop	{r4, r7, pc}

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <HAL_MspInit+0x5c>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a14      	ldr	r2, [pc, #80]	@ (8000e00 <HAL_MspInit+0x5c>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6193      	str	r3, [r2, #24]
 8000db6:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <HAL_MspInit+0x5c>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <HAL_MspInit+0x5c>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e00 <HAL_MspInit+0x5c>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	61d3      	str	r3, [r2, #28]
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <HAL_MspInit+0x5c>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_MspInit+0x60>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <HAL_MspInit+0x60>)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010000 	.word	0x40010000

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <NMI_Handler+0x4>

08000e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <MemManage_Handler+0x4>

08000e20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e58:	f000 fae8 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <USART1_IRQHandler+0x10>)
 8000e66:	f002 fdfd 	bl	8003a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000031c 	.word	0x2000031c

08000e74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <USART2_IRQHandler+0x10>)
 8000e7a:	f002 fdf3 	bl	8003a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000364 	.word	0x20000364

08000e88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <USART3_IRQHandler+0x10>)
 8000e8e:	f002 fde9 	bl	8003a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200003ac 	.word	0x200003ac

08000e9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ea0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ea4:	f001 fba0 	bl	80025e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e00a      	b.n	8000ed4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ebe:	f3af 8000 	nop.w
 8000ec2:	4601      	mov	r1, r0
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	60ba      	str	r2, [r7, #8]
 8000eca:	b2ca      	uxtb	r2, r1
 8000ecc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbf0      	blt.n	8000ebe <_read+0x12>
  }

  return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f0c:	605a      	str	r2, [r3, #4]
  return 0;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <_isatty>:

int _isatty(int file)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b085      	sub	sp, #20
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
	...

08000f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f50:	4a14      	ldr	r2, [pc, #80]	@ (8000fa4 <_sbrk+0x5c>)
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <_sbrk+0x60>)
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <_sbrk+0x64>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <_sbrk+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d207      	bcs.n	8000f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f78:	f003 fd54 	bl	8004a24 <__errno>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	220c      	movs	r2, #12
 8000f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	e009      	b.n	8000f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <_sbrk+0x64>)
 8000f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20005000 	.word	0x20005000
 8000fa8:	00000400 	.word	0x00000400
 8000fac:	200002d0 	.word	0x200002d0
 8000fb0:	20000548 	.word	0x20000548

08000fb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08c      	sub	sp, #48	@ 0x30
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fec:	4b25      	ldr	r3, [pc, #148]	@ (8001084 <MX_TIM2_Init+0xc4>)
 8000fee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ff2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 -1;
 8000ff4:	4b23      	ldr	r3, [pc, #140]	@ (8001084 <MX_TIM2_Init+0xc4>)
 8000ff6:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000ffa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b21      	ldr	r3, [pc, #132]	@ (8001084 <MX_TIM2_Init+0xc4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50 - 1;
 8001002:	4b20      	ldr	r3, [pc, #128]	@ (8001084 <MX_TIM2_Init+0xc4>)
 8001004:	2231      	movs	r2, #49	@ 0x31
 8001006:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001008:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <MX_TIM2_Init+0xc4>)
 800100a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800100e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001010:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <MX_TIM2_Init+0xc4>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001016:	481b      	ldr	r0, [pc, #108]	@ (8001084 <MX_TIM2_Init+0xc4>)
 8001018:	f002 f884 	bl	8003124 <HAL_TIM_Base_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001022:	f7ff fe37 	bl	8000c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001026:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800102a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800102c:	f107 0320 	add.w	r3, r7, #32
 8001030:	4619      	mov	r1, r3
 8001032:	4814      	ldr	r0, [pc, #80]	@ (8001084 <MX_TIM2_Init+0xc4>)
 8001034:	f002 f918 	bl	8003268 <HAL_TIM_ConfigClockSource>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800103e:	f7ff fe29 	bl	8000c94 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001046:	2320      	movs	r3, #32
 8001048:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	@ (8001084 <MX_TIM2_Init+0xc4>)
 8001052:	f002 f9d0 	bl	80033f6 <HAL_TIM_SlaveConfigSynchro>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800105c:	f7ff fe1a 	bl	8000c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	@ (8001084 <MX_TIM2_Init+0xc4>)
 800106e:	f002 fb9b 	bl	80037a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001078:	f7ff fe0c 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3730      	adds	r7, #48	@ 0x30
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200002d4 	.word	0x200002d4

08001088 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001098:	d10b      	bne.n	80010b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800109a:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <HAL_TIM_Base_MspInit+0x34>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a07      	ldr	r2, [pc, #28]	@ (80010bc <HAL_TIM_Base_MspInit+0x34>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <HAL_TIM_Base_MspInit+0x34>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	40021000 	.word	0x40021000

080010c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <MX_USART1_UART_Init+0x4c>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	@ (8001110 <MX_USART1_UART_Init+0x50>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <MX_USART1_UART_Init+0x4c>)
 80010cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <MX_USART1_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <MX_USART1_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <MX_USART1_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <MX_USART1_UART_Init+0x4c>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	@ (800110c <MX_USART1_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <MX_USART1_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	@ (800110c <MX_USART1_UART_Init+0x4c>)
 80010f8:	f002 fbb4 	bl	8003864 <HAL_UART_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001102:	f7ff fdc7 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000031c 	.word	0x2000031c
 8001110:	40013800 	.word	0x40013800

08001114 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 800111a:	4a12      	ldr	r2, [pc, #72]	@ (8001164 <MX_USART2_UART_Init+0x50>)
 800111c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001120:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 800114c:	f002 fb8a 	bl	8003864 <HAL_UART_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001156:	f7ff fd9d 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000364 	.word	0x20000364
 8001164:	40004400 	.word	0x40004400

08001168 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_USART3_UART_Init+0x4c>)
 800116e:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <MX_USART3_UART_Init+0x50>)
 8001170:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <MX_USART3_UART_Init+0x4c>)
 8001174:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001178:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_USART3_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_USART3_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MX_USART3_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_USART3_UART_Init+0x4c>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <MX_USART3_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_USART3_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_USART3_UART_Init+0x4c>)
 80011a0:	f002 fb60 	bl	8003864 <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011aa:	f7ff fd73 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200003ac 	.word	0x200003ac
 80011b8:	40004800 	.word	0x40004800

080011bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	@ 0x30
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0320 	add.w	r3, r7, #32
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a59      	ldr	r2, [pc, #356]	@ (800133c <HAL_UART_MspInit+0x180>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d13a      	bne.n	8001252 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011dc:	4b58      	ldr	r3, [pc, #352]	@ (8001340 <HAL_UART_MspInit+0x184>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a57      	ldr	r2, [pc, #348]	@ (8001340 <HAL_UART_MspInit+0x184>)
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b55      	ldr	r3, [pc, #340]	@ (8001340 <HAL_UART_MspInit+0x184>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b52      	ldr	r3, [pc, #328]	@ (8001340 <HAL_UART_MspInit+0x184>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a51      	ldr	r2, [pc, #324]	@ (8001340 <HAL_UART_MspInit+0x184>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b4f      	ldr	r3, [pc, #316]	@ (8001340 <HAL_UART_MspInit+0x184>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
 800120a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800120c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	4619      	mov	r1, r3
 8001220:	4848      	ldr	r0, [pc, #288]	@ (8001344 <HAL_UART_MspInit+0x188>)
 8001222:	f001 f815 	bl	8002250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001226:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	4619      	mov	r1, r3
 800123a:	4842      	ldr	r0, [pc, #264]	@ (8001344 <HAL_UART_MspInit+0x188>)
 800123c:	f001 f808 	bl	8002250 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	2100      	movs	r1, #0
 8001244:	2025      	movs	r0, #37	@ 0x25
 8001246:	f000 ff1a 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800124a:	2025      	movs	r0, #37	@ 0x25
 800124c:	f000 ff33 	bl	80020b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001250:	e070      	b.n	8001334 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a3c      	ldr	r2, [pc, #240]	@ (8001348 <HAL_UART_MspInit+0x18c>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d12c      	bne.n	80012b6 <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 800125c:	4b38      	ldr	r3, [pc, #224]	@ (8001340 <HAL_UART_MspInit+0x184>)
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	4a37      	ldr	r2, [pc, #220]	@ (8001340 <HAL_UART_MspInit+0x184>)
 8001262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001266:	61d3      	str	r3, [r2, #28]
 8001268:	4b35      	ldr	r3, [pc, #212]	@ (8001340 <HAL_UART_MspInit+0x184>)
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	4b32      	ldr	r3, [pc, #200]	@ (8001340 <HAL_UART_MspInit+0x184>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a31      	ldr	r2, [pc, #196]	@ (8001340 <HAL_UART_MspInit+0x184>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b2f      	ldr	r3, [pc, #188]	@ (8001340 <HAL_UART_MspInit+0x184>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800128c:	230c      	movs	r3, #12
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2302      	movs	r3, #2
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4619      	mov	r1, r3
 800129e:	4829      	ldr	r0, [pc, #164]	@ (8001344 <HAL_UART_MspInit+0x188>)
 80012a0:	f000 ffd6 	bl	8002250 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2026      	movs	r0, #38	@ 0x26
 80012aa:	f000 fee8 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ae:	2026      	movs	r0, #38	@ 0x26
 80012b0:	f000 ff01 	bl	80020b6 <HAL_NVIC_EnableIRQ>
}
 80012b4:	e03e      	b.n	8001334 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART3)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a24      	ldr	r2, [pc, #144]	@ (800134c <HAL_UART_MspInit+0x190>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d139      	bne.n	8001334 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <HAL_UART_MspInit+0x184>)
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001340 <HAL_UART_MspInit+0x184>)
 80012c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012ca:	61d3      	str	r3, [r2, #28]
 80012cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <HAL_UART_MspInit+0x184>)
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_UART_MspInit+0x184>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a18      	ldr	r2, [pc, #96]	@ (8001340 <HAL_UART_MspInit+0x184>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <HAL_UART_MspInit+0x184>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	4619      	mov	r1, r3
 8001304:	4812      	ldr	r0, [pc, #72]	@ (8001350 <HAL_UART_MspInit+0x194>)
 8001306:	f000 ffa3 	bl	8002250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800130a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	4619      	mov	r1, r3
 800131e:	480c      	ldr	r0, [pc, #48]	@ (8001350 <HAL_UART_MspInit+0x194>)
 8001320:	f000 ff96 	bl	8002250 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	2027      	movs	r0, #39	@ 0x27
 800132a:	f000 fea8 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800132e:	2027      	movs	r0, #39	@ 0x27
 8001330:	f000 fec1 	bl	80020b6 <HAL_NVIC_EnableIRQ>
}
 8001334:	bf00      	nop
 8001336:	3730      	adds	r7, #48	@ 0x30
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40013800 	.word	0x40013800
 8001340:	40021000 	.word	0x40021000
 8001344:	40010800 	.word	0x40010800
 8001348:	40004400 	.word	0x40004400
 800134c:	40004800 	.word	0x40004800
 8001350:	40010c00 	.word	0x40010c00

08001354 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001354:	f7ff fe2e 	bl	8000fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001358:	480b      	ldr	r0, [pc, #44]	@ (8001388 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800135a:	490c      	ldr	r1, [pc, #48]	@ (800138c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800135c:	4a0c      	ldr	r2, [pc, #48]	@ (8001390 <LoopFillZerobss+0x16>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001370:	4c09      	ldr	r4, [pc, #36]	@ (8001398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137e:	f003 fb57 	bl	8004a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001382:	f7ff fb4b 	bl	8000a1c <main>
  bx lr
 8001386:	4770      	bx	lr
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001390:	08005580 	.word	0x08005580
  ldr r2, =_sbss
 8001394:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001398:	20000544 	.word	0x20000544

0800139c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_2_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <HAL_Init+0x28>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	@ (80013c8 <HAL_Init+0x28>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f000 fe59 	bl	8002068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f000 f808 	bl	80013cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff fcf2 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40022000 	.word	0x40022000

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_InitTick+0x54>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <HAL_InitTick+0x58>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fe71 	bl	80020d2 <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00e      	b.n	8001418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d80a      	bhi.n	8001416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f000 fe39 	bl	800207e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800140c:	4a06      	ldr	r2, [pc, #24]	@ (8001428 <HAL_InitTick+0x5c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000000 	.word	0x20000000
 8001424:	20000008 	.word	0x20000008
 8001428:	20000004 	.word	0x20000004

0800142c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_IncTick+0x1c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b05      	ldr	r3, [pc, #20]	@ (800144c <HAL_IncTick+0x20>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a03      	ldr	r2, [pc, #12]	@ (800144c <HAL_IncTick+0x20>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	20000008 	.word	0x20000008
 800144c:	200003f4 	.word	0x200003f4

08001450 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b02      	ldr	r3, [pc, #8]	@ (8001460 <HAL_GetTick+0x10>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	200003f4 	.word	0x200003f4

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff fff0 	bl	8001450 <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_Delay+0x44>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffe0 	bl	8001450 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000008 	.word	0x20000008

080014ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e0be      	b.n	800164c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d109      	bne.n	80014f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7fe fe6c 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 fbfd 	bl	8001cf0 <ADC_ConversionStop_Disable>
 80014f6:	4603      	mov	r3, r0
 80014f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	2b00      	cmp	r3, #0
 8001504:	f040 8099 	bne.w	800163a <HAL_ADC_Init+0x18e>
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f040 8095 	bne.w	800163a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001514:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001518:	f023 0302 	bic.w	r3, r3, #2
 800151c:	f043 0202 	orr.w	r2, r3, #2
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800152c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7b1b      	ldrb	r3, [r3, #12]
 8001532:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001534:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	4313      	orrs	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001544:	d003      	beq.n	800154e <HAL_ADC_Init+0xa2>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d102      	bne.n	8001554 <HAL_ADC_Init+0xa8>
 800154e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001552:	e000      	b.n	8001556 <HAL_ADC_Init+0xaa>
 8001554:	2300      	movs	r3, #0
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7d1b      	ldrb	r3, [r3, #20]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d119      	bne.n	8001598 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7b1b      	ldrb	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d109      	bne.n	8001580 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	3b01      	subs	r3, #1
 8001572:	035a      	lsls	r2, r3, #13
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	e00b      	b.n	8001598 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001584:	f043 0220 	orr.w	r2, r3, #32
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001590:	f043 0201 	orr.w	r2, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	4b28      	ldr	r3, [pc, #160]	@ (8001654 <HAL_ADC_Init+0x1a8>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	430b      	orrs	r3, r1
 80015be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015c8:	d003      	beq.n	80015d2 <HAL_ADC_Init+0x126>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d104      	bne.n	80015dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	051b      	lsls	r3, r3, #20
 80015da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <HAL_ADC_Init+0x1ac>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d10b      	bne.n	8001618 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160a:	f023 0303 	bic.w	r3, r3, #3
 800160e:	f043 0201 	orr.w	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001616:	e018      	b.n	800164a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161c:	f023 0312 	bic.w	r3, r3, #18
 8001620:	f043 0210 	orr.w	r2, r3, #16
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001638:	e007      	b.n	800164a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163e:	f043 0210 	orr.w	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800164a:	7dfb      	ldrb	r3, [r7, #23]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	ffe1f7fd 	.word	0xffe1f7fd
 8001658:	ff1f0efe 	.word	0xff1f0efe

0800165c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800166e:	2b01      	cmp	r3, #1
 8001670:	d101      	bne.n	8001676 <HAL_ADC_Start+0x1a>
 8001672:	2302      	movs	r3, #2
 8001674:	e098      	b.n	80017a8 <HAL_ADC_Start+0x14c>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fadc 	bl	8001c3c <ADC_Enable>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 8087 	bne.w	800179e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001694:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a41      	ldr	r2, [pc, #260]	@ (80017b0 <HAL_ADC_Start+0x154>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d105      	bne.n	80016ba <HAL_ADC_Start+0x5e>
 80016ae:	4b41      	ldr	r3, [pc, #260]	@ (80017b4 <HAL_ADC_Start+0x158>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d115      	bne.n	80016e6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016be:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d026      	beq.n	8001722 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016e4:	e01d      	b.n	8001722 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a2f      	ldr	r2, [pc, #188]	@ (80017b4 <HAL_ADC_Start+0x158>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d004      	beq.n	8001706 <HAL_ADC_Start+0xaa>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a2b      	ldr	r2, [pc, #172]	@ (80017b0 <HAL_ADC_Start+0x154>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10d      	bne.n	8001722 <HAL_ADC_Start+0xc6>
 8001706:	4b2b      	ldr	r3, [pc, #172]	@ (80017b4 <HAL_ADC_Start+0x158>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001716:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800171a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001726:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001732:	f023 0206 	bic.w	r2, r3, #6
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	62da      	str	r2, [r3, #44]	@ 0x2c
 800173a:	e002      	b.n	8001742 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f06f 0202 	mvn.w	r2, #2
 8001752:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800175e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001762:	d113      	bne.n	800178c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001768:	4a11      	ldr	r2, [pc, #68]	@ (80017b0 <HAL_ADC_Start+0x154>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d105      	bne.n	800177a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800176e:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <HAL_ADC_Start+0x158>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001776:	2b00      	cmp	r3, #0
 8001778:	d108      	bne.n	800178c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	e00c      	b.n	80017a6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	e003      	b.n	80017a6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40012800 	.word	0x40012800
 80017b4:	40012400 	.word	0x40012400

080017b8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_Stop+0x1a>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e01a      	b.n	8001808 <HAL_ADC_Stop+0x50>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fa88 	bl	8001cf0 <ADC_ConversionStop_Disable>
 80017e0:	4603      	mov	r3, r0
 80017e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	f043 0201 	orr.w	r2, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001826:	f7ff fe13 	bl	8001450 <HAL_GetTick>
 800182a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183e:	f043 0220 	orr.w	r2, r3, #32
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0d3      	b.n	80019fa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800185c:	2b00      	cmp	r3, #0
 800185e:	d131      	bne.n	80018c4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001866:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800186a:	2b00      	cmp	r3, #0
 800186c:	d12a      	bne.n	80018c4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800186e:	e021      	b.n	80018b4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001876:	d01d      	beq.n	80018b4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d007      	beq.n	800188e <HAL_ADC_PollForConversion+0x7e>
 800187e:	f7ff fde7 	bl	8001450 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d212      	bcs.n	80018b4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10b      	bne.n	80018b4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a0:	f043 0204 	orr.w	r2, r3, #4
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0a2      	b.n	80019fa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0d6      	beq.n	8001870 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018c2:	e070      	b.n	80019a6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80018c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001a04 <HAL_ADC_PollForConversion+0x1f4>)
 80018c6:	681c      	ldr	r4, [r3, #0]
 80018c8:	2002      	movs	r0, #2
 80018ca:	f001 fb75 	bl	8002fb8 <HAL_RCCEx_GetPeriphCLKFreq>
 80018ce:	4603      	mov	r3, r0
 80018d0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6919      	ldr	r1, [r3, #16]
 80018da:	4b4b      	ldr	r3, [pc, #300]	@ (8001a08 <HAL_ADC_PollForConversion+0x1f8>)
 80018dc:	400b      	ands	r3, r1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d118      	bne.n	8001914 <HAL_ADC_PollForConversion+0x104>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68d9      	ldr	r1, [r3, #12]
 80018e8:	4b48      	ldr	r3, [pc, #288]	@ (8001a0c <HAL_ADC_PollForConversion+0x1fc>)
 80018ea:	400b      	ands	r3, r1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d111      	bne.n	8001914 <HAL_ADC_PollForConversion+0x104>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6919      	ldr	r1, [r3, #16]
 80018f6:	4b46      	ldr	r3, [pc, #280]	@ (8001a10 <HAL_ADC_PollForConversion+0x200>)
 80018f8:	400b      	ands	r3, r1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d108      	bne.n	8001910 <HAL_ADC_PollForConversion+0x100>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68d9      	ldr	r1, [r3, #12]
 8001904:	4b43      	ldr	r3, [pc, #268]	@ (8001a14 <HAL_ADC_PollForConversion+0x204>)
 8001906:	400b      	ands	r3, r1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_ADC_PollForConversion+0x100>
 800190c:	2314      	movs	r3, #20
 800190e:	e020      	b.n	8001952 <HAL_ADC_PollForConversion+0x142>
 8001910:	2329      	movs	r3, #41	@ 0x29
 8001912:	e01e      	b.n	8001952 <HAL_ADC_PollForConversion+0x142>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6919      	ldr	r1, [r3, #16]
 800191a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a10 <HAL_ADC_PollForConversion+0x200>)
 800191c:	400b      	ands	r3, r1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_ADC_PollForConversion+0x120>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68d9      	ldr	r1, [r3, #12]
 8001928:	4b3a      	ldr	r3, [pc, #232]	@ (8001a14 <HAL_ADC_PollForConversion+0x204>)
 800192a:	400b      	ands	r3, r1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00d      	beq.n	800194c <HAL_ADC_PollForConversion+0x13c>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6919      	ldr	r1, [r3, #16]
 8001936:	4b38      	ldr	r3, [pc, #224]	@ (8001a18 <HAL_ADC_PollForConversion+0x208>)
 8001938:	400b      	ands	r3, r1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d108      	bne.n	8001950 <HAL_ADC_PollForConversion+0x140>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68d9      	ldr	r1, [r3, #12]
 8001944:	4b34      	ldr	r3, [pc, #208]	@ (8001a18 <HAL_ADC_PollForConversion+0x208>)
 8001946:	400b      	ands	r3, r1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_ADC_PollForConversion+0x140>
 800194c:	2354      	movs	r3, #84	@ 0x54
 800194e:	e000      	b.n	8001952 <HAL_ADC_PollForConversion+0x142>
 8001950:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001958:	e021      	b.n	800199e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d01a      	beq.n	8001998 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d007      	beq.n	8001978 <HAL_ADC_PollForConversion+0x168>
 8001968:	f7ff fd72 	bl	8001450 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d20f      	bcs.n	8001998 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d90b      	bls.n	8001998 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001984:	f043 0204 	orr.w	r2, r3, #4
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e030      	b.n	80019fa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3301      	adds	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d8d9      	bhi.n	800195a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f06f 0212 	mvn.w	r2, #18
 80019ae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80019c6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019ca:	d115      	bne.n	80019f8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d111      	bne.n	80019f8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f0:	f043 0201 	orr.w	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	371c      	adds	r7, #28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd90      	pop	{r4, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000000 	.word	0x20000000
 8001a08:	24924924 	.word	0x24924924
 8001a0c:	00924924 	.word	0x00924924
 8001a10:	12492492 	.word	0x12492492
 8001a14:	00492492 	.word	0x00492492
 8001a18:	00249249 	.word	0x00249249

08001a1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x20>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e0dc      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x1da>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b06      	cmp	r3, #6
 8001a62:	d81c      	bhi.n	8001a9e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	3b05      	subs	r3, #5
 8001a76:	221f      	movs	r2, #31
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	4019      	ands	r1, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3b05      	subs	r3, #5
 8001a90:	fa00 f203 	lsl.w	r2, r0, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a9c:	e03c      	b.n	8001b18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d81c      	bhi.n	8001ae0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3b23      	subs	r3, #35	@ 0x23
 8001ab8:	221f      	movs	r2, #31
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	4019      	ands	r1, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	3b23      	subs	r3, #35	@ 0x23
 8001ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ade:	e01b      	b.n	8001b18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	3b41      	subs	r3, #65	@ 0x41
 8001af2:	221f      	movs	r2, #31
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	4019      	ands	r1, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	3b41      	subs	r3, #65	@ 0x41
 8001b0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b09      	cmp	r3, #9
 8001b1e:	d91c      	bls.n	8001b5a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68d9      	ldr	r1, [r3, #12]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b1e      	subs	r3, #30
 8001b32:	2207      	movs	r2, #7
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4019      	ands	r1, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6898      	ldr	r0, [r3, #8]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	3b1e      	subs	r3, #30
 8001b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	e019      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6919      	ldr	r1, [r3, #16]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	4019      	ands	r1, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6898      	ldr	r0, [r3, #8]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d003      	beq.n	8001b9e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b9a:	2b11      	cmp	r3, #17
 8001b9c:	d132      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c18 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d125      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d126      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001bc4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b10      	cmp	r3, #16
 8001bcc:	d11a      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bce:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <HAL_ADC_ConfigChannel+0x1e8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a13      	ldr	r2, [pc, #76]	@ (8001c20 <HAL_ADC_ConfigChannel+0x1ec>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	0c9a      	lsrs	r2, r3, #18
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001be4:	e002      	b.n	8001bec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f9      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x1b2>
 8001bf2:	e007      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf8:	f043 0220 	orr.w	r2, r3, #32
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	40012400 	.word	0x40012400
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	431bde83 	.word	0x431bde83

08001c24 <HAL_ADC_GetState>:
  * @brief  return the ADC state
  * @param  hadc: ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
	...

08001c3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d040      	beq.n	8001cdc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <ADC_Enable+0xac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cec <ADC_Enable+0xb0>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	0c9b      	lsrs	r3, r3, #18
 8001c76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c78:	e002      	b.n	8001c80 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f9      	bne.n	8001c7a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c86:	f7ff fbe3 	bl	8001450 <HAL_GetTick>
 8001c8a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c8c:	e01f      	b.n	8001cce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c8e:	f7ff fbdf 	bl	8001450 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d918      	bls.n	8001cce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d011      	beq.n	8001cce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cae:	f043 0210 	orr.w	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cba:	f043 0201 	orr.w	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e007      	b.n	8001cde <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d1d8      	bne.n	8001c8e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	431bde83 	.word	0x431bde83

08001cf0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d12e      	bne.n	8001d68 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0201 	bic.w	r2, r2, #1
 8001d18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d1a:	f7ff fb99 	bl	8001450 <HAL_GetTick>
 8001d1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d20:	e01b      	b.n	8001d5a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d22:	f7ff fb95 	bl	8001450 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d914      	bls.n	8001d5a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d10d      	bne.n	8001d5a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d42:	f043 0210 	orr.w	r2, r3, #16
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4e:	f043 0201 	orr.w	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e007      	b.n	8001d6a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d0dc      	beq.n	8001d22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_ADCEx_Calibration_Start+0x1e>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e097      	b.n	8001ec2 <HAL_ADCEx_Calibration_Start+0x14e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffa8 	bl	8001cf0 <ADC_ConversionStop_Disable>
 8001da0:	4603      	mov	r3, r0
 8001da2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff49 	bl	8001c3c <ADC_Enable>
 8001daa:	4603      	mov	r3, r0
 8001dac:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 8081 	bne.w	8001eb8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001dbe:	f023 0302 	bic.w	r3, r3, #2
 8001dc2:	f043 0202 	orr.w	r2, r3, #2
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001dca:	4b40      	ldr	r3, [pc, #256]	@ (8001ecc <HAL_ADCEx_Calibration_Start+0x158>)
 8001dcc:	681c      	ldr	r4, [r3, #0]
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f001 f8f2 	bl	8002fb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001dda:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001ddc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001dde:	e002      	b.n	8001de6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f9      	bne.n	8001de0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0208 	orr.w	r2, r2, #8
 8001dfa:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001dfc:	f7ff fb28 	bl	8001450 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e02:	e01b      	b.n	8001e3c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e04:	f7ff fb24 	bl	8001450 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b0a      	cmp	r3, #10
 8001e10:	d914      	bls.n	8001e3c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00d      	beq.n	8001e3c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e24:	f023 0312 	bic.w	r3, r3, #18
 8001e28:	f043 0210 	orr.w	r2, r3, #16
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e042      	b.n	8001ec2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1dc      	bne.n	8001e04 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0204 	orr.w	r2, r2, #4
 8001e58:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001e5a:	f7ff faf9 	bl	8001450 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e60:	e01b      	b.n	8001e9a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e62:	f7ff faf5 	bl	8001450 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b0a      	cmp	r3, #10
 8001e6e:	d914      	bls.n	8001e9a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00d      	beq.n	8001e9a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e82:	f023 0312 	bic.w	r3, r3, #18
 8001e86:	f043 0210 	orr.w	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e013      	b.n	8001ec2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1dc      	bne.n	8001e62 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eac:	f023 0303 	bic.w	r3, r3, #3
 8001eb0:	f043 0201 	orr.w	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd90      	pop	{r4, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000000 	.word	0x20000000

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	@ (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4906      	ldr	r1, [pc, #24]	@ (8001f68 <__NVIC_EnableIRQ+0x34>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	@ (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	@ (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	@ 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	@ 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002034:	d301      	bcc.n	800203a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002036:	2301      	movs	r3, #1
 8002038:	e00f      	b.n	800205a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203a:	4a0a      	ldr	r2, [pc, #40]	@ (8002064 <SysTick_Config+0x40>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002042:	210f      	movs	r1, #15
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f7ff ff90 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800204c:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <SysTick_Config+0x40>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002052:	4b04      	ldr	r3, [pc, #16]	@ (8002064 <SysTick_Config+0x40>)
 8002054:	2207      	movs	r2, #7
 8002056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	e000e010 	.word	0xe000e010

08002068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff2d 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff42 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff90 	bl	8001fc0 <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff5f 	bl	8001f6c <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff35 	bl	8001f34 <__NVIC_EnableIRQ>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffa2 	bl	8002024 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d008      	beq.n	8002114 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2204      	movs	r2, #4
 8002106:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e020      	b.n	8002156 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 020e 	bic.w	r2, r2, #14
 8002122:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213c:	2101      	movs	r1, #1
 800213e:	fa01 f202 	lsl.w	r2, r1, r2
 8002142:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002154:	7bfb      	ldrb	r3, [r7, #15]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d005      	beq.n	8002184 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2204      	movs	r2, #4
 800217c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	e051      	b.n	8002228 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 020e 	bic.w	r2, r2, #14
 8002192:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a22      	ldr	r2, [pc, #136]	@ (8002234 <HAL_DMA_Abort_IT+0xd4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d029      	beq.n	8002202 <HAL_DMA_Abort_IT+0xa2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a21      	ldr	r2, [pc, #132]	@ (8002238 <HAL_DMA_Abort_IT+0xd8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d022      	beq.n	80021fe <HAL_DMA_Abort_IT+0x9e>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1f      	ldr	r2, [pc, #124]	@ (800223c <HAL_DMA_Abort_IT+0xdc>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01a      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x98>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002240 <HAL_DMA_Abort_IT+0xe0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d012      	beq.n	80021f2 <HAL_DMA_Abort_IT+0x92>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002244 <HAL_DMA_Abort_IT+0xe4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00a      	beq.n	80021ec <HAL_DMA_Abort_IT+0x8c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1b      	ldr	r2, [pc, #108]	@ (8002248 <HAL_DMA_Abort_IT+0xe8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d102      	bne.n	80021e6 <HAL_DMA_Abort_IT+0x86>
 80021e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021e4:	e00e      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021ea:	e00b      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021f0:	e008      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f6:	e005      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021fc:	e002      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021fe:	2310      	movs	r3, #16
 8002200:	e000      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 8002202:	2301      	movs	r3, #1
 8002204:	4a11      	ldr	r2, [pc, #68]	@ (800224c <HAL_DMA_Abort_IT+0xec>)
 8002206:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
    } 
  }
  return status;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40020008 	.word	0x40020008
 8002238:	4002001c 	.word	0x4002001c
 800223c:	40020030 	.word	0x40020030
 8002240:	40020044 	.word	0x40020044
 8002244:	40020058 	.word	0x40020058
 8002248:	4002006c 	.word	0x4002006c
 800224c:	40020000 	.word	0x40020000

08002250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002250:	b480      	push	{r7}
 8002252:	b08b      	sub	sp, #44	@ 0x2c
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002262:	e169      	b.n	8002538 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002264:	2201      	movs	r2, #1
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	429a      	cmp	r2, r3
 800227e:	f040 8158 	bne.w	8002532 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4a9a      	ldr	r2, [pc, #616]	@ (80024f0 <HAL_GPIO_Init+0x2a0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d05e      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 800228c:	4a98      	ldr	r2, [pc, #608]	@ (80024f0 <HAL_GPIO_Init+0x2a0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d875      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 8002292:	4a98      	ldr	r2, [pc, #608]	@ (80024f4 <HAL_GPIO_Init+0x2a4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d058      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 8002298:	4a96      	ldr	r2, [pc, #600]	@ (80024f4 <HAL_GPIO_Init+0x2a4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d86f      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 800229e:	4a96      	ldr	r2, [pc, #600]	@ (80024f8 <HAL_GPIO_Init+0x2a8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d052      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 80022a4:	4a94      	ldr	r2, [pc, #592]	@ (80024f8 <HAL_GPIO_Init+0x2a8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d869      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 80022aa:	4a94      	ldr	r2, [pc, #592]	@ (80024fc <HAL_GPIO_Init+0x2ac>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d04c      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 80022b0:	4a92      	ldr	r2, [pc, #584]	@ (80024fc <HAL_GPIO_Init+0x2ac>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d863      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 80022b6:	4a92      	ldr	r2, [pc, #584]	@ (8002500 <HAL_GPIO_Init+0x2b0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d046      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 80022bc:	4a90      	ldr	r2, [pc, #576]	@ (8002500 <HAL_GPIO_Init+0x2b0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d85d      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 80022c2:	2b12      	cmp	r3, #18
 80022c4:	d82a      	bhi.n	800231c <HAL_GPIO_Init+0xcc>
 80022c6:	2b12      	cmp	r3, #18
 80022c8:	d859      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 80022ca:	a201      	add	r2, pc, #4	@ (adr r2, 80022d0 <HAL_GPIO_Init+0x80>)
 80022cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d0:	0800234b 	.word	0x0800234b
 80022d4:	08002325 	.word	0x08002325
 80022d8:	08002337 	.word	0x08002337
 80022dc:	08002379 	.word	0x08002379
 80022e0:	0800237f 	.word	0x0800237f
 80022e4:	0800237f 	.word	0x0800237f
 80022e8:	0800237f 	.word	0x0800237f
 80022ec:	0800237f 	.word	0x0800237f
 80022f0:	0800237f 	.word	0x0800237f
 80022f4:	0800237f 	.word	0x0800237f
 80022f8:	0800237f 	.word	0x0800237f
 80022fc:	0800237f 	.word	0x0800237f
 8002300:	0800237f 	.word	0x0800237f
 8002304:	0800237f 	.word	0x0800237f
 8002308:	0800237f 	.word	0x0800237f
 800230c:	0800237f 	.word	0x0800237f
 8002310:	0800237f 	.word	0x0800237f
 8002314:	0800232d 	.word	0x0800232d
 8002318:	08002341 	.word	0x08002341
 800231c:	4a79      	ldr	r2, [pc, #484]	@ (8002504 <HAL_GPIO_Init+0x2b4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002322:	e02c      	b.n	800237e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	623b      	str	r3, [r7, #32]
          break;
 800232a:	e029      	b.n	8002380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	3304      	adds	r3, #4
 8002332:	623b      	str	r3, [r7, #32]
          break;
 8002334:	e024      	b.n	8002380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	3308      	adds	r3, #8
 800233c:	623b      	str	r3, [r7, #32]
          break;
 800233e:	e01f      	b.n	8002380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	330c      	adds	r3, #12
 8002346:	623b      	str	r3, [r7, #32]
          break;
 8002348:	e01a      	b.n	8002380 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d102      	bne.n	8002358 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002352:	2304      	movs	r3, #4
 8002354:	623b      	str	r3, [r7, #32]
          break;
 8002356:	e013      	b.n	8002380 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d105      	bne.n	800236c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002360:	2308      	movs	r3, #8
 8002362:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	611a      	str	r2, [r3, #16]
          break;
 800236a:	e009      	b.n	8002380 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800236c:	2308      	movs	r3, #8
 800236e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	615a      	str	r2, [r3, #20]
          break;
 8002376:	e003      	b.n	8002380 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
          break;
 800237c:	e000      	b.n	8002380 <HAL_GPIO_Init+0x130>
          break;
 800237e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2bff      	cmp	r3, #255	@ 0xff
 8002384:	d801      	bhi.n	800238a <HAL_GPIO_Init+0x13a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	e001      	b.n	800238e <HAL_GPIO_Init+0x13e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2bff      	cmp	r3, #255	@ 0xff
 8002394:	d802      	bhi.n	800239c <HAL_GPIO_Init+0x14c>
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	e002      	b.n	80023a2 <HAL_GPIO_Init+0x152>
 800239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239e:	3b08      	subs	r3, #8
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	210f      	movs	r1, #15
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	401a      	ands	r2, r3
 80023b4:	6a39      	ldr	r1, [r7, #32]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	431a      	orrs	r2, r3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 80b1 	beq.w	8002532 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002508 <HAL_GPIO_Init+0x2b8>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023e8:	4a48      	ldr	r2, [pc, #288]	@ (800250c <HAL_GPIO_Init+0x2bc>)
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	220f      	movs	r2, #15
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4013      	ands	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a40      	ldr	r2, [pc, #256]	@ (8002510 <HAL_GPIO_Init+0x2c0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d013      	beq.n	800243c <HAL_GPIO_Init+0x1ec>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a3f      	ldr	r2, [pc, #252]	@ (8002514 <HAL_GPIO_Init+0x2c4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00d      	beq.n	8002438 <HAL_GPIO_Init+0x1e8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a3e      	ldr	r2, [pc, #248]	@ (8002518 <HAL_GPIO_Init+0x2c8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d007      	beq.n	8002434 <HAL_GPIO_Init+0x1e4>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a3d      	ldr	r2, [pc, #244]	@ (800251c <HAL_GPIO_Init+0x2cc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d101      	bne.n	8002430 <HAL_GPIO_Init+0x1e0>
 800242c:	2303      	movs	r3, #3
 800242e:	e006      	b.n	800243e <HAL_GPIO_Init+0x1ee>
 8002430:	2304      	movs	r3, #4
 8002432:	e004      	b.n	800243e <HAL_GPIO_Init+0x1ee>
 8002434:	2302      	movs	r3, #2
 8002436:	e002      	b.n	800243e <HAL_GPIO_Init+0x1ee>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <HAL_GPIO_Init+0x1ee>
 800243c:	2300      	movs	r3, #0
 800243e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002440:	f002 0203 	and.w	r2, r2, #3
 8002444:	0092      	lsls	r2, r2, #2
 8002446:	4093      	lsls	r3, r2
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800244e:	492f      	ldr	r1, [pc, #188]	@ (800250c <HAL_GPIO_Init+0x2bc>)
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002468:	4b2d      	ldr	r3, [pc, #180]	@ (8002520 <HAL_GPIO_Init+0x2d0>)
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	492c      	ldr	r1, [pc, #176]	@ (8002520 <HAL_GPIO_Init+0x2d0>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	608b      	str	r3, [r1, #8]
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002476:	4b2a      	ldr	r3, [pc, #168]	@ (8002520 <HAL_GPIO_Init+0x2d0>)
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	43db      	mvns	r3, r3
 800247e:	4928      	ldr	r1, [pc, #160]	@ (8002520 <HAL_GPIO_Init+0x2d0>)
 8002480:	4013      	ands	r3, r2
 8002482:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002490:	4b23      	ldr	r3, [pc, #140]	@ (8002520 <HAL_GPIO_Init+0x2d0>)
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	4922      	ldr	r1, [pc, #136]	@ (8002520 <HAL_GPIO_Init+0x2d0>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	60cb      	str	r3, [r1, #12]
 800249c:	e006      	b.n	80024ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800249e:	4b20      	ldr	r3, [pc, #128]	@ (8002520 <HAL_GPIO_Init+0x2d0>)
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	491e      	ldr	r1, [pc, #120]	@ (8002520 <HAL_GPIO_Init+0x2d0>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024b8:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <HAL_GPIO_Init+0x2d0>)
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	4918      	ldr	r1, [pc, #96]	@ (8002520 <HAL_GPIO_Init+0x2d0>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024c6:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <HAL_GPIO_Init+0x2d0>)
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	4914      	ldr	r1, [pc, #80]	@ (8002520 <HAL_GPIO_Init+0x2d0>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d021      	beq.n	8002524 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002520 <HAL_GPIO_Init+0x2d0>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	490e      	ldr	r1, [pc, #56]	@ (8002520 <HAL_GPIO_Init+0x2d0>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]
 80024ec:	e021      	b.n	8002532 <HAL_GPIO_Init+0x2e2>
 80024ee:	bf00      	nop
 80024f0:	10320000 	.word	0x10320000
 80024f4:	10310000 	.word	0x10310000
 80024f8:	10220000 	.word	0x10220000
 80024fc:	10210000 	.word	0x10210000
 8002500:	10120000 	.word	0x10120000
 8002504:	10110000 	.word	0x10110000
 8002508:	40021000 	.word	0x40021000
 800250c:	40010000 	.word	0x40010000
 8002510:	40010800 	.word	0x40010800
 8002514:	40010c00 	.word	0x40010c00
 8002518:	40011000 	.word	0x40011000
 800251c:	40011400 	.word	0x40011400
 8002520:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002524:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <HAL_GPIO_Init+0x304>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	43db      	mvns	r3, r3
 800252c:	4909      	ldr	r1, [pc, #36]	@ (8002554 <HAL_GPIO_Init+0x304>)
 800252e:	4013      	ands	r3, r2
 8002530:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002534:	3301      	adds	r3, #1
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	f47f ae8e 	bne.w	8002264 <HAL_GPIO_Init+0x14>
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	372c      	adds	r7, #44	@ 0x2c
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	40010400 	.word	0x40010400

08002558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
 8002574:	e001      	b.n	800257a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	807b      	strh	r3, [r7, #2]
 8002592:	4613      	mov	r3, r2
 8002594:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002596:	787b      	ldrb	r3, [r7, #1]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259c:	887a      	ldrh	r2, [r7, #2]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025a2:	e003      	b.n	80025ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	041a      	lsls	r2, r3, #16
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	611a      	str	r2, [r3, #16]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b085      	sub	sp, #20
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025c8:	887a      	ldrh	r2, [r7, #2]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4013      	ands	r3, r2
 80025ce:	041a      	lsls	r2, r3, #16
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	887b      	ldrh	r3, [r7, #2]
 80025d6:	400b      	ands	r3, r1
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	611a      	str	r2, [r3, #16]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025f2:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025fe:	4a05      	ldr	r2, [pc, #20]	@ (8002614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f806 	bl	8002618 <HAL_GPIO_EXTI_Callback>
  }
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40010400 	.word	0x40010400

08002618 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e272      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8087 	beq.w	800275a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800264c:	4b92      	ldr	r3, [pc, #584]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b04      	cmp	r3, #4
 8002656:	d00c      	beq.n	8002672 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002658:	4b8f      	ldr	r3, [pc, #572]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	2b08      	cmp	r3, #8
 8002662:	d112      	bne.n	800268a <HAL_RCC_OscConfig+0x5e>
 8002664:	4b8c      	ldr	r3, [pc, #560]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002670:	d10b      	bne.n	800268a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002672:	4b89      	ldr	r3, [pc, #548]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d06c      	beq.n	8002758 <HAL_RCC_OscConfig+0x12c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d168      	bne.n	8002758 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e24c      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x76>
 8002694:	4b80      	ldr	r3, [pc, #512]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a7f      	ldr	r2, [pc, #508]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 800269a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	e02e      	b.n	8002700 <HAL_RCC_OscConfig+0xd4>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x98>
 80026aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a7a      	ldr	r2, [pc, #488]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b78      	ldr	r3, [pc, #480]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a77      	ldr	r2, [pc, #476]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e01d      	b.n	8002700 <HAL_RCC_OscConfig+0xd4>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0xbc>
 80026ce:	4b72      	ldr	r3, [pc, #456]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a71      	ldr	r2, [pc, #452]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	4b6f      	ldr	r3, [pc, #444]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a6e      	ldr	r2, [pc, #440]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0xd4>
 80026e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b68      	ldr	r3, [pc, #416]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a67      	ldr	r2, [pc, #412]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d013      	beq.n	8002730 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe fea2 	bl	8001450 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe fe9e 	bl	8001450 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	@ 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e200      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b5d      	ldr	r3, [pc, #372]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0xe4>
 800272e:	e014      	b.n	800275a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fe8e 	bl	8001450 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002738:	f7fe fe8a 	bl	8001450 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	@ 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e1ec      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	4b53      	ldr	r3, [pc, #332]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x10c>
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d063      	beq.n	800282e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002766:	4b4c      	ldr	r3, [pc, #304]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002772:	4b49      	ldr	r3, [pc, #292]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b08      	cmp	r3, #8
 800277c:	d11c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x18c>
 800277e:	4b46      	ldr	r3, [pc, #280]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d116      	bne.n	80027b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	4b43      	ldr	r3, [pc, #268]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_RCC_OscConfig+0x176>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e1c0      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4939      	ldr	r1, [pc, #228]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	e03a      	b.n	800282e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c0:	4b36      	ldr	r3, [pc, #216]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7fe fe43 	bl	8001450 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ce:	f7fe fe3f 	bl	8001450 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e1a1      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4927      	ldr	r1, [pc, #156]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]
 8002800:	e015      	b.n	800282e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002802:	4b26      	ldr	r3, [pc, #152]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7fe fe22 	bl	8001450 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002810:	f7fe fe1e 	bl	8001450 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e180      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002822:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d03a      	beq.n	80028b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d019      	beq.n	8002876 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002842:	4b17      	ldr	r3, [pc, #92]	@ (80028a0 <HAL_RCC_OscConfig+0x274>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002848:	f7fe fe02 	bl	8001450 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002850:	f7fe fdfe 	bl	8001450 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e160      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002862:	4b0d      	ldr	r3, [pc, #52]	@ (8002898 <HAL_RCC_OscConfig+0x26c>)
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800286e:	2001      	movs	r0, #1
 8002870:	f000 face 	bl	8002e10 <RCC_Delay>
 8002874:	e01c      	b.n	80028b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002876:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <HAL_RCC_OscConfig+0x274>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287c:	f7fe fde8 	bl	8001450 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002882:	e00f      	b.n	80028a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002884:	f7fe fde4 	bl	8001450 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d908      	bls.n	80028a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e146      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	42420000 	.word	0x42420000
 80028a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a4:	4b92      	ldr	r3, [pc, #584]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1e9      	bne.n	8002884 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80a6 	beq.w	8002a0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c2:	4b8b      	ldr	r3, [pc, #556]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10d      	bne.n	80028ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ce:	4b88      	ldr	r3, [pc, #544]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	4a87      	ldr	r2, [pc, #540]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d8:	61d3      	str	r3, [r2, #28]
 80028da:	4b85      	ldr	r3, [pc, #532]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e6:	2301      	movs	r3, #1
 80028e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ea:	4b82      	ldr	r3, [pc, #520]	@ (8002af4 <HAL_RCC_OscConfig+0x4c8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d118      	bne.n	8002928 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f6:	4b7f      	ldr	r3, [pc, #508]	@ (8002af4 <HAL_RCC_OscConfig+0x4c8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a7e      	ldr	r2, [pc, #504]	@ (8002af4 <HAL_RCC_OscConfig+0x4c8>)
 80028fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002902:	f7fe fda5 	bl	8001450 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290a:	f7fe fda1 	bl	8001450 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b64      	cmp	r3, #100	@ 0x64
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e103      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291c:	4b75      	ldr	r3, [pc, #468]	@ (8002af4 <HAL_RCC_OscConfig+0x4c8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d106      	bne.n	800293e <HAL_RCC_OscConfig+0x312>
 8002930:	4b6f      	ldr	r3, [pc, #444]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a6e      	ldr	r2, [pc, #440]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6213      	str	r3, [r2, #32]
 800293c:	e02d      	b.n	800299a <HAL_RCC_OscConfig+0x36e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x334>
 8002946:	4b6a      	ldr	r3, [pc, #424]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4a69      	ldr	r2, [pc, #420]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	6213      	str	r3, [r2, #32]
 8002952:	4b67      	ldr	r3, [pc, #412]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	4a66      	ldr	r2, [pc, #408]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	f023 0304 	bic.w	r3, r3, #4
 800295c:	6213      	str	r3, [r2, #32]
 800295e:	e01c      	b.n	800299a <HAL_RCC_OscConfig+0x36e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b05      	cmp	r3, #5
 8002966:	d10c      	bne.n	8002982 <HAL_RCC_OscConfig+0x356>
 8002968:	4b61      	ldr	r3, [pc, #388]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	4a60      	ldr	r2, [pc, #384]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	6213      	str	r3, [r2, #32]
 8002974:	4b5e      	ldr	r3, [pc, #376]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4a5d      	ldr	r2, [pc, #372]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6213      	str	r3, [r2, #32]
 8002980:	e00b      	b.n	800299a <HAL_RCC_OscConfig+0x36e>
 8002982:	4b5b      	ldr	r3, [pc, #364]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4a5a      	ldr	r2, [pc, #360]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	6213      	str	r3, [r2, #32]
 800298e:	4b58      	ldr	r3, [pc, #352]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4a57      	ldr	r2, [pc, #348]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d015      	beq.n	80029ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a2:	f7fe fd55 	bl	8001450 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fe fd51 	bl	8001450 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e0b1      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c0:	4b4b      	ldr	r3, [pc, #300]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ee      	beq.n	80029aa <HAL_RCC_OscConfig+0x37e>
 80029cc:	e014      	b.n	80029f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fd3f 	bl	8001450 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d4:	e00a      	b.n	80029ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe fd3b 	bl	8001450 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e09b      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ec:	4b40      	ldr	r3, [pc, #256]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1ee      	bne.n	80029d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d105      	bne.n	8002a0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fe:	4b3c      	ldr	r3, [pc, #240]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	4a3b      	ldr	r2, [pc, #236]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 8087 	beq.w	8002b22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a14:	4b36      	ldr	r3, [pc, #216]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 030c 	and.w	r3, r3, #12
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d061      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d146      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a28:	4b33      	ldr	r3, [pc, #204]	@ (8002af8 <HAL_RCC_OscConfig+0x4cc>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe fd0f 	bl	8001450 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a36:	f7fe fd0b 	bl	8001450 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e06d      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a48:	4b29      	ldr	r3, [pc, #164]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f0      	bne.n	8002a36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a5c:	d108      	bne.n	8002a70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a5e:	4b24      	ldr	r3, [pc, #144]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	4921      	ldr	r1, [pc, #132]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a70:	4b1f      	ldr	r3, [pc, #124]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a19      	ldr	r1, [r3, #32]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	430b      	orrs	r3, r1
 8002a82:	491b      	ldr	r1, [pc, #108]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a88:	4b1b      	ldr	r3, [pc, #108]	@ (8002af8 <HAL_RCC_OscConfig+0x4cc>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8e:	f7fe fcdf 	bl	8001450 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a96:	f7fe fcdb 	bl	8001450 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e03d      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa8:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x46a>
 8002ab4:	e035      	b.n	8002b22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b10      	ldr	r3, [pc, #64]	@ (8002af8 <HAL_RCC_OscConfig+0x4cc>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe fcc8 	bl	8001450 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe fcc4 	bl	8001450 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e026      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad6:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x498>
 8002ae2:	e01e      	b.n	8002b22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e019      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40007000 	.word	0x40007000
 8002af8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002afc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000

08002b30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0d0      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b44:	4b6a      	ldr	r3, [pc, #424]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d910      	bls.n	8002b74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b52:	4b67      	ldr	r3, [pc, #412]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 0207 	bic.w	r2, r3, #7
 8002b5a:	4965      	ldr	r1, [pc, #404]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b63      	ldr	r3, [pc, #396]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0b8      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b8c:	4b59      	ldr	r3, [pc, #356]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4a58      	ldr	r2, [pc, #352]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba4:	4b53      	ldr	r3, [pc, #332]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a52      	ldr	r2, [pc, #328]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002bae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b50      	ldr	r3, [pc, #320]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	494d      	ldr	r1, [pc, #308]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d040      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	4b47      	ldr	r3, [pc, #284]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d115      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bee:	4b41      	ldr	r3, [pc, #260]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e073      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e06b      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0e:	4b39      	ldr	r3, [pc, #228]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f023 0203 	bic.w	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4936      	ldr	r1, [pc, #216]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c20:	f7fe fc16 	bl	8001450 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c28:	f7fe fc12 	bl	8001450 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e053      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 020c 	and.w	r2, r3, #12
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d1eb      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c50:	4b27      	ldr	r3, [pc, #156]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d210      	bcs.n	8002c80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b24      	ldr	r3, [pc, #144]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 0207 	bic.w	r2, r3, #7
 8002c66:	4922      	ldr	r1, [pc, #136]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b20      	ldr	r3, [pc, #128]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e032      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8c:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4916      	ldr	r1, [pc, #88]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002caa:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	490e      	ldr	r1, [pc, #56]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cbe:	f000 f821 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	490a      	ldr	r1, [pc, #40]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd0:	5ccb      	ldrb	r3, [r1, r3]
 8002cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd6:	4a09      	ldr	r2, [pc, #36]	@ (8002cfc <HAL_RCC_ClockConfig+0x1cc>)
 8002cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cda:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <HAL_RCC_ClockConfig+0x1d0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fb74 	bl	80013cc <HAL_InitTick>

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40022000 	.word	0x40022000
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	08005504 	.word	0x08005504
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20000004 	.word	0x20000004

08002d04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d002      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0x30>
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0x36>
 8002d32:	e027      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d34:	4b19      	ldr	r3, [pc, #100]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d36:	613b      	str	r3, [r7, #16]
      break;
 8002d38:	e027      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	0c9b      	lsrs	r3, r3, #18
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	4a17      	ldr	r2, [pc, #92]	@ (8002da0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d44:	5cd3      	ldrb	r3, [r2, r3]
 8002d46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d010      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d52:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	0c5b      	lsrs	r3, r3, #17
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	4a11      	ldr	r2, [pc, #68]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d5e:	5cd3      	ldrb	r3, [r2, r3]
 8002d60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a0d      	ldr	r2, [pc, #52]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d66:	fb03 f202 	mul.w	r2, r3, r2
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	e004      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a0c      	ldr	r2, [pc, #48]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d78:	fb02 f303 	mul.w	r3, r2, r3
 8002d7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	613b      	str	r3, [r7, #16]
      break;
 8002d82:	e002      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d84:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d86:	613b      	str	r3, [r7, #16]
      break;
 8002d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8a:	693b      	ldr	r3, [r7, #16]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	371c      	adds	r7, #28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	007a1200 	.word	0x007a1200
 8002da0:	0800551c 	.word	0x0800551c
 8002da4:	0800552c 	.word	0x0800552c
 8002da8:	003d0900 	.word	0x003d0900

08002dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db0:	4b02      	ldr	r3, [pc, #8]	@ (8002dbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	20000000 	.word	0x20000000

08002dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc4:	f7ff fff2 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4903      	ldr	r1, [pc, #12]	@ (8002de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08005514 	.word	0x08005514

08002de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dec:	f7ff ffde 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	0adb      	lsrs	r3, r3, #11
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	@ (8002e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08005514 	.word	0x08005514

08002e10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e18:	4b0a      	ldr	r3, [pc, #40]	@ (8002e44 <RCC_Delay+0x34>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e48 <RCC_Delay+0x38>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	0a5b      	lsrs	r3, r3, #9
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e2c:	bf00      	nop
  }
  while (Delay --);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1e5a      	subs	r2, r3, #1
 8002e32:	60fa      	str	r2, [r7, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f9      	bne.n	8002e2c <RCC_Delay+0x1c>
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	20000000 	.word	0x20000000
 8002e48:	10624dd3 	.word	0x10624dd3

08002e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d07d      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6c:	4b4f      	ldr	r3, [pc, #316]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10d      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e78:	4b4c      	ldr	r3, [pc, #304]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	61d3      	str	r3, [r2, #28]
 8002e84:	4b49      	ldr	r3, [pc, #292]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e90:	2301      	movs	r3, #1
 8002e92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	4b46      	ldr	r3, [pc, #280]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d118      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea0:	4b43      	ldr	r3, [pc, #268]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a42      	ldr	r2, [pc, #264]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eac:	f7fe fad0 	bl	8001450 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb4:	f7fe facc 	bl	8001450 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	@ 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e06d      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ed2:	4b36      	ldr	r3, [pc, #216]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d02e      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d027      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ef8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002efa:	4b2e      	ldr	r3, [pc, #184]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f00:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f06:	4a29      	ldr	r2, [pc, #164]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d014      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f16:	f7fe fa9b 	bl	8001450 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7fe fa97 	bl	8001450 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e036      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f34:	4b1d      	ldr	r3, [pc, #116]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ee      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f40:	4b1a      	ldr	r3, [pc, #104]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4917      	ldr	r1, [pc, #92]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f58:	4b14      	ldr	r3, [pc, #80]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	4a13      	ldr	r2, [pc, #76]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f70:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	490b      	ldr	r1, [pc, #44]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f8e:	4b07      	ldr	r3, [pc, #28]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	4904      	ldr	r1, [pc, #16]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	42420440 	.word	0x42420440

08002fb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	f200 808a 	bhi.w	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d045      	beq.n	8003074 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d075      	beq.n	80030da <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002fee:	e082      	b.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002ff0:	4b46      	ldr	r3, [pc, #280]	@ (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002ff6:	4b45      	ldr	r3, [pc, #276]	@ (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d07b      	beq.n	80030fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	0c9b      	lsrs	r3, r3, #18
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	4a41      	ldr	r2, [pc, #260]	@ (8003110 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800300c:	5cd3      	ldrb	r3, [r2, r3]
 800300e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d015      	beq.n	8003046 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800301a:	4b3c      	ldr	r3, [pc, #240]	@ (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	0c5b      	lsrs	r3, r3, #17
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	4a3b      	ldr	r2, [pc, #236]	@ (8003114 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003026:	5cd3      	ldrb	r3, [r2, r3]
 8003028:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00d      	beq.n	8003050 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003034:	4a38      	ldr	r2, [pc, #224]	@ (8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	fbb2 f2f3 	udiv	r2, r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	e004      	b.n	8003050 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4a34      	ldr	r2, [pc, #208]	@ (800311c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003050:	4b2e      	ldr	r3, [pc, #184]	@ (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003058:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800305c:	d102      	bne.n	8003064 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	61bb      	str	r3, [r7, #24]
      break;
 8003062:	e04a      	b.n	80030fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4a2d      	ldr	r2, [pc, #180]	@ (8003120 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	61bb      	str	r3, [r7, #24]
      break;
 8003072:	e042      	b.n	80030fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003074:	4b25      	ldr	r3, [pc, #148]	@ (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003080:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003084:	d108      	bne.n	8003098 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003090:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	e01f      	b.n	80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800309e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030a2:	d109      	bne.n	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80030a4:	4b19      	ldr	r3, [pc, #100]	@ (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80030b0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	e00f      	b.n	80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030c2:	d11c      	bne.n	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030c4:	4b11      	ldr	r3, [pc, #68]	@ (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d016      	beq.n	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80030d0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80030d4:	61bb      	str	r3, [r7, #24]
      break;
 80030d6:	e012      	b.n	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030d8:	e011      	b.n	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80030da:	f7ff fe85 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 80030de:	4602      	mov	r2, r0
 80030e0:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	0b9b      	lsrs	r3, r3, #14
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	3301      	adds	r3, #1
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f2:	61bb      	str	r3, [r7, #24]
      break;
 80030f4:	e004      	b.n	8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030f6:	bf00      	nop
 80030f8:	e002      	b.n	8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030fa:	bf00      	nop
 80030fc:	e000      	b.n	8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030fe:	bf00      	nop
    }
  }
  return (frequency);
 8003100:	69bb      	ldr	r3, [r7, #24]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
 8003110:	08005530 	.word	0x08005530
 8003114:	08005540 	.word	0x08005540
 8003118:	007a1200 	.word	0x007a1200
 800311c:	003d0900 	.word	0x003d0900
 8003120:	aaaaaaab 	.word	0xaaaaaaab

08003124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e041      	b.n	80031ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd ff9c 	bl	8001088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f000 f98a 	bl	800347c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d001      	beq.n	80031dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e03a      	b.n	8003252 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a18      	ldr	r2, [pc, #96]	@ (800325c <HAL_TIM_Base_Start_IT+0x98>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00e      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x58>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003206:	d009      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x58>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a14      	ldr	r2, [pc, #80]	@ (8003260 <HAL_TIM_Base_Start_IT+0x9c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d004      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x58>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a13      	ldr	r2, [pc, #76]	@ (8003264 <HAL_TIM_Base_Start_IT+0xa0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d111      	bne.n	8003240 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b06      	cmp	r3, #6
 800322c:	d010      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0201 	orr.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323e:	e007      	b.n	8003250 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40000400 	.word	0x40000400
 8003264:	40000800 	.word	0x40000800

08003268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_TIM_ConfigClockSource+0x1c>
 8003280:	2302      	movs	r3, #2
 8003282:	e0b4      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x186>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032bc:	d03e      	beq.n	800333c <HAL_TIM_ConfigClockSource+0xd4>
 80032be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032c2:	f200 8087 	bhi.w	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ca:	f000 8086 	beq.w	80033da <HAL_TIM_ConfigClockSource+0x172>
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032d2:	d87f      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032d4:	2b70      	cmp	r3, #112	@ 0x70
 80032d6:	d01a      	beq.n	800330e <HAL_TIM_ConfigClockSource+0xa6>
 80032d8:	2b70      	cmp	r3, #112	@ 0x70
 80032da:	d87b      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032dc:	2b60      	cmp	r3, #96	@ 0x60
 80032de:	d050      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0x11a>
 80032e0:	2b60      	cmp	r3, #96	@ 0x60
 80032e2:	d877      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032e4:	2b50      	cmp	r3, #80	@ 0x50
 80032e6:	d03c      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0xfa>
 80032e8:	2b50      	cmp	r3, #80	@ 0x50
 80032ea:	d873      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032ec:	2b40      	cmp	r3, #64	@ 0x40
 80032ee:	d058      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0x13a>
 80032f0:	2b40      	cmp	r3, #64	@ 0x40
 80032f2:	d86f      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032f4:	2b30      	cmp	r3, #48	@ 0x30
 80032f6:	d064      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x15a>
 80032f8:	2b30      	cmp	r3, #48	@ 0x30
 80032fa:	d86b      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d060      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003300:	2b20      	cmp	r3, #32
 8003302:	d867      	bhi.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d05c      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003308:	2b10      	cmp	r3, #16
 800330a:	d05a      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x15a>
 800330c:	e062      	b.n	80033d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800331e:	f000 fa23 	bl	8003768 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003330:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	609a      	str	r2, [r3, #8]
      break;
 800333a:	e04f      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800334c:	f000 fa0c 	bl	8003768 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800335e:	609a      	str	r2, [r3, #8]
      break;
 8003360:	e03c      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800336e:	461a      	mov	r2, r3
 8003370:	f000 f983 	bl	800367a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2150      	movs	r1, #80	@ 0x50
 800337a:	4618      	mov	r0, r3
 800337c:	f000 f9da 	bl	8003734 <TIM_ITRx_SetConfig>
      break;
 8003380:	e02c      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800338e:	461a      	mov	r2, r3
 8003390:	f000 f9a1 	bl	80036d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2160      	movs	r1, #96	@ 0x60
 800339a:	4618      	mov	r0, r3
 800339c:	f000 f9ca 	bl	8003734 <TIM_ITRx_SetConfig>
      break;
 80033a0:	e01c      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ae:	461a      	mov	r2, r3
 80033b0:	f000 f963 	bl	800367a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2140      	movs	r1, #64	@ 0x40
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f9ba 	bl	8003734 <TIM_ITRx_SetConfig>
      break;
 80033c0:	e00c      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4619      	mov	r1, r3
 80033cc:	4610      	mov	r0, r2
 80033ce:	f000 f9b1 	bl	8003734 <TIM_ITRx_SetConfig>
      break;
 80033d2:	e003      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
      break;
 80033d8:	e000      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_TIM_SlaveConfigSynchro+0x18>
 800340a:	2302      	movs	r3, #2
 800340c:	e031      	b.n	8003472 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800341e:	6839      	ldr	r1, [r7, #0]
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f899 	bl	8003558 <TIM_SlaveTimer_SetConfig>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d009      	beq.n	8003440 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e018      	b.n	8003472 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800344e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800345e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a2f      	ldr	r2, [pc, #188]	@ (800354c <TIM_Base_SetConfig+0xd0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00b      	beq.n	80034ac <TIM_Base_SetConfig+0x30>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800349a:	d007      	beq.n	80034ac <TIM_Base_SetConfig+0x30>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a2c      	ldr	r2, [pc, #176]	@ (8003550 <TIM_Base_SetConfig+0xd4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_Base_SetConfig+0x30>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003554 <TIM_Base_SetConfig+0xd8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d108      	bne.n	80034be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a22      	ldr	r2, [pc, #136]	@ (800354c <TIM_Base_SetConfig+0xd0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00b      	beq.n	80034de <TIM_Base_SetConfig+0x62>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034cc:	d007      	beq.n	80034de <TIM_Base_SetConfig+0x62>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003550 <TIM_Base_SetConfig+0xd4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d003      	beq.n	80034de <TIM_Base_SetConfig+0x62>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003554 <TIM_Base_SetConfig+0xd8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d108      	bne.n	80034f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a0d      	ldr	r2, [pc, #52]	@ (800354c <TIM_Base_SetConfig+0xd0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d103      	bne.n	8003524 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f023 0201 	bic.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	611a      	str	r2, [r3, #16]
  }
}
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800

08003558 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003574:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f023 0307 	bic.w	r3, r3, #7
 8003586:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b70      	cmp	r3, #112	@ 0x70
 80035a0:	d01a      	beq.n	80035d8 <TIM_SlaveTimer_SetConfig+0x80>
 80035a2:	2b70      	cmp	r3, #112	@ 0x70
 80035a4:	d860      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x110>
 80035a6:	2b60      	cmp	r3, #96	@ 0x60
 80035a8:	d054      	beq.n	8003654 <TIM_SlaveTimer_SetConfig+0xfc>
 80035aa:	2b60      	cmp	r3, #96	@ 0x60
 80035ac:	d85c      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x110>
 80035ae:	2b50      	cmp	r3, #80	@ 0x50
 80035b0:	d046      	beq.n	8003640 <TIM_SlaveTimer_SetConfig+0xe8>
 80035b2:	2b50      	cmp	r3, #80	@ 0x50
 80035b4:	d858      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x110>
 80035b6:	2b40      	cmp	r3, #64	@ 0x40
 80035b8:	d019      	beq.n	80035ee <TIM_SlaveTimer_SetConfig+0x96>
 80035ba:	2b40      	cmp	r3, #64	@ 0x40
 80035bc:	d854      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x110>
 80035be:	2b30      	cmp	r3, #48	@ 0x30
 80035c0:	d055      	beq.n	800366e <TIM_SlaveTimer_SetConfig+0x116>
 80035c2:	2b30      	cmp	r3, #48	@ 0x30
 80035c4:	d850      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x110>
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d051      	beq.n	800366e <TIM_SlaveTimer_SetConfig+0x116>
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d84c      	bhi.n	8003668 <TIM_SlaveTimer_SetConfig+0x110>
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d04d      	beq.n	800366e <TIM_SlaveTimer_SetConfig+0x116>
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d04b      	beq.n	800366e <TIM_SlaveTimer_SetConfig+0x116>
 80035d6:	e047      	b.n	8003668 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80035e8:	f000 f8be 	bl	8003768 <TIM_ETR_SetConfig>
      break;
 80035ec:	e040      	b.n	8003670 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	d101      	bne.n	80035fa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e03b      	b.n	8003672 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003620:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	4313      	orrs	r3, r2
 800362c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	621a      	str	r2, [r3, #32]
      break;
 800363e:	e017      	b.n	8003670 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800364c:	461a      	mov	r2, r3
 800364e:	f000 f814 	bl	800367a <TIM_TI1_ConfigInputStage>
      break;
 8003652:	e00d      	b.n	8003670 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003660:	461a      	mov	r2, r3
 8003662:	f000 f838 	bl	80036d6 <TIM_TI2_ConfigInputStage>
      break;
 8003666:	e003      	b.n	8003670 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	75fb      	strb	r3, [r7, #23]
      break;
 800366c:	e000      	b.n	8003670 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800366e:	bf00      	nop
  }

  return status;
 8003670:	7dfb      	ldrb	r3, [r7, #23]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800367a:	b480      	push	{r7}
 800367c:	b087      	sub	sp, #28
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f023 0201 	bic.w	r2, r3, #1
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 030a 	bic.w	r3, r3, #10
 80036b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	621a      	str	r2, [r3, #32]
}
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b087      	sub	sp, #28
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f023 0210 	bic.w	r2, r3, #16
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003700:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	031b      	lsls	r3, r3, #12
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003712:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	621a      	str	r2, [r3, #32]
}
 800372a:	bf00      	nop
 800372c:	371c      	adds	r7, #28
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800374a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	f043 0307 	orr.w	r3, r3, #7
 8003756:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	609a      	str	r2, [r3, #8]
}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	431a      	orrs	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4313      	orrs	r3, r2
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	609a      	str	r2, [r3, #8]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
	...

080037a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037bc:	2302      	movs	r3, #2
 80037be:	e046      	b.n	800384e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a16      	ldr	r2, [pc, #88]	@ (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00e      	beq.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800380c:	d009      	beq.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a12      	ldr	r2, [pc, #72]	@ (800385c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d004      	beq.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a10      	ldr	r2, [pc, #64]	@ (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d10c      	bne.n	800383c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003828:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	4313      	orrs	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800

08003864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e042      	b.n	80038fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd fc96 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	@ 0x24
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fdd5 	bl	8004458 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	@ 0x28
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b20      	cmp	r3, #32
 8003922:	d175      	bne.n	8003a10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <HAL_UART_Transmit+0x2c>
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e06e      	b.n	8003a12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2221      	movs	r2, #33	@ 0x21
 800393e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003942:	f7fd fd85 	bl	8001450 <HAL_GetTick>
 8003946:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	88fa      	ldrh	r2, [r7, #6]
 800394c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	88fa      	ldrh	r2, [r7, #6]
 8003952:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800395c:	d108      	bne.n	8003970 <HAL_UART_Transmit+0x6c>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d104      	bne.n	8003970 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	e003      	b.n	8003978 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003978:	e02e      	b.n	80039d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2200      	movs	r2, #0
 8003982:	2180      	movs	r1, #128	@ 0x80
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fb39 	bl	8003ffc <UART_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e03a      	b.n	8003a12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10b      	bne.n	80039ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	3302      	adds	r3, #2
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	e007      	b.n	80039ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	781a      	ldrb	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	3301      	adds	r3, #1
 80039c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1cb      	bne.n	800397a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2200      	movs	r2, #0
 80039ea:	2140      	movs	r1, #64	@ 0x40
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fb05 	bl	8003ffc <UART_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e006      	b.n	8003a12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e000      	b.n	8003a12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
  }
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	4613      	mov	r3, r2
 8003a26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d112      	bne.n	8003a5a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_UART_Receive_IT+0x26>
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e00b      	b.n	8003a5c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fb2c 	bl	80040ae <UART_Start_Receive_IT>
 8003a56:	4603      	mov	r3, r0
 8003a58:	e000      	b.n	8003a5c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a5a:	2302      	movs	r3, #2
  }
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b0ba      	sub	sp, #232	@ 0xe8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_UART_IRQHandler+0x66>
 8003ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fc09 	bl	80042da <UART_Receive_IT>
      return;
 8003ac8:	e25b      	b.n	8003f82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 80de 	beq.w	8003c90 <HAL_UART_IRQHandler+0x22c>
 8003ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80d1 	beq.w	8003c90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_UART_IRQHandler+0xae>
 8003afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_UART_IRQHandler+0xd2>
 8003b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	f043 0202 	orr.w	r2, r3, #2
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_UART_IRQHandler+0xf6>
 8003b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	f043 0204 	orr.w	r2, r3, #4
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d011      	beq.n	8003b8a <HAL_UART_IRQHandler+0x126>
 8003b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d105      	bne.n	8003b7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	f043 0208 	orr.w	r2, r3, #8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 81f2 	beq.w	8003f78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x14e>
 8003ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fb94 	bl	80042da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf14      	ite	ne
 8003bc0:	2301      	movne	r3, #1
 8003bc2:	2300      	moveq	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d103      	bne.n	8003bde <HAL_UART_IRQHandler+0x17a>
 8003bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04f      	beq.n	8003c7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fa9e 	bl	8004120 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d041      	beq.n	8003c76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3314      	adds	r3, #20
 8003bf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3314      	adds	r3, #20
 8003c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1d9      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d013      	beq.n	8003c6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e44 <HAL_UART_IRQHandler+0x3e0>)
 8003c4c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fa84 	bl	8002160 <HAL_DMA_Abort_IT>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d016      	beq.n	8003c8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	e00e      	b.n	8003c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f993 	bl	8003f9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c74:	e00a      	b.n	8003c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f98f 	bl	8003f9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	e006      	b.n	8003c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f98b 	bl	8003f9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c8a:	e175      	b.n	8003f78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	bf00      	nop
    return;
 8003c8e:	e173      	b.n	8003f78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	f040 814f 	bne.w	8003f38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 8148 	beq.w	8003f38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8141 	beq.w	8003f38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80b6 	beq.w	8003e48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ce8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8145 	beq.w	8003f7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	f080 813e 	bcs.w	8003f7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	f000 8088 	beq.w	8003e24 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d40:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1d9      	bne.n	8003d14 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3314      	adds	r3, #20
 8003d66:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3314      	adds	r3, #20
 8003d80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d84:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d88:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e1      	bne.n	8003d60 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3314      	adds	r3, #20
 8003da2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003dac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003db2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3314      	adds	r3, #20
 8003dbc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003dc0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003dc2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003dc6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003dce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e3      	bne.n	8003d9c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	330c      	adds	r3, #12
 8003de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003df4:	f023 0310 	bic.w	r3, r3, #16
 8003df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e06:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e08:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e3      	bne.n	8003de2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe f963 	bl	80020ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f8b6 	bl	8003fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e40:	e09c      	b.n	8003f7c <HAL_UART_IRQHandler+0x518>
 8003e42:	bf00      	nop
 8003e44:	080041e5 	.word	0x080041e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 808e 	beq.w	8003f80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8089 	beq.w	8003f80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e92:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e3      	bne.n	8003e6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3314      	adds	r3, #20
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	623b      	str	r3, [r7, #32]
   return(result);
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3314      	adds	r3, #20
 8003ec6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003eca:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e3      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	e853 3f00 	ldrex	r3, [r3]
 8003efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0310 	bic.w	r3, r3, #16
 8003f02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f10:	61fa      	str	r2, [r7, #28]
 8003f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	69b9      	ldr	r1, [r7, #24]
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e3      	bne.n	8003eec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f83b 	bl	8003fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f36:	e023      	b.n	8003f80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <HAL_UART_IRQHandler+0x4f4>
 8003f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f95b 	bl	800420c <UART_Transmit_IT>
    return;
 8003f56:	e014      	b.n	8003f82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00e      	beq.n	8003f82 <HAL_UART_IRQHandler+0x51e>
 8003f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f99a 	bl	80042aa <UART_EndTransmit_IT>
    return;
 8003f76:	e004      	b.n	8003f82 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f78:	bf00      	nop
 8003f7a:	e002      	b.n	8003f82 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f7c:	bf00      	nop
 8003f7e:	e000      	b.n	8003f82 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f80:	bf00      	nop
  }
}
 8003f82:	37e8      	adds	r7, #232	@ 0xe8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr

08003f9a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr

08003fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	b2db      	uxtb	r3, r3
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400c:	e03b      	b.n	8004086 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d037      	beq.n	8004086 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004016:	f7fd fa1b 	bl	8001450 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	6a3a      	ldr	r2, [r7, #32]
 8004022:	429a      	cmp	r2, r3
 8004024:	d302      	bcc.n	800402c <UART_WaitOnFlagUntilTimeout+0x30>
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e03a      	b.n	80040a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d023      	beq.n	8004086 <UART_WaitOnFlagUntilTimeout+0x8a>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b80      	cmp	r3, #128	@ 0x80
 8004042:	d020      	beq.n	8004086 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b40      	cmp	r3, #64	@ 0x40
 8004048:	d01d      	beq.n	8004086 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b08      	cmp	r3, #8
 8004056:	d116      	bne.n	8004086 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f856 	bl	8004120 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2208      	movs	r2, #8
 8004078:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e00f      	b.n	80040a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4013      	ands	r3, r2
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	429a      	cmp	r2, r3
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d0b4      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	4613      	mov	r3, r2
 80040ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2222      	movs	r2, #34	@ 0x22
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0220 	orr.w	r2, r2, #32
 8004112:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b095      	sub	sp, #84	@ 0x54
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800413e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004148:	643a      	str	r2, [r7, #64]	@ 0x40
 800414a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800414e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e5      	bne.n	8004128 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3314      	adds	r3, #20
 8004162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	61fb      	str	r3, [r7, #28]
   return(result);
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3314      	adds	r3, #20
 800417a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800417c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800417e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004194:	2b01      	cmp	r3, #1
 8004196:	d119      	bne.n	80041cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	330c      	adds	r3, #12
 800419e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	e853 3f00 	ldrex	r3, [r3]
 80041a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f023 0310 	bic.w	r3, r3, #16
 80041ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	330c      	adds	r3, #12
 80041b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041b8:	61ba      	str	r2, [r7, #24]
 80041ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	6979      	ldr	r1, [r7, #20]
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	613b      	str	r3, [r7, #16]
   return(result);
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e5      	bne.n	8004198 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041da:	bf00      	nop
 80041dc:	3754      	adds	r7, #84	@ 0x54
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff fecb 	bl	8003f9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b21      	cmp	r3, #33	@ 0x21
 800421e:	d13e      	bne.n	800429e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004228:	d114      	bne.n	8004254 <UART_Transmit_IT+0x48>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d110      	bne.n	8004254 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004246:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	1c9a      	adds	r2, r3, #2
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	621a      	str	r2, [r3, #32]
 8004252:	e008      	b.n	8004266 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	1c59      	adds	r1, r3, #1
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6211      	str	r1, [r2, #32]
 800425e:	781a      	ldrb	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29b      	uxth	r3, r3
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4619      	mov	r1, r3
 8004274:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10f      	bne.n	800429a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004288:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004298:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	e000      	b.n	80042a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800429e:	2302      	movs	r3, #2
  }
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr

080042aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff fe5c 	bl	8003f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b08c      	sub	sp, #48	@ 0x30
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b22      	cmp	r3, #34	@ 0x22
 80042ec:	f040 80ae 	bne.w	800444c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042f8:	d117      	bne.n	800432a <UART_Receive_IT+0x50>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d113      	bne.n	800432a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004302:	2300      	movs	r3, #0
 8004304:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004318:	b29a      	uxth	r2, r3
 800431a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	1c9a      	adds	r2, r3, #2
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	629a      	str	r2, [r3, #40]	@ 0x28
 8004328:	e026      	b.n	8004378 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004330:	2300      	movs	r3, #0
 8004332:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433c:	d007      	beq.n	800434e <UART_Receive_IT+0x74>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <UART_Receive_IT+0x82>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	b2da      	uxtb	r2, r3
 8004356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	e008      	b.n	800436e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004368:	b2da      	uxtb	r2, r3
 800436a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29b      	uxth	r3, r3
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	4619      	mov	r1, r3
 8004386:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004388:	2b00      	cmp	r3, #0
 800438a:	d15d      	bne.n	8004448 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0220 	bic.w	r2, r2, #32
 800439a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d135      	bne.n	800443e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	613b      	str	r3, [r7, #16]
   return(result);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f023 0310 	bic.w	r3, r3, #16
 80043ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	330c      	adds	r3, #12
 80043f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f8:	623a      	str	r2, [r7, #32]
 80043fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	69f9      	ldr	r1, [r7, #28]
 80043fe:	6a3a      	ldr	r2, [r7, #32]
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	61bb      	str	r3, [r7, #24]
   return(result);
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e5      	bne.n	80043d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b10      	cmp	r3, #16
 8004418:	d10a      	bne.n	8004430 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fdb8 	bl	8003fac <HAL_UARTEx_RxEventCallback>
 800443c:	e002      	b.n	8004444 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fb ffec 	bl	800041c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	e002      	b.n	800444e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	e000      	b.n	800444e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800444c:	2302      	movs	r3, #2
  }
}
 800444e:	4618      	mov	r0, r3
 8004450:	3730      	adds	r7, #48	@ 0x30
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004492:	f023 030c 	bic.w	r3, r3, #12
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	430b      	orrs	r3, r1
 800449e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2c      	ldr	r2, [pc, #176]	@ (800456c <UART_SetConfig+0x114>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d103      	bne.n	80044c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044c0:	f7fe fc92 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	e002      	b.n	80044ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044c8:	f7fe fc7a 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 80044cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009a      	lsls	r2, r3, #2
 80044d8:	441a      	add	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	4a22      	ldr	r2, [pc, #136]	@ (8004570 <UART_SetConfig+0x118>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	0119      	lsls	r1, r3, #4
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009a      	lsls	r2, r3, #2
 80044f8:	441a      	add	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	fbb2 f2f3 	udiv	r2, r2, r3
 8004504:	4b1a      	ldr	r3, [pc, #104]	@ (8004570 <UART_SetConfig+0x118>)
 8004506:	fba3 0302 	umull	r0, r3, r3, r2
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2064      	movs	r0, #100	@ 0x64
 800450e:	fb00 f303 	mul.w	r3, r0, r3
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	3332      	adds	r3, #50	@ 0x32
 8004518:	4a15      	ldr	r2, [pc, #84]	@ (8004570 <UART_SetConfig+0x118>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004524:	4419      	add	r1, r3
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009a      	lsls	r2, r3, #2
 8004530:	441a      	add	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	fbb2 f2f3 	udiv	r2, r2, r3
 800453c:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <UART_SetConfig+0x118>)
 800453e:	fba3 0302 	umull	r0, r3, r3, r2
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	2064      	movs	r0, #100	@ 0x64
 8004546:	fb00 f303 	mul.w	r3, r0, r3
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	3332      	adds	r3, #50	@ 0x32
 8004550:	4a07      	ldr	r2, [pc, #28]	@ (8004570 <UART_SetConfig+0x118>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	f003 020f 	and.w	r2, r3, #15
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	440a      	add	r2, r1
 8004562:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004564:	bf00      	nop
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40013800 	.word	0x40013800
 8004570:	51eb851f 	.word	0x51eb851f

08004574 <std>:
 8004574:	2300      	movs	r3, #0
 8004576:	b510      	push	{r4, lr}
 8004578:	4604      	mov	r4, r0
 800457a:	e9c0 3300 	strd	r3, r3, [r0]
 800457e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004582:	6083      	str	r3, [r0, #8]
 8004584:	8181      	strh	r1, [r0, #12]
 8004586:	6643      	str	r3, [r0, #100]	@ 0x64
 8004588:	81c2      	strh	r2, [r0, #14]
 800458a:	6183      	str	r3, [r0, #24]
 800458c:	4619      	mov	r1, r3
 800458e:	2208      	movs	r2, #8
 8004590:	305c      	adds	r0, #92	@ 0x5c
 8004592:	f000 f9f9 	bl	8004988 <memset>
 8004596:	4b0d      	ldr	r3, [pc, #52]	@ (80045cc <std+0x58>)
 8004598:	6224      	str	r4, [r4, #32]
 800459a:	6263      	str	r3, [r4, #36]	@ 0x24
 800459c:	4b0c      	ldr	r3, [pc, #48]	@ (80045d0 <std+0x5c>)
 800459e:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045a0:	4b0c      	ldr	r3, [pc, #48]	@ (80045d4 <std+0x60>)
 80045a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045a4:	4b0c      	ldr	r3, [pc, #48]	@ (80045d8 <std+0x64>)
 80045a6:	6323      	str	r3, [r4, #48]	@ 0x30
 80045a8:	4b0c      	ldr	r3, [pc, #48]	@ (80045dc <std+0x68>)
 80045aa:	429c      	cmp	r4, r3
 80045ac:	d006      	beq.n	80045bc <std+0x48>
 80045ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045b2:	4294      	cmp	r4, r2
 80045b4:	d002      	beq.n	80045bc <std+0x48>
 80045b6:	33d0      	adds	r3, #208	@ 0xd0
 80045b8:	429c      	cmp	r4, r3
 80045ba:	d105      	bne.n	80045c8 <std+0x54>
 80045bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80045c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045c4:	f000 ba58 	b.w	8004a78 <__retarget_lock_init_recursive>
 80045c8:	bd10      	pop	{r4, pc}
 80045ca:	bf00      	nop
 80045cc:	080047d9 	.word	0x080047d9
 80045d0:	080047fb 	.word	0x080047fb
 80045d4:	08004833 	.word	0x08004833
 80045d8:	08004857 	.word	0x08004857
 80045dc:	200003f8 	.word	0x200003f8

080045e0 <stdio_exit_handler>:
 80045e0:	4a02      	ldr	r2, [pc, #8]	@ (80045ec <stdio_exit_handler+0xc>)
 80045e2:	4903      	ldr	r1, [pc, #12]	@ (80045f0 <stdio_exit_handler+0x10>)
 80045e4:	4803      	ldr	r0, [pc, #12]	@ (80045f4 <stdio_exit_handler+0x14>)
 80045e6:	f000 b869 	b.w	80046bc <_fwalk_sglue>
 80045ea:	bf00      	nop
 80045ec:	2000000c 	.word	0x2000000c
 80045f0:	0800530d 	.word	0x0800530d
 80045f4:	2000001c 	.word	0x2000001c

080045f8 <cleanup_stdio>:
 80045f8:	6841      	ldr	r1, [r0, #4]
 80045fa:	4b0c      	ldr	r3, [pc, #48]	@ (800462c <cleanup_stdio+0x34>)
 80045fc:	b510      	push	{r4, lr}
 80045fe:	4299      	cmp	r1, r3
 8004600:	4604      	mov	r4, r0
 8004602:	d001      	beq.n	8004608 <cleanup_stdio+0x10>
 8004604:	f000 fe82 	bl	800530c <_fflush_r>
 8004608:	68a1      	ldr	r1, [r4, #8]
 800460a:	4b09      	ldr	r3, [pc, #36]	@ (8004630 <cleanup_stdio+0x38>)
 800460c:	4299      	cmp	r1, r3
 800460e:	d002      	beq.n	8004616 <cleanup_stdio+0x1e>
 8004610:	4620      	mov	r0, r4
 8004612:	f000 fe7b 	bl	800530c <_fflush_r>
 8004616:	68e1      	ldr	r1, [r4, #12]
 8004618:	4b06      	ldr	r3, [pc, #24]	@ (8004634 <cleanup_stdio+0x3c>)
 800461a:	4299      	cmp	r1, r3
 800461c:	d004      	beq.n	8004628 <cleanup_stdio+0x30>
 800461e:	4620      	mov	r0, r4
 8004620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004624:	f000 be72 	b.w	800530c <_fflush_r>
 8004628:	bd10      	pop	{r4, pc}
 800462a:	bf00      	nop
 800462c:	200003f8 	.word	0x200003f8
 8004630:	20000460 	.word	0x20000460
 8004634:	200004c8 	.word	0x200004c8

08004638 <global_stdio_init.part.0>:
 8004638:	b510      	push	{r4, lr}
 800463a:	4b0b      	ldr	r3, [pc, #44]	@ (8004668 <global_stdio_init.part.0+0x30>)
 800463c:	4c0b      	ldr	r4, [pc, #44]	@ (800466c <global_stdio_init.part.0+0x34>)
 800463e:	4a0c      	ldr	r2, [pc, #48]	@ (8004670 <global_stdio_init.part.0+0x38>)
 8004640:	4620      	mov	r0, r4
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	2104      	movs	r1, #4
 8004646:	2200      	movs	r2, #0
 8004648:	f7ff ff94 	bl	8004574 <std>
 800464c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004650:	2201      	movs	r2, #1
 8004652:	2109      	movs	r1, #9
 8004654:	f7ff ff8e 	bl	8004574 <std>
 8004658:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800465c:	2202      	movs	r2, #2
 800465e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004662:	2112      	movs	r1, #18
 8004664:	f7ff bf86 	b.w	8004574 <std>
 8004668:	20000530 	.word	0x20000530
 800466c:	200003f8 	.word	0x200003f8
 8004670:	080045e1 	.word	0x080045e1

08004674 <__sfp_lock_acquire>:
 8004674:	4801      	ldr	r0, [pc, #4]	@ (800467c <__sfp_lock_acquire+0x8>)
 8004676:	f000 ba00 	b.w	8004a7a <__retarget_lock_acquire_recursive>
 800467a:	bf00      	nop
 800467c:	20000539 	.word	0x20000539

08004680 <__sfp_lock_release>:
 8004680:	4801      	ldr	r0, [pc, #4]	@ (8004688 <__sfp_lock_release+0x8>)
 8004682:	f000 b9fb 	b.w	8004a7c <__retarget_lock_release_recursive>
 8004686:	bf00      	nop
 8004688:	20000539 	.word	0x20000539

0800468c <__sinit>:
 800468c:	b510      	push	{r4, lr}
 800468e:	4604      	mov	r4, r0
 8004690:	f7ff fff0 	bl	8004674 <__sfp_lock_acquire>
 8004694:	6a23      	ldr	r3, [r4, #32]
 8004696:	b11b      	cbz	r3, 80046a0 <__sinit+0x14>
 8004698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800469c:	f7ff bff0 	b.w	8004680 <__sfp_lock_release>
 80046a0:	4b04      	ldr	r3, [pc, #16]	@ (80046b4 <__sinit+0x28>)
 80046a2:	6223      	str	r3, [r4, #32]
 80046a4:	4b04      	ldr	r3, [pc, #16]	@ (80046b8 <__sinit+0x2c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f5      	bne.n	8004698 <__sinit+0xc>
 80046ac:	f7ff ffc4 	bl	8004638 <global_stdio_init.part.0>
 80046b0:	e7f2      	b.n	8004698 <__sinit+0xc>
 80046b2:	bf00      	nop
 80046b4:	080045f9 	.word	0x080045f9
 80046b8:	20000530 	.word	0x20000530

080046bc <_fwalk_sglue>:
 80046bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046c0:	4607      	mov	r7, r0
 80046c2:	4688      	mov	r8, r1
 80046c4:	4614      	mov	r4, r2
 80046c6:	2600      	movs	r6, #0
 80046c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046cc:	f1b9 0901 	subs.w	r9, r9, #1
 80046d0:	d505      	bpl.n	80046de <_fwalk_sglue+0x22>
 80046d2:	6824      	ldr	r4, [r4, #0]
 80046d4:	2c00      	cmp	r4, #0
 80046d6:	d1f7      	bne.n	80046c8 <_fwalk_sglue+0xc>
 80046d8:	4630      	mov	r0, r6
 80046da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046de:	89ab      	ldrh	r3, [r5, #12]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d907      	bls.n	80046f4 <_fwalk_sglue+0x38>
 80046e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046e8:	3301      	adds	r3, #1
 80046ea:	d003      	beq.n	80046f4 <_fwalk_sglue+0x38>
 80046ec:	4629      	mov	r1, r5
 80046ee:	4638      	mov	r0, r7
 80046f0:	47c0      	blx	r8
 80046f2:	4306      	orrs	r6, r0
 80046f4:	3568      	adds	r5, #104	@ 0x68
 80046f6:	e7e9      	b.n	80046cc <_fwalk_sglue+0x10>

080046f8 <iprintf>:
 80046f8:	b40f      	push	{r0, r1, r2, r3}
 80046fa:	b507      	push	{r0, r1, r2, lr}
 80046fc:	4906      	ldr	r1, [pc, #24]	@ (8004718 <iprintf+0x20>)
 80046fe:	ab04      	add	r3, sp, #16
 8004700:	6808      	ldr	r0, [r1, #0]
 8004702:	f853 2b04 	ldr.w	r2, [r3], #4
 8004706:	6881      	ldr	r1, [r0, #8]
 8004708:	9301      	str	r3, [sp, #4]
 800470a:	f000 fad7 	bl	8004cbc <_vfiprintf_r>
 800470e:	b003      	add	sp, #12
 8004710:	f85d eb04 	ldr.w	lr, [sp], #4
 8004714:	b004      	add	sp, #16
 8004716:	4770      	bx	lr
 8004718:	20000018 	.word	0x20000018

0800471c <_puts_r>:
 800471c:	6a03      	ldr	r3, [r0, #32]
 800471e:	b570      	push	{r4, r5, r6, lr}
 8004720:	4605      	mov	r5, r0
 8004722:	460e      	mov	r6, r1
 8004724:	6884      	ldr	r4, [r0, #8]
 8004726:	b90b      	cbnz	r3, 800472c <_puts_r+0x10>
 8004728:	f7ff ffb0 	bl	800468c <__sinit>
 800472c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800472e:	07db      	lsls	r3, r3, #31
 8004730:	d405      	bmi.n	800473e <_puts_r+0x22>
 8004732:	89a3      	ldrh	r3, [r4, #12]
 8004734:	0598      	lsls	r0, r3, #22
 8004736:	d402      	bmi.n	800473e <_puts_r+0x22>
 8004738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800473a:	f000 f99e 	bl	8004a7a <__retarget_lock_acquire_recursive>
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	0719      	lsls	r1, r3, #28
 8004742:	d502      	bpl.n	800474a <_puts_r+0x2e>
 8004744:	6923      	ldr	r3, [r4, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d135      	bne.n	80047b6 <_puts_r+0x9a>
 800474a:	4621      	mov	r1, r4
 800474c:	4628      	mov	r0, r5
 800474e:	f000 f8c5 	bl	80048dc <__swsetup_r>
 8004752:	b380      	cbz	r0, 80047b6 <_puts_r+0x9a>
 8004754:	f04f 35ff 	mov.w	r5, #4294967295
 8004758:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800475a:	07da      	lsls	r2, r3, #31
 800475c:	d405      	bmi.n	800476a <_puts_r+0x4e>
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	059b      	lsls	r3, r3, #22
 8004762:	d402      	bmi.n	800476a <_puts_r+0x4e>
 8004764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004766:	f000 f989 	bl	8004a7c <__retarget_lock_release_recursive>
 800476a:	4628      	mov	r0, r5
 800476c:	bd70      	pop	{r4, r5, r6, pc}
 800476e:	2b00      	cmp	r3, #0
 8004770:	da04      	bge.n	800477c <_puts_r+0x60>
 8004772:	69a2      	ldr	r2, [r4, #24]
 8004774:	429a      	cmp	r2, r3
 8004776:	dc17      	bgt.n	80047a8 <_puts_r+0x8c>
 8004778:	290a      	cmp	r1, #10
 800477a:	d015      	beq.n	80047a8 <_puts_r+0x8c>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	6022      	str	r2, [r4, #0]
 8004782:	7019      	strb	r1, [r3, #0]
 8004784:	68a3      	ldr	r3, [r4, #8]
 8004786:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800478a:	3b01      	subs	r3, #1
 800478c:	60a3      	str	r3, [r4, #8]
 800478e:	2900      	cmp	r1, #0
 8004790:	d1ed      	bne.n	800476e <_puts_r+0x52>
 8004792:	2b00      	cmp	r3, #0
 8004794:	da11      	bge.n	80047ba <_puts_r+0x9e>
 8004796:	4622      	mov	r2, r4
 8004798:	210a      	movs	r1, #10
 800479a:	4628      	mov	r0, r5
 800479c:	f000 f85f 	bl	800485e <__swbuf_r>
 80047a0:	3001      	adds	r0, #1
 80047a2:	d0d7      	beq.n	8004754 <_puts_r+0x38>
 80047a4:	250a      	movs	r5, #10
 80047a6:	e7d7      	b.n	8004758 <_puts_r+0x3c>
 80047a8:	4622      	mov	r2, r4
 80047aa:	4628      	mov	r0, r5
 80047ac:	f000 f857 	bl	800485e <__swbuf_r>
 80047b0:	3001      	adds	r0, #1
 80047b2:	d1e7      	bne.n	8004784 <_puts_r+0x68>
 80047b4:	e7ce      	b.n	8004754 <_puts_r+0x38>
 80047b6:	3e01      	subs	r6, #1
 80047b8:	e7e4      	b.n	8004784 <_puts_r+0x68>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	6022      	str	r2, [r4, #0]
 80047c0:	220a      	movs	r2, #10
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	e7ee      	b.n	80047a4 <_puts_r+0x88>
	...

080047c8 <puts>:
 80047c8:	4b02      	ldr	r3, [pc, #8]	@ (80047d4 <puts+0xc>)
 80047ca:	4601      	mov	r1, r0
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	f7ff bfa5 	b.w	800471c <_puts_r>
 80047d2:	bf00      	nop
 80047d4:	20000018 	.word	0x20000018

080047d8 <__sread>:
 80047d8:	b510      	push	{r4, lr}
 80047da:	460c      	mov	r4, r1
 80047dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e0:	f000 f8fc 	bl	80049dc <_read_r>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	bfab      	itete	ge
 80047e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047ea:	89a3      	ldrhlt	r3, [r4, #12]
 80047ec:	181b      	addge	r3, r3, r0
 80047ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047f2:	bfac      	ite	ge
 80047f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047f6:	81a3      	strhlt	r3, [r4, #12]
 80047f8:	bd10      	pop	{r4, pc}

080047fa <__swrite>:
 80047fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fe:	461f      	mov	r7, r3
 8004800:	898b      	ldrh	r3, [r1, #12]
 8004802:	4605      	mov	r5, r0
 8004804:	05db      	lsls	r3, r3, #23
 8004806:	460c      	mov	r4, r1
 8004808:	4616      	mov	r6, r2
 800480a:	d505      	bpl.n	8004818 <__swrite+0x1e>
 800480c:	2302      	movs	r3, #2
 800480e:	2200      	movs	r2, #0
 8004810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004814:	f000 f8d0 	bl	80049b8 <_lseek_r>
 8004818:	89a3      	ldrh	r3, [r4, #12]
 800481a:	4632      	mov	r2, r6
 800481c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004820:	81a3      	strh	r3, [r4, #12]
 8004822:	4628      	mov	r0, r5
 8004824:	463b      	mov	r3, r7
 8004826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800482a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800482e:	f000 b8e7 	b.w	8004a00 <_write_r>

08004832 <__sseek>:
 8004832:	b510      	push	{r4, lr}
 8004834:	460c      	mov	r4, r1
 8004836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800483a:	f000 f8bd 	bl	80049b8 <_lseek_r>
 800483e:	1c43      	adds	r3, r0, #1
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	bf15      	itete	ne
 8004844:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004846:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800484a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800484e:	81a3      	strheq	r3, [r4, #12]
 8004850:	bf18      	it	ne
 8004852:	81a3      	strhne	r3, [r4, #12]
 8004854:	bd10      	pop	{r4, pc}

08004856 <__sclose>:
 8004856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800485a:	f000 b89d 	b.w	8004998 <_close_r>

0800485e <__swbuf_r>:
 800485e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004860:	460e      	mov	r6, r1
 8004862:	4614      	mov	r4, r2
 8004864:	4605      	mov	r5, r0
 8004866:	b118      	cbz	r0, 8004870 <__swbuf_r+0x12>
 8004868:	6a03      	ldr	r3, [r0, #32]
 800486a:	b90b      	cbnz	r3, 8004870 <__swbuf_r+0x12>
 800486c:	f7ff ff0e 	bl	800468c <__sinit>
 8004870:	69a3      	ldr	r3, [r4, #24]
 8004872:	60a3      	str	r3, [r4, #8]
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	071a      	lsls	r2, r3, #28
 8004878:	d501      	bpl.n	800487e <__swbuf_r+0x20>
 800487a:	6923      	ldr	r3, [r4, #16]
 800487c:	b943      	cbnz	r3, 8004890 <__swbuf_r+0x32>
 800487e:	4621      	mov	r1, r4
 8004880:	4628      	mov	r0, r5
 8004882:	f000 f82b 	bl	80048dc <__swsetup_r>
 8004886:	b118      	cbz	r0, 8004890 <__swbuf_r+0x32>
 8004888:	f04f 37ff 	mov.w	r7, #4294967295
 800488c:	4638      	mov	r0, r7
 800488e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	6922      	ldr	r2, [r4, #16]
 8004894:	b2f6      	uxtb	r6, r6
 8004896:	1a98      	subs	r0, r3, r2
 8004898:	6963      	ldr	r3, [r4, #20]
 800489a:	4637      	mov	r7, r6
 800489c:	4283      	cmp	r3, r0
 800489e:	dc05      	bgt.n	80048ac <__swbuf_r+0x4e>
 80048a0:	4621      	mov	r1, r4
 80048a2:	4628      	mov	r0, r5
 80048a4:	f000 fd32 	bl	800530c <_fflush_r>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d1ed      	bne.n	8004888 <__swbuf_r+0x2a>
 80048ac:	68a3      	ldr	r3, [r4, #8]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	60a3      	str	r3, [r4, #8]
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	6022      	str	r2, [r4, #0]
 80048b8:	701e      	strb	r6, [r3, #0]
 80048ba:	6962      	ldr	r2, [r4, #20]
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	429a      	cmp	r2, r3
 80048c0:	d004      	beq.n	80048cc <__swbuf_r+0x6e>
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	07db      	lsls	r3, r3, #31
 80048c6:	d5e1      	bpl.n	800488c <__swbuf_r+0x2e>
 80048c8:	2e0a      	cmp	r6, #10
 80048ca:	d1df      	bne.n	800488c <__swbuf_r+0x2e>
 80048cc:	4621      	mov	r1, r4
 80048ce:	4628      	mov	r0, r5
 80048d0:	f000 fd1c 	bl	800530c <_fflush_r>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d0d9      	beq.n	800488c <__swbuf_r+0x2e>
 80048d8:	e7d6      	b.n	8004888 <__swbuf_r+0x2a>
	...

080048dc <__swsetup_r>:
 80048dc:	b538      	push	{r3, r4, r5, lr}
 80048de:	4b29      	ldr	r3, [pc, #164]	@ (8004984 <__swsetup_r+0xa8>)
 80048e0:	4605      	mov	r5, r0
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	460c      	mov	r4, r1
 80048e6:	b118      	cbz	r0, 80048f0 <__swsetup_r+0x14>
 80048e8:	6a03      	ldr	r3, [r0, #32]
 80048ea:	b90b      	cbnz	r3, 80048f0 <__swsetup_r+0x14>
 80048ec:	f7ff fece 	bl	800468c <__sinit>
 80048f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048f4:	0719      	lsls	r1, r3, #28
 80048f6:	d422      	bmi.n	800493e <__swsetup_r+0x62>
 80048f8:	06da      	lsls	r2, r3, #27
 80048fa:	d407      	bmi.n	800490c <__swsetup_r+0x30>
 80048fc:	2209      	movs	r2, #9
 80048fe:	602a      	str	r2, [r5, #0]
 8004900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	81a3      	strh	r3, [r4, #12]
 800490a:	e033      	b.n	8004974 <__swsetup_r+0x98>
 800490c:	0758      	lsls	r0, r3, #29
 800490e:	d512      	bpl.n	8004936 <__swsetup_r+0x5a>
 8004910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004912:	b141      	cbz	r1, 8004926 <__swsetup_r+0x4a>
 8004914:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004918:	4299      	cmp	r1, r3
 800491a:	d002      	beq.n	8004922 <__swsetup_r+0x46>
 800491c:	4628      	mov	r0, r5
 800491e:	f000 f8af 	bl	8004a80 <_free_r>
 8004922:	2300      	movs	r3, #0
 8004924:	6363      	str	r3, [r4, #52]	@ 0x34
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800492c:	81a3      	strh	r3, [r4, #12]
 800492e:	2300      	movs	r3, #0
 8004930:	6063      	str	r3, [r4, #4]
 8004932:	6923      	ldr	r3, [r4, #16]
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	f043 0308 	orr.w	r3, r3, #8
 800493c:	81a3      	strh	r3, [r4, #12]
 800493e:	6923      	ldr	r3, [r4, #16]
 8004940:	b94b      	cbnz	r3, 8004956 <__swsetup_r+0x7a>
 8004942:	89a3      	ldrh	r3, [r4, #12]
 8004944:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800494c:	d003      	beq.n	8004956 <__swsetup_r+0x7a>
 800494e:	4621      	mov	r1, r4
 8004950:	4628      	mov	r0, r5
 8004952:	f000 fd28 	bl	80053a6 <__smakebuf_r>
 8004956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800495a:	f013 0201 	ands.w	r2, r3, #1
 800495e:	d00a      	beq.n	8004976 <__swsetup_r+0x9a>
 8004960:	2200      	movs	r2, #0
 8004962:	60a2      	str	r2, [r4, #8]
 8004964:	6962      	ldr	r2, [r4, #20]
 8004966:	4252      	negs	r2, r2
 8004968:	61a2      	str	r2, [r4, #24]
 800496a:	6922      	ldr	r2, [r4, #16]
 800496c:	b942      	cbnz	r2, 8004980 <__swsetup_r+0xa4>
 800496e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004972:	d1c5      	bne.n	8004900 <__swsetup_r+0x24>
 8004974:	bd38      	pop	{r3, r4, r5, pc}
 8004976:	0799      	lsls	r1, r3, #30
 8004978:	bf58      	it	pl
 800497a:	6962      	ldrpl	r2, [r4, #20]
 800497c:	60a2      	str	r2, [r4, #8]
 800497e:	e7f4      	b.n	800496a <__swsetup_r+0x8e>
 8004980:	2000      	movs	r0, #0
 8004982:	e7f7      	b.n	8004974 <__swsetup_r+0x98>
 8004984:	20000018 	.word	0x20000018

08004988 <memset>:
 8004988:	4603      	mov	r3, r0
 800498a:	4402      	add	r2, r0
 800498c:	4293      	cmp	r3, r2
 800498e:	d100      	bne.n	8004992 <memset+0xa>
 8004990:	4770      	bx	lr
 8004992:	f803 1b01 	strb.w	r1, [r3], #1
 8004996:	e7f9      	b.n	800498c <memset+0x4>

08004998 <_close_r>:
 8004998:	b538      	push	{r3, r4, r5, lr}
 800499a:	2300      	movs	r3, #0
 800499c:	4d05      	ldr	r5, [pc, #20]	@ (80049b4 <_close_r+0x1c>)
 800499e:	4604      	mov	r4, r0
 80049a0:	4608      	mov	r0, r1
 80049a2:	602b      	str	r3, [r5, #0]
 80049a4:	f7fc fa9f 	bl	8000ee6 <_close>
 80049a8:	1c43      	adds	r3, r0, #1
 80049aa:	d102      	bne.n	80049b2 <_close_r+0x1a>
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	b103      	cbz	r3, 80049b2 <_close_r+0x1a>
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	20000534 	.word	0x20000534

080049b8 <_lseek_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	4604      	mov	r4, r0
 80049bc:	4608      	mov	r0, r1
 80049be:	4611      	mov	r1, r2
 80049c0:	2200      	movs	r2, #0
 80049c2:	4d05      	ldr	r5, [pc, #20]	@ (80049d8 <_lseek_r+0x20>)
 80049c4:	602a      	str	r2, [r5, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	f7fc fab1 	bl	8000f2e <_lseek>
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	d102      	bne.n	80049d6 <_lseek_r+0x1e>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	b103      	cbz	r3, 80049d6 <_lseek_r+0x1e>
 80049d4:	6023      	str	r3, [r4, #0]
 80049d6:	bd38      	pop	{r3, r4, r5, pc}
 80049d8:	20000534 	.word	0x20000534

080049dc <_read_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	4604      	mov	r4, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	4611      	mov	r1, r2
 80049e4:	2200      	movs	r2, #0
 80049e6:	4d05      	ldr	r5, [pc, #20]	@ (80049fc <_read_r+0x20>)
 80049e8:	602a      	str	r2, [r5, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f7fc fa5e 	bl	8000eac <_read>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_read_r+0x1e>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_read_r+0x1e>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	20000534 	.word	0x20000534

08004a00 <_write_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4604      	mov	r4, r0
 8004a04:	4608      	mov	r0, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4d05      	ldr	r5, [pc, #20]	@ (8004a20 <_write_r+0x20>)
 8004a0c:	602a      	str	r2, [r5, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f7fc f92a 	bl	8000c68 <_write>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_write_r+0x1e>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_write_r+0x1e>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	20000534 	.word	0x20000534

08004a24 <__errno>:
 8004a24:	4b01      	ldr	r3, [pc, #4]	@ (8004a2c <__errno+0x8>)
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	20000018 	.word	0x20000018

08004a30 <__libc_init_array>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	2600      	movs	r6, #0
 8004a34:	4d0c      	ldr	r5, [pc, #48]	@ (8004a68 <__libc_init_array+0x38>)
 8004a36:	4c0d      	ldr	r4, [pc, #52]	@ (8004a6c <__libc_init_array+0x3c>)
 8004a38:	1b64      	subs	r4, r4, r5
 8004a3a:	10a4      	asrs	r4, r4, #2
 8004a3c:	42a6      	cmp	r6, r4
 8004a3e:	d109      	bne.n	8004a54 <__libc_init_array+0x24>
 8004a40:	f000 fd2e 	bl	80054a0 <_init>
 8004a44:	2600      	movs	r6, #0
 8004a46:	4d0a      	ldr	r5, [pc, #40]	@ (8004a70 <__libc_init_array+0x40>)
 8004a48:	4c0a      	ldr	r4, [pc, #40]	@ (8004a74 <__libc_init_array+0x44>)
 8004a4a:	1b64      	subs	r4, r4, r5
 8004a4c:	10a4      	asrs	r4, r4, #2
 8004a4e:	42a6      	cmp	r6, r4
 8004a50:	d105      	bne.n	8004a5e <__libc_init_array+0x2e>
 8004a52:	bd70      	pop	{r4, r5, r6, pc}
 8004a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a58:	4798      	blx	r3
 8004a5a:	3601      	adds	r6, #1
 8004a5c:	e7ee      	b.n	8004a3c <__libc_init_array+0xc>
 8004a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a62:	4798      	blx	r3
 8004a64:	3601      	adds	r6, #1
 8004a66:	e7f2      	b.n	8004a4e <__libc_init_array+0x1e>
 8004a68:	08005578 	.word	0x08005578
 8004a6c:	08005578 	.word	0x08005578
 8004a70:	08005578 	.word	0x08005578
 8004a74:	0800557c 	.word	0x0800557c

08004a78 <__retarget_lock_init_recursive>:
 8004a78:	4770      	bx	lr

08004a7a <__retarget_lock_acquire_recursive>:
 8004a7a:	4770      	bx	lr

08004a7c <__retarget_lock_release_recursive>:
 8004a7c:	4770      	bx	lr
	...

08004a80 <_free_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4605      	mov	r5, r0
 8004a84:	2900      	cmp	r1, #0
 8004a86:	d040      	beq.n	8004b0a <_free_r+0x8a>
 8004a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a8c:	1f0c      	subs	r4, r1, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bfb8      	it	lt
 8004a92:	18e4      	addlt	r4, r4, r3
 8004a94:	f000 f8de 	bl	8004c54 <__malloc_lock>
 8004a98:	4a1c      	ldr	r2, [pc, #112]	@ (8004b0c <_free_r+0x8c>)
 8004a9a:	6813      	ldr	r3, [r2, #0]
 8004a9c:	b933      	cbnz	r3, 8004aac <_free_r+0x2c>
 8004a9e:	6063      	str	r3, [r4, #4]
 8004aa0:	6014      	str	r4, [r2, #0]
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aa8:	f000 b8da 	b.w	8004c60 <__malloc_unlock>
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	d908      	bls.n	8004ac2 <_free_r+0x42>
 8004ab0:	6820      	ldr	r0, [r4, #0]
 8004ab2:	1821      	adds	r1, r4, r0
 8004ab4:	428b      	cmp	r3, r1
 8004ab6:	bf01      	itttt	eq
 8004ab8:	6819      	ldreq	r1, [r3, #0]
 8004aba:	685b      	ldreq	r3, [r3, #4]
 8004abc:	1809      	addeq	r1, r1, r0
 8004abe:	6021      	streq	r1, [r4, #0]
 8004ac0:	e7ed      	b.n	8004a9e <_free_r+0x1e>
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	b10b      	cbz	r3, 8004acc <_free_r+0x4c>
 8004ac8:	42a3      	cmp	r3, r4
 8004aca:	d9fa      	bls.n	8004ac2 <_free_r+0x42>
 8004acc:	6811      	ldr	r1, [r2, #0]
 8004ace:	1850      	adds	r0, r2, r1
 8004ad0:	42a0      	cmp	r0, r4
 8004ad2:	d10b      	bne.n	8004aec <_free_r+0x6c>
 8004ad4:	6820      	ldr	r0, [r4, #0]
 8004ad6:	4401      	add	r1, r0
 8004ad8:	1850      	adds	r0, r2, r1
 8004ada:	4283      	cmp	r3, r0
 8004adc:	6011      	str	r1, [r2, #0]
 8004ade:	d1e0      	bne.n	8004aa2 <_free_r+0x22>
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4408      	add	r0, r1
 8004ae6:	6010      	str	r0, [r2, #0]
 8004ae8:	6053      	str	r3, [r2, #4]
 8004aea:	e7da      	b.n	8004aa2 <_free_r+0x22>
 8004aec:	d902      	bls.n	8004af4 <_free_r+0x74>
 8004aee:	230c      	movs	r3, #12
 8004af0:	602b      	str	r3, [r5, #0]
 8004af2:	e7d6      	b.n	8004aa2 <_free_r+0x22>
 8004af4:	6820      	ldr	r0, [r4, #0]
 8004af6:	1821      	adds	r1, r4, r0
 8004af8:	428b      	cmp	r3, r1
 8004afa:	bf01      	itttt	eq
 8004afc:	6819      	ldreq	r1, [r3, #0]
 8004afe:	685b      	ldreq	r3, [r3, #4]
 8004b00:	1809      	addeq	r1, r1, r0
 8004b02:	6021      	streq	r1, [r4, #0]
 8004b04:	6063      	str	r3, [r4, #4]
 8004b06:	6054      	str	r4, [r2, #4]
 8004b08:	e7cb      	b.n	8004aa2 <_free_r+0x22>
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	20000540 	.word	0x20000540

08004b10 <sbrk_aligned>:
 8004b10:	b570      	push	{r4, r5, r6, lr}
 8004b12:	4e0f      	ldr	r6, [pc, #60]	@ (8004b50 <sbrk_aligned+0x40>)
 8004b14:	460c      	mov	r4, r1
 8004b16:	6831      	ldr	r1, [r6, #0]
 8004b18:	4605      	mov	r5, r0
 8004b1a:	b911      	cbnz	r1, 8004b22 <sbrk_aligned+0x12>
 8004b1c:	f000 fca2 	bl	8005464 <_sbrk_r>
 8004b20:	6030      	str	r0, [r6, #0]
 8004b22:	4621      	mov	r1, r4
 8004b24:	4628      	mov	r0, r5
 8004b26:	f000 fc9d 	bl	8005464 <_sbrk_r>
 8004b2a:	1c43      	adds	r3, r0, #1
 8004b2c:	d103      	bne.n	8004b36 <sbrk_aligned+0x26>
 8004b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8004b32:	4620      	mov	r0, r4
 8004b34:	bd70      	pop	{r4, r5, r6, pc}
 8004b36:	1cc4      	adds	r4, r0, #3
 8004b38:	f024 0403 	bic.w	r4, r4, #3
 8004b3c:	42a0      	cmp	r0, r4
 8004b3e:	d0f8      	beq.n	8004b32 <sbrk_aligned+0x22>
 8004b40:	1a21      	subs	r1, r4, r0
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 fc8e 	bl	8005464 <_sbrk_r>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d1f2      	bne.n	8004b32 <sbrk_aligned+0x22>
 8004b4c:	e7ef      	b.n	8004b2e <sbrk_aligned+0x1e>
 8004b4e:	bf00      	nop
 8004b50:	2000053c 	.word	0x2000053c

08004b54 <_malloc_r>:
 8004b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b58:	1ccd      	adds	r5, r1, #3
 8004b5a:	f025 0503 	bic.w	r5, r5, #3
 8004b5e:	3508      	adds	r5, #8
 8004b60:	2d0c      	cmp	r5, #12
 8004b62:	bf38      	it	cc
 8004b64:	250c      	movcc	r5, #12
 8004b66:	2d00      	cmp	r5, #0
 8004b68:	4606      	mov	r6, r0
 8004b6a:	db01      	blt.n	8004b70 <_malloc_r+0x1c>
 8004b6c:	42a9      	cmp	r1, r5
 8004b6e:	d904      	bls.n	8004b7a <_malloc_r+0x26>
 8004b70:	230c      	movs	r3, #12
 8004b72:	6033      	str	r3, [r6, #0]
 8004b74:	2000      	movs	r0, #0
 8004b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c50 <_malloc_r+0xfc>
 8004b7e:	f000 f869 	bl	8004c54 <__malloc_lock>
 8004b82:	f8d8 3000 	ldr.w	r3, [r8]
 8004b86:	461c      	mov	r4, r3
 8004b88:	bb44      	cbnz	r4, 8004bdc <_malloc_r+0x88>
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	f7ff ffbf 	bl	8004b10 <sbrk_aligned>
 8004b92:	1c43      	adds	r3, r0, #1
 8004b94:	4604      	mov	r4, r0
 8004b96:	d158      	bne.n	8004c4a <_malloc_r+0xf6>
 8004b98:	f8d8 4000 	ldr.w	r4, [r8]
 8004b9c:	4627      	mov	r7, r4
 8004b9e:	2f00      	cmp	r7, #0
 8004ba0:	d143      	bne.n	8004c2a <_malloc_r+0xd6>
 8004ba2:	2c00      	cmp	r4, #0
 8004ba4:	d04b      	beq.n	8004c3e <_malloc_r+0xea>
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	4639      	mov	r1, r7
 8004baa:	4630      	mov	r0, r6
 8004bac:	eb04 0903 	add.w	r9, r4, r3
 8004bb0:	f000 fc58 	bl	8005464 <_sbrk_r>
 8004bb4:	4581      	cmp	r9, r0
 8004bb6:	d142      	bne.n	8004c3e <_malloc_r+0xea>
 8004bb8:	6821      	ldr	r1, [r4, #0]
 8004bba:	4630      	mov	r0, r6
 8004bbc:	1a6d      	subs	r5, r5, r1
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	f7ff ffa6 	bl	8004b10 <sbrk_aligned>
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d03a      	beq.n	8004c3e <_malloc_r+0xea>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	442b      	add	r3, r5
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	f8d8 3000 	ldr.w	r3, [r8]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	bb62      	cbnz	r2, 8004c30 <_malloc_r+0xdc>
 8004bd6:	f8c8 7000 	str.w	r7, [r8]
 8004bda:	e00f      	b.n	8004bfc <_malloc_r+0xa8>
 8004bdc:	6822      	ldr	r2, [r4, #0]
 8004bde:	1b52      	subs	r2, r2, r5
 8004be0:	d420      	bmi.n	8004c24 <_malloc_r+0xd0>
 8004be2:	2a0b      	cmp	r2, #11
 8004be4:	d917      	bls.n	8004c16 <_malloc_r+0xc2>
 8004be6:	1961      	adds	r1, r4, r5
 8004be8:	42a3      	cmp	r3, r4
 8004bea:	6025      	str	r5, [r4, #0]
 8004bec:	bf18      	it	ne
 8004bee:	6059      	strne	r1, [r3, #4]
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	bf08      	it	eq
 8004bf4:	f8c8 1000 	streq.w	r1, [r8]
 8004bf8:	5162      	str	r2, [r4, r5]
 8004bfa:	604b      	str	r3, [r1, #4]
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f000 f82f 	bl	8004c60 <__malloc_unlock>
 8004c02:	f104 000b 	add.w	r0, r4, #11
 8004c06:	1d23      	adds	r3, r4, #4
 8004c08:	f020 0007 	bic.w	r0, r0, #7
 8004c0c:	1ac2      	subs	r2, r0, r3
 8004c0e:	bf1c      	itt	ne
 8004c10:	1a1b      	subne	r3, r3, r0
 8004c12:	50a3      	strne	r3, [r4, r2]
 8004c14:	e7af      	b.n	8004b76 <_malloc_r+0x22>
 8004c16:	6862      	ldr	r2, [r4, #4]
 8004c18:	42a3      	cmp	r3, r4
 8004c1a:	bf0c      	ite	eq
 8004c1c:	f8c8 2000 	streq.w	r2, [r8]
 8004c20:	605a      	strne	r2, [r3, #4]
 8004c22:	e7eb      	b.n	8004bfc <_malloc_r+0xa8>
 8004c24:	4623      	mov	r3, r4
 8004c26:	6864      	ldr	r4, [r4, #4]
 8004c28:	e7ae      	b.n	8004b88 <_malloc_r+0x34>
 8004c2a:	463c      	mov	r4, r7
 8004c2c:	687f      	ldr	r7, [r7, #4]
 8004c2e:	e7b6      	b.n	8004b9e <_malloc_r+0x4a>
 8004c30:	461a      	mov	r2, r3
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	42a3      	cmp	r3, r4
 8004c36:	d1fb      	bne.n	8004c30 <_malloc_r+0xdc>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6053      	str	r3, [r2, #4]
 8004c3c:	e7de      	b.n	8004bfc <_malloc_r+0xa8>
 8004c3e:	230c      	movs	r3, #12
 8004c40:	4630      	mov	r0, r6
 8004c42:	6033      	str	r3, [r6, #0]
 8004c44:	f000 f80c 	bl	8004c60 <__malloc_unlock>
 8004c48:	e794      	b.n	8004b74 <_malloc_r+0x20>
 8004c4a:	6005      	str	r5, [r0, #0]
 8004c4c:	e7d6      	b.n	8004bfc <_malloc_r+0xa8>
 8004c4e:	bf00      	nop
 8004c50:	20000540 	.word	0x20000540

08004c54 <__malloc_lock>:
 8004c54:	4801      	ldr	r0, [pc, #4]	@ (8004c5c <__malloc_lock+0x8>)
 8004c56:	f7ff bf10 	b.w	8004a7a <__retarget_lock_acquire_recursive>
 8004c5a:	bf00      	nop
 8004c5c:	20000538 	.word	0x20000538

08004c60 <__malloc_unlock>:
 8004c60:	4801      	ldr	r0, [pc, #4]	@ (8004c68 <__malloc_unlock+0x8>)
 8004c62:	f7ff bf0b 	b.w	8004a7c <__retarget_lock_release_recursive>
 8004c66:	bf00      	nop
 8004c68:	20000538 	.word	0x20000538

08004c6c <__sfputc_r>:
 8004c6c:	6893      	ldr	r3, [r2, #8]
 8004c6e:	b410      	push	{r4}
 8004c70:	3b01      	subs	r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	6093      	str	r3, [r2, #8]
 8004c76:	da07      	bge.n	8004c88 <__sfputc_r+0x1c>
 8004c78:	6994      	ldr	r4, [r2, #24]
 8004c7a:	42a3      	cmp	r3, r4
 8004c7c:	db01      	blt.n	8004c82 <__sfputc_r+0x16>
 8004c7e:	290a      	cmp	r1, #10
 8004c80:	d102      	bne.n	8004c88 <__sfputc_r+0x1c>
 8004c82:	bc10      	pop	{r4}
 8004c84:	f7ff bdeb 	b.w	800485e <__swbuf_r>
 8004c88:	6813      	ldr	r3, [r2, #0]
 8004c8a:	1c58      	adds	r0, r3, #1
 8004c8c:	6010      	str	r0, [r2, #0]
 8004c8e:	7019      	strb	r1, [r3, #0]
 8004c90:	4608      	mov	r0, r1
 8004c92:	bc10      	pop	{r4}
 8004c94:	4770      	bx	lr

08004c96 <__sfputs_r>:
 8004c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c98:	4606      	mov	r6, r0
 8004c9a:	460f      	mov	r7, r1
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	18d5      	adds	r5, r2, r3
 8004ca0:	42ac      	cmp	r4, r5
 8004ca2:	d101      	bne.n	8004ca8 <__sfputs_r+0x12>
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	e007      	b.n	8004cb8 <__sfputs_r+0x22>
 8004ca8:	463a      	mov	r2, r7
 8004caa:	4630      	mov	r0, r6
 8004cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb0:	f7ff ffdc 	bl	8004c6c <__sfputc_r>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d1f3      	bne.n	8004ca0 <__sfputs_r+0xa>
 8004cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cbc <_vfiprintf_r>:
 8004cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc0:	460d      	mov	r5, r1
 8004cc2:	4614      	mov	r4, r2
 8004cc4:	4698      	mov	r8, r3
 8004cc6:	4606      	mov	r6, r0
 8004cc8:	b09d      	sub	sp, #116	@ 0x74
 8004cca:	b118      	cbz	r0, 8004cd4 <_vfiprintf_r+0x18>
 8004ccc:	6a03      	ldr	r3, [r0, #32]
 8004cce:	b90b      	cbnz	r3, 8004cd4 <_vfiprintf_r+0x18>
 8004cd0:	f7ff fcdc 	bl	800468c <__sinit>
 8004cd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cd6:	07d9      	lsls	r1, r3, #31
 8004cd8:	d405      	bmi.n	8004ce6 <_vfiprintf_r+0x2a>
 8004cda:	89ab      	ldrh	r3, [r5, #12]
 8004cdc:	059a      	lsls	r2, r3, #22
 8004cde:	d402      	bmi.n	8004ce6 <_vfiprintf_r+0x2a>
 8004ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ce2:	f7ff feca 	bl	8004a7a <__retarget_lock_acquire_recursive>
 8004ce6:	89ab      	ldrh	r3, [r5, #12]
 8004ce8:	071b      	lsls	r3, r3, #28
 8004cea:	d501      	bpl.n	8004cf0 <_vfiprintf_r+0x34>
 8004cec:	692b      	ldr	r3, [r5, #16]
 8004cee:	b99b      	cbnz	r3, 8004d18 <_vfiprintf_r+0x5c>
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f7ff fdf2 	bl	80048dc <__swsetup_r>
 8004cf8:	b170      	cbz	r0, 8004d18 <_vfiprintf_r+0x5c>
 8004cfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cfc:	07dc      	lsls	r4, r3, #31
 8004cfe:	d504      	bpl.n	8004d0a <_vfiprintf_r+0x4e>
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	b01d      	add	sp, #116	@ 0x74
 8004d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0a:	89ab      	ldrh	r3, [r5, #12]
 8004d0c:	0598      	lsls	r0, r3, #22
 8004d0e:	d4f7      	bmi.n	8004d00 <_vfiprintf_r+0x44>
 8004d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d12:	f7ff feb3 	bl	8004a7c <__retarget_lock_release_recursive>
 8004d16:	e7f3      	b.n	8004d00 <_vfiprintf_r+0x44>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d1c:	2320      	movs	r3, #32
 8004d1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d22:	2330      	movs	r3, #48	@ 0x30
 8004d24:	f04f 0901 	mov.w	r9, #1
 8004d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d2c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004ed8 <_vfiprintf_r+0x21c>
 8004d30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d34:	4623      	mov	r3, r4
 8004d36:	469a      	mov	sl, r3
 8004d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d3c:	b10a      	cbz	r2, 8004d42 <_vfiprintf_r+0x86>
 8004d3e:	2a25      	cmp	r2, #37	@ 0x25
 8004d40:	d1f9      	bne.n	8004d36 <_vfiprintf_r+0x7a>
 8004d42:	ebba 0b04 	subs.w	fp, sl, r4
 8004d46:	d00b      	beq.n	8004d60 <_vfiprintf_r+0xa4>
 8004d48:	465b      	mov	r3, fp
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	4630      	mov	r0, r6
 8004d50:	f7ff ffa1 	bl	8004c96 <__sfputs_r>
 8004d54:	3001      	adds	r0, #1
 8004d56:	f000 80a7 	beq.w	8004ea8 <_vfiprintf_r+0x1ec>
 8004d5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d5c:	445a      	add	r2, fp
 8004d5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d60:	f89a 3000 	ldrb.w	r3, [sl]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 809f 	beq.w	8004ea8 <_vfiprintf_r+0x1ec>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d74:	f10a 0a01 	add.w	sl, sl, #1
 8004d78:	9304      	str	r3, [sp, #16]
 8004d7a:	9307      	str	r3, [sp, #28]
 8004d7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d80:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d82:	4654      	mov	r4, sl
 8004d84:	2205      	movs	r2, #5
 8004d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d8a:	4853      	ldr	r0, [pc, #332]	@ (8004ed8 <_vfiprintf_r+0x21c>)
 8004d8c:	f000 fb7a 	bl	8005484 <memchr>
 8004d90:	9a04      	ldr	r2, [sp, #16]
 8004d92:	b9d8      	cbnz	r0, 8004dcc <_vfiprintf_r+0x110>
 8004d94:	06d1      	lsls	r1, r2, #27
 8004d96:	bf44      	itt	mi
 8004d98:	2320      	movmi	r3, #32
 8004d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d9e:	0713      	lsls	r3, r2, #28
 8004da0:	bf44      	itt	mi
 8004da2:	232b      	movmi	r3, #43	@ 0x2b
 8004da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004da8:	f89a 3000 	ldrb.w	r3, [sl]
 8004dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dae:	d015      	beq.n	8004ddc <_vfiprintf_r+0x120>
 8004db0:	4654      	mov	r4, sl
 8004db2:	2000      	movs	r0, #0
 8004db4:	f04f 0c0a 	mov.w	ip, #10
 8004db8:	9a07      	ldr	r2, [sp, #28]
 8004dba:	4621      	mov	r1, r4
 8004dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dc0:	3b30      	subs	r3, #48	@ 0x30
 8004dc2:	2b09      	cmp	r3, #9
 8004dc4:	d94b      	bls.n	8004e5e <_vfiprintf_r+0x1a2>
 8004dc6:	b1b0      	cbz	r0, 8004df6 <_vfiprintf_r+0x13a>
 8004dc8:	9207      	str	r2, [sp, #28]
 8004dca:	e014      	b.n	8004df6 <_vfiprintf_r+0x13a>
 8004dcc:	eba0 0308 	sub.w	r3, r0, r8
 8004dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	46a2      	mov	sl, r4
 8004dd8:	9304      	str	r3, [sp, #16]
 8004dda:	e7d2      	b.n	8004d82 <_vfiprintf_r+0xc6>
 8004ddc:	9b03      	ldr	r3, [sp, #12]
 8004dde:	1d19      	adds	r1, r3, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	9103      	str	r1, [sp, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bfbb      	ittet	lt
 8004de8:	425b      	neglt	r3, r3
 8004dea:	f042 0202 	orrlt.w	r2, r2, #2
 8004dee:	9307      	strge	r3, [sp, #28]
 8004df0:	9307      	strlt	r3, [sp, #28]
 8004df2:	bfb8      	it	lt
 8004df4:	9204      	strlt	r2, [sp, #16]
 8004df6:	7823      	ldrb	r3, [r4, #0]
 8004df8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dfa:	d10a      	bne.n	8004e12 <_vfiprintf_r+0x156>
 8004dfc:	7863      	ldrb	r3, [r4, #1]
 8004dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e00:	d132      	bne.n	8004e68 <_vfiprintf_r+0x1ac>
 8004e02:	9b03      	ldr	r3, [sp, #12]
 8004e04:	3402      	adds	r4, #2
 8004e06:	1d1a      	adds	r2, r3, #4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	9203      	str	r2, [sp, #12]
 8004e0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e10:	9305      	str	r3, [sp, #20]
 8004e12:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004edc <_vfiprintf_r+0x220>
 8004e16:	2203      	movs	r2, #3
 8004e18:	4650      	mov	r0, sl
 8004e1a:	7821      	ldrb	r1, [r4, #0]
 8004e1c:	f000 fb32 	bl	8005484 <memchr>
 8004e20:	b138      	cbz	r0, 8004e32 <_vfiprintf_r+0x176>
 8004e22:	2240      	movs	r2, #64	@ 0x40
 8004e24:	9b04      	ldr	r3, [sp, #16]
 8004e26:	eba0 000a 	sub.w	r0, r0, sl
 8004e2a:	4082      	lsls	r2, r0
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	3401      	adds	r4, #1
 8004e30:	9304      	str	r3, [sp, #16]
 8004e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e36:	2206      	movs	r2, #6
 8004e38:	4829      	ldr	r0, [pc, #164]	@ (8004ee0 <_vfiprintf_r+0x224>)
 8004e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e3e:	f000 fb21 	bl	8005484 <memchr>
 8004e42:	2800      	cmp	r0, #0
 8004e44:	d03f      	beq.n	8004ec6 <_vfiprintf_r+0x20a>
 8004e46:	4b27      	ldr	r3, [pc, #156]	@ (8004ee4 <_vfiprintf_r+0x228>)
 8004e48:	bb1b      	cbnz	r3, 8004e92 <_vfiprintf_r+0x1d6>
 8004e4a:	9b03      	ldr	r3, [sp, #12]
 8004e4c:	3307      	adds	r3, #7
 8004e4e:	f023 0307 	bic.w	r3, r3, #7
 8004e52:	3308      	adds	r3, #8
 8004e54:	9303      	str	r3, [sp, #12]
 8004e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e58:	443b      	add	r3, r7
 8004e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e5c:	e76a      	b.n	8004d34 <_vfiprintf_r+0x78>
 8004e5e:	460c      	mov	r4, r1
 8004e60:	2001      	movs	r0, #1
 8004e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e66:	e7a8      	b.n	8004dba <_vfiprintf_r+0xfe>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f04f 0c0a 	mov.w	ip, #10
 8004e6e:	4619      	mov	r1, r3
 8004e70:	3401      	adds	r4, #1
 8004e72:	9305      	str	r3, [sp, #20]
 8004e74:	4620      	mov	r0, r4
 8004e76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e7a:	3a30      	subs	r2, #48	@ 0x30
 8004e7c:	2a09      	cmp	r2, #9
 8004e7e:	d903      	bls.n	8004e88 <_vfiprintf_r+0x1cc>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0c6      	beq.n	8004e12 <_vfiprintf_r+0x156>
 8004e84:	9105      	str	r1, [sp, #20]
 8004e86:	e7c4      	b.n	8004e12 <_vfiprintf_r+0x156>
 8004e88:	4604      	mov	r4, r0
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e90:	e7f0      	b.n	8004e74 <_vfiprintf_r+0x1b8>
 8004e92:	ab03      	add	r3, sp, #12
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	462a      	mov	r2, r5
 8004e98:	4630      	mov	r0, r6
 8004e9a:	4b13      	ldr	r3, [pc, #76]	@ (8004ee8 <_vfiprintf_r+0x22c>)
 8004e9c:	a904      	add	r1, sp, #16
 8004e9e:	f3af 8000 	nop.w
 8004ea2:	4607      	mov	r7, r0
 8004ea4:	1c78      	adds	r0, r7, #1
 8004ea6:	d1d6      	bne.n	8004e56 <_vfiprintf_r+0x19a>
 8004ea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004eaa:	07d9      	lsls	r1, r3, #31
 8004eac:	d405      	bmi.n	8004eba <_vfiprintf_r+0x1fe>
 8004eae:	89ab      	ldrh	r3, [r5, #12]
 8004eb0:	059a      	lsls	r2, r3, #22
 8004eb2:	d402      	bmi.n	8004eba <_vfiprintf_r+0x1fe>
 8004eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004eb6:	f7ff fde1 	bl	8004a7c <__retarget_lock_release_recursive>
 8004eba:	89ab      	ldrh	r3, [r5, #12]
 8004ebc:	065b      	lsls	r3, r3, #25
 8004ebe:	f53f af1f 	bmi.w	8004d00 <_vfiprintf_r+0x44>
 8004ec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ec4:	e71e      	b.n	8004d04 <_vfiprintf_r+0x48>
 8004ec6:	ab03      	add	r3, sp, #12
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	462a      	mov	r2, r5
 8004ecc:	4630      	mov	r0, r6
 8004ece:	4b06      	ldr	r3, [pc, #24]	@ (8004ee8 <_vfiprintf_r+0x22c>)
 8004ed0:	a904      	add	r1, sp, #16
 8004ed2:	f000 f87d 	bl	8004fd0 <_printf_i>
 8004ed6:	e7e4      	b.n	8004ea2 <_vfiprintf_r+0x1e6>
 8004ed8:	08005542 	.word	0x08005542
 8004edc:	08005548 	.word	0x08005548
 8004ee0:	0800554c 	.word	0x0800554c
 8004ee4:	00000000 	.word	0x00000000
 8004ee8:	08004c97 	.word	0x08004c97

08004eec <_printf_common>:
 8004eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef0:	4616      	mov	r6, r2
 8004ef2:	4698      	mov	r8, r3
 8004ef4:	688a      	ldr	r2, [r1, #8]
 8004ef6:	690b      	ldr	r3, [r1, #16]
 8004ef8:	4607      	mov	r7, r0
 8004efa:	4293      	cmp	r3, r2
 8004efc:	bfb8      	it	lt
 8004efe:	4613      	movlt	r3, r2
 8004f00:	6033      	str	r3, [r6, #0]
 8004f02:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f06:	460c      	mov	r4, r1
 8004f08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f0c:	b10a      	cbz	r2, 8004f12 <_printf_common+0x26>
 8004f0e:	3301      	adds	r3, #1
 8004f10:	6033      	str	r3, [r6, #0]
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	0699      	lsls	r1, r3, #26
 8004f16:	bf42      	ittt	mi
 8004f18:	6833      	ldrmi	r3, [r6, #0]
 8004f1a:	3302      	addmi	r3, #2
 8004f1c:	6033      	strmi	r3, [r6, #0]
 8004f1e:	6825      	ldr	r5, [r4, #0]
 8004f20:	f015 0506 	ands.w	r5, r5, #6
 8004f24:	d106      	bne.n	8004f34 <_printf_common+0x48>
 8004f26:	f104 0a19 	add.w	sl, r4, #25
 8004f2a:	68e3      	ldr	r3, [r4, #12]
 8004f2c:	6832      	ldr	r2, [r6, #0]
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	42ab      	cmp	r3, r5
 8004f32:	dc2b      	bgt.n	8004f8c <_printf_common+0xa0>
 8004f34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f38:	6822      	ldr	r2, [r4, #0]
 8004f3a:	3b00      	subs	r3, #0
 8004f3c:	bf18      	it	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	0692      	lsls	r2, r2, #26
 8004f42:	d430      	bmi.n	8004fa6 <_printf_common+0xba>
 8004f44:	4641      	mov	r1, r8
 8004f46:	4638      	mov	r0, r7
 8004f48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f4c:	47c8      	blx	r9
 8004f4e:	3001      	adds	r0, #1
 8004f50:	d023      	beq.n	8004f9a <_printf_common+0xae>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	6922      	ldr	r2, [r4, #16]
 8004f56:	f003 0306 	and.w	r3, r3, #6
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	bf14      	ite	ne
 8004f5e:	2500      	movne	r5, #0
 8004f60:	6833      	ldreq	r3, [r6, #0]
 8004f62:	f04f 0600 	mov.w	r6, #0
 8004f66:	bf08      	it	eq
 8004f68:	68e5      	ldreq	r5, [r4, #12]
 8004f6a:	f104 041a 	add.w	r4, r4, #26
 8004f6e:	bf08      	it	eq
 8004f70:	1aed      	subeq	r5, r5, r3
 8004f72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f76:	bf08      	it	eq
 8004f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	bfc4      	itt	gt
 8004f80:	1a9b      	subgt	r3, r3, r2
 8004f82:	18ed      	addgt	r5, r5, r3
 8004f84:	42b5      	cmp	r5, r6
 8004f86:	d11a      	bne.n	8004fbe <_printf_common+0xd2>
 8004f88:	2000      	movs	r0, #0
 8004f8a:	e008      	b.n	8004f9e <_printf_common+0xb2>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	4652      	mov	r2, sl
 8004f90:	4641      	mov	r1, r8
 8004f92:	4638      	mov	r0, r7
 8004f94:	47c8      	blx	r9
 8004f96:	3001      	adds	r0, #1
 8004f98:	d103      	bne.n	8004fa2 <_printf_common+0xb6>
 8004f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa2:	3501      	adds	r5, #1
 8004fa4:	e7c1      	b.n	8004f2a <_printf_common+0x3e>
 8004fa6:	2030      	movs	r0, #48	@ 0x30
 8004fa8:	18e1      	adds	r1, r4, r3
 8004faa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fb4:	4422      	add	r2, r4
 8004fb6:	3302      	adds	r3, #2
 8004fb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fbc:	e7c2      	b.n	8004f44 <_printf_common+0x58>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	4622      	mov	r2, r4
 8004fc2:	4641      	mov	r1, r8
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	47c8      	blx	r9
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d0e6      	beq.n	8004f9a <_printf_common+0xae>
 8004fcc:	3601      	adds	r6, #1
 8004fce:	e7d9      	b.n	8004f84 <_printf_common+0x98>

08004fd0 <_printf_i>:
 8004fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd4:	7e0f      	ldrb	r7, [r1, #24]
 8004fd6:	4691      	mov	r9, r2
 8004fd8:	2f78      	cmp	r7, #120	@ 0x78
 8004fda:	4680      	mov	r8, r0
 8004fdc:	460c      	mov	r4, r1
 8004fde:	469a      	mov	sl, r3
 8004fe0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fe2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fe6:	d807      	bhi.n	8004ff8 <_printf_i+0x28>
 8004fe8:	2f62      	cmp	r7, #98	@ 0x62
 8004fea:	d80a      	bhi.n	8005002 <_printf_i+0x32>
 8004fec:	2f00      	cmp	r7, #0
 8004fee:	f000 80d1 	beq.w	8005194 <_printf_i+0x1c4>
 8004ff2:	2f58      	cmp	r7, #88	@ 0x58
 8004ff4:	f000 80b8 	beq.w	8005168 <_printf_i+0x198>
 8004ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ffc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005000:	e03a      	b.n	8005078 <_printf_i+0xa8>
 8005002:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005006:	2b15      	cmp	r3, #21
 8005008:	d8f6      	bhi.n	8004ff8 <_printf_i+0x28>
 800500a:	a101      	add	r1, pc, #4	@ (adr r1, 8005010 <_printf_i+0x40>)
 800500c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005010:	08005069 	.word	0x08005069
 8005014:	0800507d 	.word	0x0800507d
 8005018:	08004ff9 	.word	0x08004ff9
 800501c:	08004ff9 	.word	0x08004ff9
 8005020:	08004ff9 	.word	0x08004ff9
 8005024:	08004ff9 	.word	0x08004ff9
 8005028:	0800507d 	.word	0x0800507d
 800502c:	08004ff9 	.word	0x08004ff9
 8005030:	08004ff9 	.word	0x08004ff9
 8005034:	08004ff9 	.word	0x08004ff9
 8005038:	08004ff9 	.word	0x08004ff9
 800503c:	0800517b 	.word	0x0800517b
 8005040:	080050a7 	.word	0x080050a7
 8005044:	08005135 	.word	0x08005135
 8005048:	08004ff9 	.word	0x08004ff9
 800504c:	08004ff9 	.word	0x08004ff9
 8005050:	0800519d 	.word	0x0800519d
 8005054:	08004ff9 	.word	0x08004ff9
 8005058:	080050a7 	.word	0x080050a7
 800505c:	08004ff9 	.word	0x08004ff9
 8005060:	08004ff9 	.word	0x08004ff9
 8005064:	0800513d 	.word	0x0800513d
 8005068:	6833      	ldr	r3, [r6, #0]
 800506a:	1d1a      	adds	r2, r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6032      	str	r2, [r6, #0]
 8005070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005074:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005078:	2301      	movs	r3, #1
 800507a:	e09c      	b.n	80051b6 <_printf_i+0x1e6>
 800507c:	6833      	ldr	r3, [r6, #0]
 800507e:	6820      	ldr	r0, [r4, #0]
 8005080:	1d19      	adds	r1, r3, #4
 8005082:	6031      	str	r1, [r6, #0]
 8005084:	0606      	lsls	r6, r0, #24
 8005086:	d501      	bpl.n	800508c <_printf_i+0xbc>
 8005088:	681d      	ldr	r5, [r3, #0]
 800508a:	e003      	b.n	8005094 <_printf_i+0xc4>
 800508c:	0645      	lsls	r5, r0, #25
 800508e:	d5fb      	bpl.n	8005088 <_printf_i+0xb8>
 8005090:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005094:	2d00      	cmp	r5, #0
 8005096:	da03      	bge.n	80050a0 <_printf_i+0xd0>
 8005098:	232d      	movs	r3, #45	@ 0x2d
 800509a:	426d      	negs	r5, r5
 800509c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050a0:	230a      	movs	r3, #10
 80050a2:	4858      	ldr	r0, [pc, #352]	@ (8005204 <_printf_i+0x234>)
 80050a4:	e011      	b.n	80050ca <_printf_i+0xfa>
 80050a6:	6821      	ldr	r1, [r4, #0]
 80050a8:	6833      	ldr	r3, [r6, #0]
 80050aa:	0608      	lsls	r0, r1, #24
 80050ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80050b0:	d402      	bmi.n	80050b8 <_printf_i+0xe8>
 80050b2:	0649      	lsls	r1, r1, #25
 80050b4:	bf48      	it	mi
 80050b6:	b2ad      	uxthmi	r5, r5
 80050b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80050ba:	6033      	str	r3, [r6, #0]
 80050bc:	bf14      	ite	ne
 80050be:	230a      	movne	r3, #10
 80050c0:	2308      	moveq	r3, #8
 80050c2:	4850      	ldr	r0, [pc, #320]	@ (8005204 <_printf_i+0x234>)
 80050c4:	2100      	movs	r1, #0
 80050c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050ca:	6866      	ldr	r6, [r4, #4]
 80050cc:	2e00      	cmp	r6, #0
 80050ce:	60a6      	str	r6, [r4, #8]
 80050d0:	db05      	blt.n	80050de <_printf_i+0x10e>
 80050d2:	6821      	ldr	r1, [r4, #0]
 80050d4:	432e      	orrs	r6, r5
 80050d6:	f021 0104 	bic.w	r1, r1, #4
 80050da:	6021      	str	r1, [r4, #0]
 80050dc:	d04b      	beq.n	8005176 <_printf_i+0x1a6>
 80050de:	4616      	mov	r6, r2
 80050e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80050e4:	fb03 5711 	mls	r7, r3, r1, r5
 80050e8:	5dc7      	ldrb	r7, [r0, r7]
 80050ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050ee:	462f      	mov	r7, r5
 80050f0:	42bb      	cmp	r3, r7
 80050f2:	460d      	mov	r5, r1
 80050f4:	d9f4      	bls.n	80050e0 <_printf_i+0x110>
 80050f6:	2b08      	cmp	r3, #8
 80050f8:	d10b      	bne.n	8005112 <_printf_i+0x142>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	07df      	lsls	r7, r3, #31
 80050fe:	d508      	bpl.n	8005112 <_printf_i+0x142>
 8005100:	6923      	ldr	r3, [r4, #16]
 8005102:	6861      	ldr	r1, [r4, #4]
 8005104:	4299      	cmp	r1, r3
 8005106:	bfde      	ittt	le
 8005108:	2330      	movle	r3, #48	@ 0x30
 800510a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800510e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005112:	1b92      	subs	r2, r2, r6
 8005114:	6122      	str	r2, [r4, #16]
 8005116:	464b      	mov	r3, r9
 8005118:	4621      	mov	r1, r4
 800511a:	4640      	mov	r0, r8
 800511c:	f8cd a000 	str.w	sl, [sp]
 8005120:	aa03      	add	r2, sp, #12
 8005122:	f7ff fee3 	bl	8004eec <_printf_common>
 8005126:	3001      	adds	r0, #1
 8005128:	d14a      	bne.n	80051c0 <_printf_i+0x1f0>
 800512a:	f04f 30ff 	mov.w	r0, #4294967295
 800512e:	b004      	add	sp, #16
 8005130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	f043 0320 	orr.w	r3, r3, #32
 800513a:	6023      	str	r3, [r4, #0]
 800513c:	2778      	movs	r7, #120	@ 0x78
 800513e:	4832      	ldr	r0, [pc, #200]	@ (8005208 <_printf_i+0x238>)
 8005140:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	6831      	ldr	r1, [r6, #0]
 8005148:	061f      	lsls	r7, r3, #24
 800514a:	f851 5b04 	ldr.w	r5, [r1], #4
 800514e:	d402      	bmi.n	8005156 <_printf_i+0x186>
 8005150:	065f      	lsls	r7, r3, #25
 8005152:	bf48      	it	mi
 8005154:	b2ad      	uxthmi	r5, r5
 8005156:	6031      	str	r1, [r6, #0]
 8005158:	07d9      	lsls	r1, r3, #31
 800515a:	bf44      	itt	mi
 800515c:	f043 0320 	orrmi.w	r3, r3, #32
 8005160:	6023      	strmi	r3, [r4, #0]
 8005162:	b11d      	cbz	r5, 800516c <_printf_i+0x19c>
 8005164:	2310      	movs	r3, #16
 8005166:	e7ad      	b.n	80050c4 <_printf_i+0xf4>
 8005168:	4826      	ldr	r0, [pc, #152]	@ (8005204 <_printf_i+0x234>)
 800516a:	e7e9      	b.n	8005140 <_printf_i+0x170>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	f023 0320 	bic.w	r3, r3, #32
 8005172:	6023      	str	r3, [r4, #0]
 8005174:	e7f6      	b.n	8005164 <_printf_i+0x194>
 8005176:	4616      	mov	r6, r2
 8005178:	e7bd      	b.n	80050f6 <_printf_i+0x126>
 800517a:	6833      	ldr	r3, [r6, #0]
 800517c:	6825      	ldr	r5, [r4, #0]
 800517e:	1d18      	adds	r0, r3, #4
 8005180:	6961      	ldr	r1, [r4, #20]
 8005182:	6030      	str	r0, [r6, #0]
 8005184:	062e      	lsls	r6, r5, #24
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	d501      	bpl.n	800518e <_printf_i+0x1be>
 800518a:	6019      	str	r1, [r3, #0]
 800518c:	e002      	b.n	8005194 <_printf_i+0x1c4>
 800518e:	0668      	lsls	r0, r5, #25
 8005190:	d5fb      	bpl.n	800518a <_printf_i+0x1ba>
 8005192:	8019      	strh	r1, [r3, #0]
 8005194:	2300      	movs	r3, #0
 8005196:	4616      	mov	r6, r2
 8005198:	6123      	str	r3, [r4, #16]
 800519a:	e7bc      	b.n	8005116 <_printf_i+0x146>
 800519c:	6833      	ldr	r3, [r6, #0]
 800519e:	2100      	movs	r1, #0
 80051a0:	1d1a      	adds	r2, r3, #4
 80051a2:	6032      	str	r2, [r6, #0]
 80051a4:	681e      	ldr	r6, [r3, #0]
 80051a6:	6862      	ldr	r2, [r4, #4]
 80051a8:	4630      	mov	r0, r6
 80051aa:	f000 f96b 	bl	8005484 <memchr>
 80051ae:	b108      	cbz	r0, 80051b4 <_printf_i+0x1e4>
 80051b0:	1b80      	subs	r0, r0, r6
 80051b2:	6060      	str	r0, [r4, #4]
 80051b4:	6863      	ldr	r3, [r4, #4]
 80051b6:	6123      	str	r3, [r4, #16]
 80051b8:	2300      	movs	r3, #0
 80051ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051be:	e7aa      	b.n	8005116 <_printf_i+0x146>
 80051c0:	4632      	mov	r2, r6
 80051c2:	4649      	mov	r1, r9
 80051c4:	4640      	mov	r0, r8
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	47d0      	blx	sl
 80051ca:	3001      	adds	r0, #1
 80051cc:	d0ad      	beq.n	800512a <_printf_i+0x15a>
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	079b      	lsls	r3, r3, #30
 80051d2:	d413      	bmi.n	80051fc <_printf_i+0x22c>
 80051d4:	68e0      	ldr	r0, [r4, #12]
 80051d6:	9b03      	ldr	r3, [sp, #12]
 80051d8:	4298      	cmp	r0, r3
 80051da:	bfb8      	it	lt
 80051dc:	4618      	movlt	r0, r3
 80051de:	e7a6      	b.n	800512e <_printf_i+0x15e>
 80051e0:	2301      	movs	r3, #1
 80051e2:	4632      	mov	r2, r6
 80051e4:	4649      	mov	r1, r9
 80051e6:	4640      	mov	r0, r8
 80051e8:	47d0      	blx	sl
 80051ea:	3001      	adds	r0, #1
 80051ec:	d09d      	beq.n	800512a <_printf_i+0x15a>
 80051ee:	3501      	adds	r5, #1
 80051f0:	68e3      	ldr	r3, [r4, #12]
 80051f2:	9903      	ldr	r1, [sp, #12]
 80051f4:	1a5b      	subs	r3, r3, r1
 80051f6:	42ab      	cmp	r3, r5
 80051f8:	dcf2      	bgt.n	80051e0 <_printf_i+0x210>
 80051fa:	e7eb      	b.n	80051d4 <_printf_i+0x204>
 80051fc:	2500      	movs	r5, #0
 80051fe:	f104 0619 	add.w	r6, r4, #25
 8005202:	e7f5      	b.n	80051f0 <_printf_i+0x220>
 8005204:	08005553 	.word	0x08005553
 8005208:	08005564 	.word	0x08005564

0800520c <__sflush_r>:
 800520c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	0716      	lsls	r6, r2, #28
 8005214:	4605      	mov	r5, r0
 8005216:	460c      	mov	r4, r1
 8005218:	d454      	bmi.n	80052c4 <__sflush_r+0xb8>
 800521a:	684b      	ldr	r3, [r1, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	dc02      	bgt.n	8005226 <__sflush_r+0x1a>
 8005220:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	dd48      	ble.n	80052b8 <__sflush_r+0xac>
 8005226:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005228:	2e00      	cmp	r6, #0
 800522a:	d045      	beq.n	80052b8 <__sflush_r+0xac>
 800522c:	2300      	movs	r3, #0
 800522e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005232:	682f      	ldr	r7, [r5, #0]
 8005234:	6a21      	ldr	r1, [r4, #32]
 8005236:	602b      	str	r3, [r5, #0]
 8005238:	d030      	beq.n	800529c <__sflush_r+0x90>
 800523a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800523c:	89a3      	ldrh	r3, [r4, #12]
 800523e:	0759      	lsls	r1, r3, #29
 8005240:	d505      	bpl.n	800524e <__sflush_r+0x42>
 8005242:	6863      	ldr	r3, [r4, #4]
 8005244:	1ad2      	subs	r2, r2, r3
 8005246:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005248:	b10b      	cbz	r3, 800524e <__sflush_r+0x42>
 800524a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800524c:	1ad2      	subs	r2, r2, r3
 800524e:	2300      	movs	r3, #0
 8005250:	4628      	mov	r0, r5
 8005252:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005254:	6a21      	ldr	r1, [r4, #32]
 8005256:	47b0      	blx	r6
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	d106      	bne.n	800526c <__sflush_r+0x60>
 800525e:	6829      	ldr	r1, [r5, #0]
 8005260:	291d      	cmp	r1, #29
 8005262:	d82b      	bhi.n	80052bc <__sflush_r+0xb0>
 8005264:	4a28      	ldr	r2, [pc, #160]	@ (8005308 <__sflush_r+0xfc>)
 8005266:	40ca      	lsrs	r2, r1
 8005268:	07d6      	lsls	r6, r2, #31
 800526a:	d527      	bpl.n	80052bc <__sflush_r+0xb0>
 800526c:	2200      	movs	r2, #0
 800526e:	6062      	str	r2, [r4, #4]
 8005270:	6922      	ldr	r2, [r4, #16]
 8005272:	04d9      	lsls	r1, r3, #19
 8005274:	6022      	str	r2, [r4, #0]
 8005276:	d504      	bpl.n	8005282 <__sflush_r+0x76>
 8005278:	1c42      	adds	r2, r0, #1
 800527a:	d101      	bne.n	8005280 <__sflush_r+0x74>
 800527c:	682b      	ldr	r3, [r5, #0]
 800527e:	b903      	cbnz	r3, 8005282 <__sflush_r+0x76>
 8005280:	6560      	str	r0, [r4, #84]	@ 0x54
 8005282:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005284:	602f      	str	r7, [r5, #0]
 8005286:	b1b9      	cbz	r1, 80052b8 <__sflush_r+0xac>
 8005288:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800528c:	4299      	cmp	r1, r3
 800528e:	d002      	beq.n	8005296 <__sflush_r+0x8a>
 8005290:	4628      	mov	r0, r5
 8005292:	f7ff fbf5 	bl	8004a80 <_free_r>
 8005296:	2300      	movs	r3, #0
 8005298:	6363      	str	r3, [r4, #52]	@ 0x34
 800529a:	e00d      	b.n	80052b8 <__sflush_r+0xac>
 800529c:	2301      	movs	r3, #1
 800529e:	4628      	mov	r0, r5
 80052a0:	47b0      	blx	r6
 80052a2:	4602      	mov	r2, r0
 80052a4:	1c50      	adds	r0, r2, #1
 80052a6:	d1c9      	bne.n	800523c <__sflush_r+0x30>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0c6      	beq.n	800523c <__sflush_r+0x30>
 80052ae:	2b1d      	cmp	r3, #29
 80052b0:	d001      	beq.n	80052b6 <__sflush_r+0xaa>
 80052b2:	2b16      	cmp	r3, #22
 80052b4:	d11d      	bne.n	80052f2 <__sflush_r+0xe6>
 80052b6:	602f      	str	r7, [r5, #0]
 80052b8:	2000      	movs	r0, #0
 80052ba:	e021      	b.n	8005300 <__sflush_r+0xf4>
 80052bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052c0:	b21b      	sxth	r3, r3
 80052c2:	e01a      	b.n	80052fa <__sflush_r+0xee>
 80052c4:	690f      	ldr	r7, [r1, #16]
 80052c6:	2f00      	cmp	r7, #0
 80052c8:	d0f6      	beq.n	80052b8 <__sflush_r+0xac>
 80052ca:	0793      	lsls	r3, r2, #30
 80052cc:	bf18      	it	ne
 80052ce:	2300      	movne	r3, #0
 80052d0:	680e      	ldr	r6, [r1, #0]
 80052d2:	bf08      	it	eq
 80052d4:	694b      	ldreq	r3, [r1, #20]
 80052d6:	1bf6      	subs	r6, r6, r7
 80052d8:	600f      	str	r7, [r1, #0]
 80052da:	608b      	str	r3, [r1, #8]
 80052dc:	2e00      	cmp	r6, #0
 80052de:	ddeb      	ble.n	80052b8 <__sflush_r+0xac>
 80052e0:	4633      	mov	r3, r6
 80052e2:	463a      	mov	r2, r7
 80052e4:	4628      	mov	r0, r5
 80052e6:	6a21      	ldr	r1, [r4, #32]
 80052e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80052ec:	47e0      	blx	ip
 80052ee:	2800      	cmp	r0, #0
 80052f0:	dc07      	bgt.n	8005302 <__sflush_r+0xf6>
 80052f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052fa:	f04f 30ff 	mov.w	r0, #4294967295
 80052fe:	81a3      	strh	r3, [r4, #12]
 8005300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005302:	4407      	add	r7, r0
 8005304:	1a36      	subs	r6, r6, r0
 8005306:	e7e9      	b.n	80052dc <__sflush_r+0xd0>
 8005308:	20400001 	.word	0x20400001

0800530c <_fflush_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	690b      	ldr	r3, [r1, #16]
 8005310:	4605      	mov	r5, r0
 8005312:	460c      	mov	r4, r1
 8005314:	b913      	cbnz	r3, 800531c <_fflush_r+0x10>
 8005316:	2500      	movs	r5, #0
 8005318:	4628      	mov	r0, r5
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	b118      	cbz	r0, 8005326 <_fflush_r+0x1a>
 800531e:	6a03      	ldr	r3, [r0, #32]
 8005320:	b90b      	cbnz	r3, 8005326 <_fflush_r+0x1a>
 8005322:	f7ff f9b3 	bl	800468c <__sinit>
 8005326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f3      	beq.n	8005316 <_fflush_r+0xa>
 800532e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005330:	07d0      	lsls	r0, r2, #31
 8005332:	d404      	bmi.n	800533e <_fflush_r+0x32>
 8005334:	0599      	lsls	r1, r3, #22
 8005336:	d402      	bmi.n	800533e <_fflush_r+0x32>
 8005338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800533a:	f7ff fb9e 	bl	8004a7a <__retarget_lock_acquire_recursive>
 800533e:	4628      	mov	r0, r5
 8005340:	4621      	mov	r1, r4
 8005342:	f7ff ff63 	bl	800520c <__sflush_r>
 8005346:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005348:	4605      	mov	r5, r0
 800534a:	07da      	lsls	r2, r3, #31
 800534c:	d4e4      	bmi.n	8005318 <_fflush_r+0xc>
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	059b      	lsls	r3, r3, #22
 8005352:	d4e1      	bmi.n	8005318 <_fflush_r+0xc>
 8005354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005356:	f7ff fb91 	bl	8004a7c <__retarget_lock_release_recursive>
 800535a:	e7dd      	b.n	8005318 <_fflush_r+0xc>

0800535c <__swhatbuf_r>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	460c      	mov	r4, r1
 8005360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005364:	4615      	mov	r5, r2
 8005366:	2900      	cmp	r1, #0
 8005368:	461e      	mov	r6, r3
 800536a:	b096      	sub	sp, #88	@ 0x58
 800536c:	da0c      	bge.n	8005388 <__swhatbuf_r+0x2c>
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	2100      	movs	r1, #0
 8005372:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005376:	bf14      	ite	ne
 8005378:	2340      	movne	r3, #64	@ 0x40
 800537a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800537e:	2000      	movs	r0, #0
 8005380:	6031      	str	r1, [r6, #0]
 8005382:	602b      	str	r3, [r5, #0]
 8005384:	b016      	add	sp, #88	@ 0x58
 8005386:	bd70      	pop	{r4, r5, r6, pc}
 8005388:	466a      	mov	r2, sp
 800538a:	f000 f849 	bl	8005420 <_fstat_r>
 800538e:	2800      	cmp	r0, #0
 8005390:	dbed      	blt.n	800536e <__swhatbuf_r+0x12>
 8005392:	9901      	ldr	r1, [sp, #4]
 8005394:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005398:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800539c:	4259      	negs	r1, r3
 800539e:	4159      	adcs	r1, r3
 80053a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053a4:	e7eb      	b.n	800537e <__swhatbuf_r+0x22>

080053a6 <__smakebuf_r>:
 80053a6:	898b      	ldrh	r3, [r1, #12]
 80053a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053aa:	079d      	lsls	r5, r3, #30
 80053ac:	4606      	mov	r6, r0
 80053ae:	460c      	mov	r4, r1
 80053b0:	d507      	bpl.n	80053c2 <__smakebuf_r+0x1c>
 80053b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80053b6:	6023      	str	r3, [r4, #0]
 80053b8:	6123      	str	r3, [r4, #16]
 80053ba:	2301      	movs	r3, #1
 80053bc:	6163      	str	r3, [r4, #20]
 80053be:	b003      	add	sp, #12
 80053c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c2:	466a      	mov	r2, sp
 80053c4:	ab01      	add	r3, sp, #4
 80053c6:	f7ff ffc9 	bl	800535c <__swhatbuf_r>
 80053ca:	9f00      	ldr	r7, [sp, #0]
 80053cc:	4605      	mov	r5, r0
 80053ce:	4639      	mov	r1, r7
 80053d0:	4630      	mov	r0, r6
 80053d2:	f7ff fbbf 	bl	8004b54 <_malloc_r>
 80053d6:	b948      	cbnz	r0, 80053ec <__smakebuf_r+0x46>
 80053d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053dc:	059a      	lsls	r2, r3, #22
 80053de:	d4ee      	bmi.n	80053be <__smakebuf_r+0x18>
 80053e0:	f023 0303 	bic.w	r3, r3, #3
 80053e4:	f043 0302 	orr.w	r3, r3, #2
 80053e8:	81a3      	strh	r3, [r4, #12]
 80053ea:	e7e2      	b.n	80053b2 <__smakebuf_r+0xc>
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80053f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053f6:	81a3      	strh	r3, [r4, #12]
 80053f8:	9b01      	ldr	r3, [sp, #4]
 80053fa:	6020      	str	r0, [r4, #0]
 80053fc:	b15b      	cbz	r3, 8005416 <__smakebuf_r+0x70>
 80053fe:	4630      	mov	r0, r6
 8005400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005404:	f000 f81e 	bl	8005444 <_isatty_r>
 8005408:	b128      	cbz	r0, 8005416 <__smakebuf_r+0x70>
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	f023 0303 	bic.w	r3, r3, #3
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	81a3      	strh	r3, [r4, #12]
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	431d      	orrs	r5, r3
 800541a:	81a5      	strh	r5, [r4, #12]
 800541c:	e7cf      	b.n	80053be <__smakebuf_r+0x18>
	...

08005420 <_fstat_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	2300      	movs	r3, #0
 8005424:	4d06      	ldr	r5, [pc, #24]	@ (8005440 <_fstat_r+0x20>)
 8005426:	4604      	mov	r4, r0
 8005428:	4608      	mov	r0, r1
 800542a:	4611      	mov	r1, r2
 800542c:	602b      	str	r3, [r5, #0]
 800542e:	f7fb fd65 	bl	8000efc <_fstat>
 8005432:	1c43      	adds	r3, r0, #1
 8005434:	d102      	bne.n	800543c <_fstat_r+0x1c>
 8005436:	682b      	ldr	r3, [r5, #0]
 8005438:	b103      	cbz	r3, 800543c <_fstat_r+0x1c>
 800543a:	6023      	str	r3, [r4, #0]
 800543c:	bd38      	pop	{r3, r4, r5, pc}
 800543e:	bf00      	nop
 8005440:	20000534 	.word	0x20000534

08005444 <_isatty_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	2300      	movs	r3, #0
 8005448:	4d05      	ldr	r5, [pc, #20]	@ (8005460 <_isatty_r+0x1c>)
 800544a:	4604      	mov	r4, r0
 800544c:	4608      	mov	r0, r1
 800544e:	602b      	str	r3, [r5, #0]
 8005450:	f7fb fd63 	bl	8000f1a <_isatty>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d102      	bne.n	800545e <_isatty_r+0x1a>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	b103      	cbz	r3, 800545e <_isatty_r+0x1a>
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	20000534 	.word	0x20000534

08005464 <_sbrk_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	2300      	movs	r3, #0
 8005468:	4d05      	ldr	r5, [pc, #20]	@ (8005480 <_sbrk_r+0x1c>)
 800546a:	4604      	mov	r4, r0
 800546c:	4608      	mov	r0, r1
 800546e:	602b      	str	r3, [r5, #0]
 8005470:	f7fb fd6a 	bl	8000f48 <_sbrk>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_sbrk_r+0x1a>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	b103      	cbz	r3, 800547e <_sbrk_r+0x1a>
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	20000534 	.word	0x20000534

08005484 <memchr>:
 8005484:	4603      	mov	r3, r0
 8005486:	b510      	push	{r4, lr}
 8005488:	b2c9      	uxtb	r1, r1
 800548a:	4402      	add	r2, r0
 800548c:	4293      	cmp	r3, r2
 800548e:	4618      	mov	r0, r3
 8005490:	d101      	bne.n	8005496 <memchr+0x12>
 8005492:	2000      	movs	r0, #0
 8005494:	e003      	b.n	800549e <memchr+0x1a>
 8005496:	7804      	ldrb	r4, [r0, #0]
 8005498:	3301      	adds	r3, #1
 800549a:	428c      	cmp	r4, r1
 800549c:	d1f6      	bne.n	800548c <memchr+0x8>
 800549e:	bd10      	pop	{r4, pc}

080054a0 <_init>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	bf00      	nop
 80054a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a6:	bc08      	pop	{r3}
 80054a8:	469e      	mov	lr, r3
 80054aa:	4770      	bx	lr

080054ac <_fini>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	bf00      	nop
 80054b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b2:	bc08      	pop	{r3}
 80054b4:	469e      	mov	lr, r3
 80054b6:	4770      	bx	lr
