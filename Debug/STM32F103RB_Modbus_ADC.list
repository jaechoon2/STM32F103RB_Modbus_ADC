
STM32F103RB_Modbus_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080027cc  080027cc  000037cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027f8  080027f8  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080027f8  080027f8  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080027f8  080027f8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027f8  080027f8  000037f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027fc  080027fc  000037fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002800  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  0800280c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800280c  000040ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000888c  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000195c  00000000  00000000  0000c8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000e220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f4  00000000  00000000  0000e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a14  00000000  00000000  0000efdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009950  00000000  00000000  000259f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000836b0  00000000  00000000  0002f340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b29f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e44  00000000  00000000  000b2a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000b4878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027b4 	.word	0x080027b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080027b4 	.word	0x080027b4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb1a 	bl	8000788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80a 	bl	800016c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8f2 	bl	8000340 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f85e 	bl	800021c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f89a 	bl	8000298 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f8c2 	bl	80002ec <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000168:	bf00      	nop
 800016a:	e7fd      	b.n	8000168 <main+0x1c>

0800016c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b094      	sub	sp, #80	@ 0x50
 8000170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000172:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000176:	2228      	movs	r2, #40	@ 0x28
 8000178:	2100      	movs	r1, #0
 800017a:	4618      	mov	r0, r3
 800017c:	f002 faee 	bl	800275c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000180:	f107 0314 	add.w	r3, r7, #20
 8000184:	2200      	movs	r2, #0
 8000186:	601a      	str	r2, [r3, #0]
 8000188:	605a      	str	r2, [r3, #4]
 800018a:	609a      	str	r2, [r3, #8]
 800018c:	60da      	str	r2, [r3, #12]
 800018e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800019c:	2302      	movs	r3, #2
 800019e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a0:	2301      	movs	r3, #1
 80001a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a4:	2310      	movs	r3, #16
 80001a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a8:	2302      	movs	r3, #2
 80001aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ac:	2300      	movs	r3, #0
 80001ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b0:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 f8d6 	bl	800136c <HAL_RCC_OscConfig>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80001c6:	f000 f93f 	bl	8000448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ca:	230f      	movs	r3, #15
 80001cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	2102      	movs	r1, #2
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 fb42 	bl	8001870 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80001f2:	f000 f929 	bl	8000448 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80001f6:	2302      	movs	r3, #2
 80001f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80001fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80001fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	4618      	mov	r0, r3
 8000204:	f001 fcc2 	bl	8001b8c <HAL_RCCEx_PeriphCLKConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800020e:	f000 f91b 	bl	8000448 <Error_Handler>
  }
}
 8000212:	bf00      	nop
 8000214:	3750      	adds	r7, #80	@ 0x50
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800022c:	4b18      	ldr	r3, [pc, #96]	@ (8000290 <MX_ADC1_Init+0x74>)
 800022e:	4a19      	ldr	r2, [pc, #100]	@ (8000294 <MX_ADC1_Init+0x78>)
 8000230:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000232:	4b17      	ldr	r3, [pc, #92]	@ (8000290 <MX_ADC1_Init+0x74>)
 8000234:	2200      	movs	r2, #0
 8000236:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000238:	4b15      	ldr	r3, [pc, #84]	@ (8000290 <MX_ADC1_Init+0x74>)
 800023a:	2200      	movs	r2, #0
 800023c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800023e:	4b14      	ldr	r3, [pc, #80]	@ (8000290 <MX_ADC1_Init+0x74>)
 8000240:	2200      	movs	r2, #0
 8000242:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000244:	4b12      	ldr	r3, [pc, #72]	@ (8000290 <MX_ADC1_Init+0x74>)
 8000246:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800024a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024c:	4b10      	ldr	r3, [pc, #64]	@ (8000290 <MX_ADC1_Init+0x74>)
 800024e:	2200      	movs	r2, #0
 8000250:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000252:	4b0f      	ldr	r3, [pc, #60]	@ (8000290 <MX_ADC1_Init+0x74>)
 8000254:	2201      	movs	r2, #1
 8000256:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000258:	480d      	ldr	r0, [pc, #52]	@ (8000290 <MX_ADC1_Init+0x74>)
 800025a:	f000 faf7 	bl	800084c <HAL_ADC_Init>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000264:	f000 f8f0 	bl	8000448 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000268:	2301      	movs	r3, #1
 800026a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800026c:	2301      	movs	r3, #1
 800026e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	4619      	mov	r1, r3
 8000278:	4805      	ldr	r0, [pc, #20]	@ (8000290 <MX_ADC1_Init+0x74>)
 800027a:	f000 fbbf 	bl	80009fc <HAL_ADC_ConfigChannel>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000284:	f000 f8e0 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000288:	bf00      	nop
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000028 	.word	0x20000028
 8000294:	40012400 	.word	0x40012400

08000298 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800029c:	4b11      	ldr	r3, [pc, #68]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 800029e:	4a12      	ldr	r2, [pc, #72]	@ (80002e8 <MX_USART1_UART_Init+0x50>)
 80002a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002a2:	4b10      	ldr	r3, [pc, #64]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80002a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002bc:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002be:	220c      	movs	r2, #12
 80002c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c2:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c8:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ce:	4805      	ldr	r0, [pc, #20]	@ (80002e4 <MX_USART1_UART_Init+0x4c>)
 80002d0:	f001 fd12 	bl	8001cf8 <HAL_UART_Init>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002da:	f000 f8b5 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	20000058 	.word	0x20000058
 80002e8:	40013800 	.word	0x40013800

080002ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f0:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 80002f2:	4a12      	ldr	r2, [pc, #72]	@ (800033c <MX_USART2_UART_Init+0x50>)
 80002f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80002f6:	4b10      	ldr	r3, [pc, #64]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 80002f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80002fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000304:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800030a:	4b0b      	ldr	r3, [pc, #44]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000310:	4b09      	ldr	r3, [pc, #36]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 8000312:	220c      	movs	r2, #12
 8000314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000316:	4b08      	ldr	r3, [pc, #32]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800031c:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000322:	4805      	ldr	r0, [pc, #20]	@ (8000338 <MX_USART2_UART_Init+0x4c>)
 8000324:	f001 fce8 	bl	8001cf8 <HAL_UART_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800032e:	f000 f88b 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	200000a0 	.word	0x200000a0
 800033c:	40004400 	.word	0x40004400

08000340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b088      	sub	sp, #32
 8000344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000354:	4b38      	ldr	r3, [pc, #224]	@ (8000438 <MX_GPIO_Init+0xf8>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a37      	ldr	r2, [pc, #220]	@ (8000438 <MX_GPIO_Init+0xf8>)
 800035a:	f043 0310 	orr.w	r3, r3, #16
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b35      	ldr	r3, [pc, #212]	@ (8000438 <MX_GPIO_Init+0xf8>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0310 	and.w	r3, r3, #16
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800036c:	4b32      	ldr	r3, [pc, #200]	@ (8000438 <MX_GPIO_Init+0xf8>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a31      	ldr	r2, [pc, #196]	@ (8000438 <MX_GPIO_Init+0xf8>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b2f      	ldr	r3, [pc, #188]	@ (8000438 <MX_GPIO_Init+0xf8>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0320 	and.w	r3, r3, #32
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000384:	4b2c      	ldr	r3, [pc, #176]	@ (8000438 <MX_GPIO_Init+0xf8>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a2b      	ldr	r2, [pc, #172]	@ (8000438 <MX_GPIO_Init+0xf8>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b29      	ldr	r3, [pc, #164]	@ (8000438 <MX_GPIO_Init+0xf8>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0304 	and.w	r3, r3, #4
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039c:	4b26      	ldr	r3, [pc, #152]	@ (8000438 <MX_GPIO_Init+0xf8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a25      	ldr	r2, [pc, #148]	@ (8000438 <MX_GPIO_Init+0xf8>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b23      	ldr	r3, [pc, #140]	@ (8000438 <MX_GPIO_Init+0xf8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	603b      	str	r3, [r7, #0]
 80003b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2120      	movs	r1, #32
 80003b8:	4820      	ldr	r0, [pc, #128]	@ (800043c <MX_GPIO_Init+0xfc>)
 80003ba:	f000 ff9d 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80003c4:	481e      	ldr	r0, [pc, #120]	@ (8000440 <MX_GPIO_Init+0x100>)
 80003c6:	f000 ff97 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000444 <MX_GPIO_Init+0x104>)
 80003d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003d8:	f107 0310 	add.w	r3, r7, #16
 80003dc:	4619      	mov	r1, r3
 80003de:	4818      	ldr	r0, [pc, #96]	@ (8000440 <MX_GPIO_Init+0x100>)
 80003e0:	f000 fe06 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003e4:	2320      	movs	r3, #32
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e8:	2301      	movs	r3, #1
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f0:	2302      	movs	r3, #2
 80003f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	4619      	mov	r1, r3
 80003fa:	4810      	ldr	r0, [pc, #64]	@ (800043c <MX_GPIO_Init+0xfc>)
 80003fc:	f000 fdf8 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000400:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2302      	movs	r3, #2
 8000410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	4619      	mov	r1, r3
 8000418:	4809      	ldr	r0, [pc, #36]	@ (8000440 <MX_GPIO_Init+0x100>)
 800041a:	f000 fde9 	bl	8000ff0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	2100      	movs	r1, #0
 8000422:	2028      	movs	r0, #40	@ 0x28
 8000424:	f000 fcfb 	bl	8000e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000428:	2028      	movs	r0, #40	@ 0x28
 800042a:	f000 fd14 	bl	8000e56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800042e:	bf00      	nop
 8000430:	3720      	adds	r7, #32
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000
 800043c:	40010800 	.word	0x40010800
 8000440:	40011000 	.word	0x40011000
 8000444:	10110000 	.word	0x10110000

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	bf00      	nop
 8000452:	e7fd      	b.n	8000450 <Error_Handler+0x8>

08000454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800045a:	4b15      	ldr	r3, [pc, #84]	@ (80004b0 <HAL_MspInit+0x5c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a14      	ldr	r2, [pc, #80]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b12      	ldr	r3, [pc, #72]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a0e      	ldr	r2, [pc, #56]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <HAL_MspInit+0x5c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800048a:	4b0a      	ldr	r3, [pc, #40]	@ (80004b4 <HAL_MspInit+0x60>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	4a04      	ldr	r2, [pc, #16]	@ (80004b4 <HAL_MspInit+0x60>)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010000 	.word	0x40010000

080004b8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a2a      	ldr	r2, [pc, #168]	@ (800057c <HAL_ADC_MspInit+0xc4>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d14d      	bne.n	8000574 <HAL_ADC_MspInit+0xbc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004d8:	4b29      	ldr	r3, [pc, #164]	@ (8000580 <HAL_ADC_MspInit+0xc8>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a28      	ldr	r2, [pc, #160]	@ (8000580 <HAL_ADC_MspInit+0xc8>)
 80004de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b26      	ldr	r3, [pc, #152]	@ (8000580 <HAL_ADC_MspInit+0xc8>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f0:	4b23      	ldr	r3, [pc, #140]	@ (8000580 <HAL_ADC_MspInit+0xc8>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a22      	ldr	r2, [pc, #136]	@ (8000580 <HAL_ADC_MspInit+0xc8>)
 80004f6:	f043 0310 	orr.w	r3, r3, #16
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b20      	ldr	r3, [pc, #128]	@ (8000580 <HAL_ADC_MspInit+0xc8>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0310 	and.w	r3, r3, #16
 8000504:	613b      	str	r3, [r7, #16]
 8000506:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	4b1d      	ldr	r3, [pc, #116]	@ (8000580 <HAL_ADC_MspInit+0xc8>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a1c      	ldr	r2, [pc, #112]	@ (8000580 <HAL_ADC_MspInit+0xc8>)
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b1a      	ldr	r3, [pc, #104]	@ (8000580 <HAL_ADC_MspInit+0xc8>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0304 	and.w	r3, r3, #4
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000520:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <HAL_ADC_MspInit+0xc8>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a16      	ldr	r2, [pc, #88]	@ (8000580 <HAL_ADC_MspInit+0xc8>)
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b14      	ldr	r3, [pc, #80]	@ (8000580 <HAL_ADC_MspInit+0xc8>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0308 	and.w	r3, r3, #8
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000538:	230f      	movs	r3, #15
 800053a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800053c:	2303      	movs	r3, #3
 800053e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000540:	f107 0318 	add.w	r3, r7, #24
 8000544:	4619      	mov	r1, r3
 8000546:	480f      	ldr	r0, [pc, #60]	@ (8000584 <HAL_ADC_MspInit+0xcc>)
 8000548:	f000 fd52 	bl	8000ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800054c:	23d2      	movs	r3, #210	@ 0xd2
 800054e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000550:	2303      	movs	r3, #3
 8000552:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 0318 	add.w	r3, r7, #24
 8000558:	4619      	mov	r1, r3
 800055a:	480b      	ldr	r0, [pc, #44]	@ (8000588 <HAL_ADC_MspInit+0xd0>)
 800055c:	f000 fd48 	bl	8000ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000560:	2303      	movs	r3, #3
 8000562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000564:	2303      	movs	r3, #3
 8000566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 0318 	add.w	r3, r7, #24
 800056c:	4619      	mov	r1, r3
 800056e:	4807      	ldr	r0, [pc, #28]	@ (800058c <HAL_ADC_MspInit+0xd4>)
 8000570:	f000 fd3e 	bl	8000ff0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000574:	bf00      	nop
 8000576:	3728      	adds	r7, #40	@ 0x28
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40012400 	.word	0x40012400
 8000580:	40021000 	.word	0x40021000
 8000584:	40011000 	.word	0x40011000
 8000588:	40010800 	.word	0x40010800
 800058c:	40010c00 	.word	0x40010c00

08000590 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 0318 	add.w	r3, r7, #24
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a39      	ldr	r2, [pc, #228]	@ (8000690 <HAL_UART_MspInit+0x100>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d13a      	bne.n	8000626 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005b0:	4b38      	ldr	r3, [pc, #224]	@ (8000694 <HAL_UART_MspInit+0x104>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a37      	ldr	r2, [pc, #220]	@ (8000694 <HAL_UART_MspInit+0x104>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b35      	ldr	r3, [pc, #212]	@ (8000694 <HAL_UART_MspInit+0x104>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	4b32      	ldr	r3, [pc, #200]	@ (8000694 <HAL_UART_MspInit+0x104>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a31      	ldr	r2, [pc, #196]	@ (8000694 <HAL_UART_MspInit+0x104>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000694 <HAL_UART_MspInit+0x104>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	4619      	mov	r1, r3
 80005f4:	4828      	ldr	r0, [pc, #160]	@ (8000698 <HAL_UART_MspInit+0x108>)
 80005f6:	f000 fcfb 	bl	8000ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	f107 0318 	add.w	r3, r7, #24
 800060c:	4619      	mov	r1, r3
 800060e:	4822      	ldr	r0, [pc, #136]	@ (8000698 <HAL_UART_MspInit+0x108>)
 8000610:	f000 fcee 	bl	8000ff0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2100      	movs	r1, #0
 8000618:	2025      	movs	r0, #37	@ 0x25
 800061a:	f000 fc00 	bl	8000e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800061e:	2025      	movs	r0, #37	@ 0x25
 8000620:	f000 fc19 	bl	8000e56 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000624:	e030      	b.n	8000688 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1c      	ldr	r2, [pc, #112]	@ (800069c <HAL_UART_MspInit+0x10c>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d12b      	bne.n	8000688 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000630:	4b18      	ldr	r3, [pc, #96]	@ (8000694 <HAL_UART_MspInit+0x104>)
 8000632:	69db      	ldr	r3, [r3, #28]
 8000634:	4a17      	ldr	r2, [pc, #92]	@ (8000694 <HAL_UART_MspInit+0x104>)
 8000636:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063a:	61d3      	str	r3, [r2, #28]
 800063c:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <HAL_UART_MspInit+0x104>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <HAL_UART_MspInit+0x104>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a11      	ldr	r2, [pc, #68]	@ (8000694 <HAL_UART_MspInit+0x104>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <HAL_UART_MspInit+0x104>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0304 	and.w	r3, r3, #4
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000660:	230c      	movs	r3, #12
 8000662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000664:	2302      	movs	r3, #2
 8000666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2302      	movs	r3, #2
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	f107 0318 	add.w	r3, r7, #24
 8000670:	4619      	mov	r1, r3
 8000672:	4809      	ldr	r0, [pc, #36]	@ (8000698 <HAL_UART_MspInit+0x108>)
 8000674:	f000 fcbc 	bl	8000ff0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	2026      	movs	r0, #38	@ 0x26
 800067e:	f000 fbce 	bl	8000e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000682:	2026      	movs	r0, #38	@ 0x26
 8000684:	f000 fbe7 	bl	8000e56 <HAL_NVIC_EnableIRQ>
}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	@ 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40013800 	.word	0x40013800
 8000694:	40021000 	.word	0x40021000
 8000698:	40010800 	.word	0x40010800
 800069c:	40004400 	.word	0x40004400

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <NMI_Handler+0x4>

080006a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <HardFault_Handler+0x4>

080006b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <MemManage_Handler+0x4>

080006b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <BusFault_Handler+0x4>

080006c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <UsageFault_Handler+0x4>

080006c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f0:	f000 f890 	bl	8000814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006fc:	4802      	ldr	r0, [pc, #8]	@ (8000708 <USART1_IRQHandler+0x10>)
 80006fe:	f001 fb4b 	bl	8001d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000058 	.word	0x20000058

0800070c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000710:	4802      	ldr	r0, [pc, #8]	@ (800071c <USART2_IRQHandler+0x10>)
 8000712:	f001 fb41 	bl	8001d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000a0 	.word	0x200000a0

08000720 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000724:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000728:	f000 fdfe 	bl	8001328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800073c:	f7ff fff8 	bl	8000730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000740:	480b      	ldr	r0, [pc, #44]	@ (8000770 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000742:	490c      	ldr	r1, [pc, #48]	@ (8000774 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000744:	4a0c      	ldr	r2, [pc, #48]	@ (8000778 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000748:	e002      	b.n	8000750 <LoopCopyDataInit>

0800074a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800074c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074e:	3304      	adds	r3, #4

08000750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000754:	d3f9      	bcc.n	800074a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000756:	4a09      	ldr	r2, [pc, #36]	@ (800077c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000758:	4c09      	ldr	r4, [pc, #36]	@ (8000780 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800075c:	e001      	b.n	8000762 <LoopFillZerobss>

0800075e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000760:	3204      	adds	r2, #4

08000762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000764:	d3fb      	bcc.n	800075e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000766:	f002 f801 	bl	800276c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076a:	f7ff fcef 	bl	800014c <main>
  bx lr
 800076e:	4770      	bx	lr
  ldr r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000774:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000778:	08002800 	.word	0x08002800
  ldr r2, =_sbss
 800077c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000780:	200000ec 	.word	0x200000ec

08000784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC1_2_IRQHandler>
	...

08000788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078c:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <HAL_Init+0x28>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a07      	ldr	r2, [pc, #28]	@ (80007b0 <HAL_Init+0x28>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000798:	2003      	movs	r0, #3
 800079a:	f000 fb35 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 f808 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a4:	f7ff fe56 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40022000 	.word	0x40022000

080007b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <HAL_InitTick+0x54>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <HAL_InitTick+0x58>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fb4d 	bl	8000e72 <HAL_SYSTICK_Config>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e00e      	b.n	8000800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b0f      	cmp	r3, #15
 80007e6:	d80a      	bhi.n	80007fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e8:	2200      	movs	r2, #0
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f000 fb15 	bl	8000e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f4:	4a06      	ldr	r2, [pc, #24]	@ (8000810 <HAL_InitTick+0x5c>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e000      	b.n	8000800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000000 	.word	0x20000000
 800080c:	20000008 	.word	0x20000008
 8000810:	20000004 	.word	0x20000004

08000814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <HAL_IncTick+0x1c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <HAL_IncTick+0x20>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4413      	add	r3, r2
 8000824:	4a03      	ldr	r2, [pc, #12]	@ (8000834 <HAL_IncTick+0x20>)
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	20000008 	.word	0x20000008
 8000834:	200000e8 	.word	0x200000e8

08000838 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;
 800083c:	4b02      	ldr	r3, [pc, #8]	@ (8000848 <HAL_GetTick+0x10>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	200000e8 	.word	0x200000e8

0800084c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000854:	2300      	movs	r3, #0
 8000856:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d101      	bne.n	800086e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e0be      	b.n	80009ec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000878:	2b00      	cmp	r3, #0
 800087a:	d109      	bne.n	8000890 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2200      	movs	r2, #0
 8000880:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff fe14 	bl	80004b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f000 f9ab 	bl	8000bec <ADC_ConversionStop_Disable>
 8000896:	4603      	mov	r3, r0
 8000898:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800089e:	f003 0310 	and.w	r3, r3, #16
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f040 8099 	bne.w	80009da <HAL_ADC_Init+0x18e>
 80008a8:	7dfb      	ldrb	r3, [r7, #23]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	f040 8095 	bne.w	80009da <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80008b8:	f023 0302 	bic.w	r3, r3, #2
 80008bc:	f043 0202 	orr.w	r2, r3, #2
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7b1b      	ldrb	r3, [r3, #12]
 80008d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	4313      	orrs	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008e4:	d003      	beq.n	80008ee <HAL_ADC_Init+0xa2>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d102      	bne.n	80008f4 <HAL_ADC_Init+0xa8>
 80008ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008f2:	e000      	b.n	80008f6 <HAL_ADC_Init+0xaa>
 80008f4:	2300      	movs	r3, #0
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7d1b      	ldrb	r3, [r3, #20]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d119      	bne.n	8000938 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7b1b      	ldrb	r3, [r3, #12]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d109      	bne.n	8000920 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	3b01      	subs	r3, #1
 8000912:	035a      	lsls	r2, r3, #13
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	4313      	orrs	r3, r2
 8000918:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	e00b      	b.n	8000938 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000924:	f043 0220 	orr.w	r2, r3, #32
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000930:	f043 0201 	orr.w	r2, r3, #1
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	430a      	orrs	r2, r1
 800094a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	4b28      	ldr	r3, [pc, #160]	@ (80009f4 <HAL_ADC_Init+0x1a8>)
 8000954:	4013      	ands	r3, r2
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	6812      	ldr	r2, [r2, #0]
 800095a:	68b9      	ldr	r1, [r7, #8]
 800095c:	430b      	orrs	r3, r1
 800095e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000968:	d003      	beq.n	8000972 <HAL_ADC_Init+0x126>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d104      	bne.n	800097c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	691b      	ldr	r3, [r3, #16]
 8000976:	3b01      	subs	r3, #1
 8000978:	051b      	lsls	r3, r3, #20
 800097a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000982:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	430a      	orrs	r2, r1
 800098e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <HAL_ADC_Init+0x1ac>)
 8000998:	4013      	ands	r3, r2
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	429a      	cmp	r2, r3
 800099e:	d10b      	bne.n	80009b8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009aa:	f023 0303 	bic.w	r3, r3, #3
 80009ae:	f043 0201 	orr.w	r2, r3, #1
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009b6:	e018      	b.n	80009ea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009bc:	f023 0312 	bic.w	r3, r3, #18
 80009c0:	f043 0210 	orr.w	r2, r3, #16
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009cc:	f043 0201 	orr.w	r2, r3, #1
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009d8:	e007      	b.n	80009ea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009de:	f043 0210 	orr.w	r2, r3, #16
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	ffe1f7fd 	.word	0xffe1f7fd
 80009f8:	ff1f0efe 	.word	0xff1f0efe

080009fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d101      	bne.n	8000a1c <HAL_ADC_ConfigChannel+0x20>
 8000a18:	2302      	movs	r3, #2
 8000a1a:	e0dc      	b.n	8000bd6 <HAL_ADC_ConfigChannel+0x1da>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b06      	cmp	r3, #6
 8000a2a:	d81c      	bhi.n	8000a66 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	4613      	mov	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	4413      	add	r3, r2
 8000a3c:	3b05      	subs	r3, #5
 8000a3e:	221f      	movs	r2, #31
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	4019      	ands	r1, r3
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	4613      	mov	r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	4413      	add	r3, r2
 8000a56:	3b05      	subs	r3, #5
 8000a58:	fa00 f203 	lsl.w	r2, r0, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	430a      	orrs	r2, r1
 8000a62:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a64:	e03c      	b.n	8000ae0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b0c      	cmp	r3, #12
 8000a6c:	d81c      	bhi.n	8000aa8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685a      	ldr	r2, [r3, #4]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	3b23      	subs	r3, #35	@ 0x23
 8000a80:	221f      	movs	r2, #31
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	4019      	ands	r1, r3
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	3b23      	subs	r3, #35	@ 0x23
 8000a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000aa6:	e01b      	b.n	8000ae0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	3b41      	subs	r3, #65	@ 0x41
 8000aba:	221f      	movs	r2, #31
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	4019      	ands	r1, r3
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	6818      	ldr	r0, [r3, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	4613      	mov	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	3b41      	subs	r3, #65	@ 0x41
 8000ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b09      	cmp	r3, #9
 8000ae6:	d91c      	bls.n	8000b22 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68d9      	ldr	r1, [r3, #12]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4613      	mov	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4413      	add	r3, r2
 8000af8:	3b1e      	subs	r3, #30
 8000afa:	2207      	movs	r2, #7
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	4019      	ands	r1, r3
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	6898      	ldr	r0, [r3, #8]
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	3b1e      	subs	r3, #30
 8000b14:	fa00 f203 	lsl.w	r2, r0, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	e019      	b.n	8000b56 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6919      	ldr	r1, [r3, #16]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	2207      	movs	r2, #7
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	4019      	ands	r1, r3
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	6898      	ldr	r0, [r3, #8]
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	fa00 f203 	lsl.w	r2, r0, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	430a      	orrs	r2, r1
 8000b54:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b10      	cmp	r3, #16
 8000b5c:	d003      	beq.n	8000b66 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b62:	2b11      	cmp	r3, #17
 8000b64:	d132      	bne.n	8000bcc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000be0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d125      	bne.n	8000bbc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d126      	bne.n	8000bcc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b8c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b10      	cmp	r3, #16
 8000b94:	d11a      	bne.n	8000bcc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b96:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a13      	ldr	r2, [pc, #76]	@ (8000be8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba0:	0c9a      	lsrs	r2, r3, #18
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bac:	e002      	b.n	8000bb4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1f9      	bne.n	8000bae <HAL_ADC_ConfigChannel+0x1b2>
 8000bba:	e007      	b.n	8000bcc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bc0:	f043 0220 	orr.w	r2, r3, #32
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	40012400 	.word	0x40012400
 8000be4:	20000000 	.word	0x20000000
 8000be8:	431bde83 	.word	0x431bde83

08000bec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d12e      	bne.n	8000c64 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f022 0201 	bic.w	r2, r2, #1
 8000c14:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c16:	f7ff fe0f 	bl	8000838 <HAL_GetTick>
 8000c1a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c1c:	e01b      	b.n	8000c56 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000c1e:	f7ff fe0b 	bl	8000838 <HAL_GetTick>
 8000c22:	4602      	mov	r2, r0
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d914      	bls.n	8000c56 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d10d      	bne.n	8000c56 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c3e:	f043 0210 	orr.w	r2, r3, #16
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c4a:	f043 0201 	orr.w	r2, r3, #1
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e007      	b.n	8000c66 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d0dc      	beq.n	8000c1e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4906      	ldr	r1, [pc, #24]	@ (8000d08 <__NVIC_EnableIRQ+0x34>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	@ (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	@ (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	@ 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	@ 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dd4:	d301      	bcc.n	8000dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00f      	b.n	8000dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <SysTick_Config+0x40>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de2:	210f      	movs	r1, #15
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f7ff ff90 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <SysTick_Config+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df2:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <SysTick_Config+0x40>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ff2d 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e30:	f7ff ff42 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	6978      	ldr	r0, [r7, #20]
 8000e3c:	f7ff ff90 	bl	8000d60 <NVIC_EncodePriority>
 8000e40:	4602      	mov	r2, r0
 8000e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff5f 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff35 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffa2 	bl	8000dc4 <SysTick_Config>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b085      	sub	sp, #20
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d008      	beq.n	8000eb4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e020      	b.n	8000ef6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 020e 	bic.w	r2, r2, #14
 8000ec2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0201 	bic.w	r2, r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000edc:	2101      	movs	r1, #1
 8000ede:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d005      	beq.n	8000f24 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	e051      	b.n	8000fc8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 020e 	bic.w	r2, r2, #14
 8000f32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0201 	bic.w	r2, r2, #1
 8000f42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a22      	ldr	r2, [pc, #136]	@ (8000fd4 <HAL_DMA_Abort_IT+0xd4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d029      	beq.n	8000fa2 <HAL_DMA_Abort_IT+0xa2>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a21      	ldr	r2, [pc, #132]	@ (8000fd8 <HAL_DMA_Abort_IT+0xd8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d022      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x9e>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8000fdc <HAL_DMA_Abort_IT+0xdc>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01a      	beq.n	8000f98 <HAL_DMA_Abort_IT+0x98>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe0 <HAL_DMA_Abort_IT+0xe0>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d012      	beq.n	8000f92 <HAL_DMA_Abort_IT+0x92>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe4 <HAL_DMA_Abort_IT+0xe4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00a      	beq.n	8000f8c <HAL_DMA_Abort_IT+0x8c>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe8 <HAL_DMA_Abort_IT+0xe8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d102      	bne.n	8000f86 <HAL_DMA_Abort_IT+0x86>
 8000f80:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f84:	e00e      	b.n	8000fa4 <HAL_DMA_Abort_IT+0xa4>
 8000f86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f8a:	e00b      	b.n	8000fa4 <HAL_DMA_Abort_IT+0xa4>
 8000f8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f90:	e008      	b.n	8000fa4 <HAL_DMA_Abort_IT+0xa4>
 8000f92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f96:	e005      	b.n	8000fa4 <HAL_DMA_Abort_IT+0xa4>
 8000f98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f9c:	e002      	b.n	8000fa4 <HAL_DMA_Abort_IT+0xa4>
 8000f9e:	2310      	movs	r3, #16
 8000fa0:	e000      	b.n	8000fa4 <HAL_DMA_Abort_IT+0xa4>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	4a11      	ldr	r2, [pc, #68]	@ (8000fec <HAL_DMA_Abort_IT+0xec>)
 8000fa6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	4798      	blx	r3
    } 
  }
  return status;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40020008 	.word	0x40020008
 8000fd8:	4002001c 	.word	0x4002001c
 8000fdc:	40020030 	.word	0x40020030
 8000fe0:	40020044 	.word	0x40020044
 8000fe4:	40020058 	.word	0x40020058
 8000fe8:	4002006c 	.word	0x4002006c
 8000fec:	40020000 	.word	0x40020000

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b08b      	sub	sp, #44	@ 0x2c
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	e169      	b.n	80012d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001004:	2201      	movs	r2, #1
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	429a      	cmp	r2, r3
 800101e:	f040 8158 	bne.w	80012d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	4a9a      	ldr	r2, [pc, #616]	@ (8001290 <HAL_GPIO_Init+0x2a0>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d05e      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 800102c:	4a98      	ldr	r2, [pc, #608]	@ (8001290 <HAL_GPIO_Init+0x2a0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d875      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 8001032:	4a98      	ldr	r2, [pc, #608]	@ (8001294 <HAL_GPIO_Init+0x2a4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d058      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 8001038:	4a96      	ldr	r2, [pc, #600]	@ (8001294 <HAL_GPIO_Init+0x2a4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d86f      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 800103e:	4a96      	ldr	r2, [pc, #600]	@ (8001298 <HAL_GPIO_Init+0x2a8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d052      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 8001044:	4a94      	ldr	r2, [pc, #592]	@ (8001298 <HAL_GPIO_Init+0x2a8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d869      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 800104a:	4a94      	ldr	r2, [pc, #592]	@ (800129c <HAL_GPIO_Init+0x2ac>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d04c      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 8001050:	4a92      	ldr	r2, [pc, #584]	@ (800129c <HAL_GPIO_Init+0x2ac>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d863      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 8001056:	4a92      	ldr	r2, [pc, #584]	@ (80012a0 <HAL_GPIO_Init+0x2b0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d046      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 800105c:	4a90      	ldr	r2, [pc, #576]	@ (80012a0 <HAL_GPIO_Init+0x2b0>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d85d      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 8001062:	2b12      	cmp	r3, #18
 8001064:	d82a      	bhi.n	80010bc <HAL_GPIO_Init+0xcc>
 8001066:	2b12      	cmp	r3, #18
 8001068:	d859      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 800106a:	a201      	add	r2, pc, #4	@ (adr r2, 8001070 <HAL_GPIO_Init+0x80>)
 800106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001070:	080010eb 	.word	0x080010eb
 8001074:	080010c5 	.word	0x080010c5
 8001078:	080010d7 	.word	0x080010d7
 800107c:	08001119 	.word	0x08001119
 8001080:	0800111f 	.word	0x0800111f
 8001084:	0800111f 	.word	0x0800111f
 8001088:	0800111f 	.word	0x0800111f
 800108c:	0800111f 	.word	0x0800111f
 8001090:	0800111f 	.word	0x0800111f
 8001094:	0800111f 	.word	0x0800111f
 8001098:	0800111f 	.word	0x0800111f
 800109c:	0800111f 	.word	0x0800111f
 80010a0:	0800111f 	.word	0x0800111f
 80010a4:	0800111f 	.word	0x0800111f
 80010a8:	0800111f 	.word	0x0800111f
 80010ac:	0800111f 	.word	0x0800111f
 80010b0:	0800111f 	.word	0x0800111f
 80010b4:	080010cd 	.word	0x080010cd
 80010b8:	080010e1 	.word	0x080010e1
 80010bc:	4a79      	ldr	r2, [pc, #484]	@ (80012a4 <HAL_GPIO_Init+0x2b4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010c2:	e02c      	b.n	800111e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	623b      	str	r3, [r7, #32]
          break;
 80010ca:	e029      	b.n	8001120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	3304      	adds	r3, #4
 80010d2:	623b      	str	r3, [r7, #32]
          break;
 80010d4:	e024      	b.n	8001120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	3308      	adds	r3, #8
 80010dc:	623b      	str	r3, [r7, #32]
          break;
 80010de:	e01f      	b.n	8001120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	330c      	adds	r3, #12
 80010e6:	623b      	str	r3, [r7, #32]
          break;
 80010e8:	e01a      	b.n	8001120 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d102      	bne.n	80010f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010f2:	2304      	movs	r3, #4
 80010f4:	623b      	str	r3, [r7, #32]
          break;
 80010f6:	e013      	b.n	8001120 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d105      	bne.n	800110c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001100:	2308      	movs	r3, #8
 8001102:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	611a      	str	r2, [r3, #16]
          break;
 800110a:	e009      	b.n	8001120 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800110c:	2308      	movs	r3, #8
 800110e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	615a      	str	r2, [r3, #20]
          break;
 8001116:	e003      	b.n	8001120 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
          break;
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x130>
          break;
 800111e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2bff      	cmp	r3, #255	@ 0xff
 8001124:	d801      	bhi.n	800112a <HAL_GPIO_Init+0x13a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	e001      	b.n	800112e <HAL_GPIO_Init+0x13e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3304      	adds	r3, #4
 800112e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2bff      	cmp	r3, #255	@ 0xff
 8001134:	d802      	bhi.n	800113c <HAL_GPIO_Init+0x14c>
 8001136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	e002      	b.n	8001142 <HAL_GPIO_Init+0x152>
 800113c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113e:	3b08      	subs	r3, #8
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	210f      	movs	r1, #15
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	401a      	ands	r2, r3
 8001154:	6a39      	ldr	r1, [r7, #32]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	431a      	orrs	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 80b1 	beq.w	80012d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001170:	4b4d      	ldr	r3, [pc, #308]	@ (80012a8 <HAL_GPIO_Init+0x2b8>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a4c      	ldr	r2, [pc, #304]	@ (80012a8 <HAL_GPIO_Init+0x2b8>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b4a      	ldr	r3, [pc, #296]	@ (80012a8 <HAL_GPIO_Init+0x2b8>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001188:	4a48      	ldr	r2, [pc, #288]	@ (80012ac <HAL_GPIO_Init+0x2bc>)
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3302      	adds	r3, #2
 8001190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001194:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4013      	ands	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a40      	ldr	r2, [pc, #256]	@ (80012b0 <HAL_GPIO_Init+0x2c0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d013      	beq.n	80011dc <HAL_GPIO_Init+0x1ec>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a3f      	ldr	r2, [pc, #252]	@ (80012b4 <HAL_GPIO_Init+0x2c4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d00d      	beq.n	80011d8 <HAL_GPIO_Init+0x1e8>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a3e      	ldr	r2, [pc, #248]	@ (80012b8 <HAL_GPIO_Init+0x2c8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d007      	beq.n	80011d4 <HAL_GPIO_Init+0x1e4>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a3d      	ldr	r2, [pc, #244]	@ (80012bc <HAL_GPIO_Init+0x2cc>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d101      	bne.n	80011d0 <HAL_GPIO_Init+0x1e0>
 80011cc:	2303      	movs	r3, #3
 80011ce:	e006      	b.n	80011de <HAL_GPIO_Init+0x1ee>
 80011d0:	2304      	movs	r3, #4
 80011d2:	e004      	b.n	80011de <HAL_GPIO_Init+0x1ee>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e002      	b.n	80011de <HAL_GPIO_Init+0x1ee>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <HAL_GPIO_Init+0x1ee>
 80011dc:	2300      	movs	r3, #0
 80011de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e0:	f002 0203 	and.w	r2, r2, #3
 80011e4:	0092      	lsls	r2, r2, #2
 80011e6:	4093      	lsls	r3, r2
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011ee:	492f      	ldr	r1, [pc, #188]	@ (80012ac <HAL_GPIO_Init+0x2bc>)
 80011f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001208:	4b2d      	ldr	r3, [pc, #180]	@ (80012c0 <HAL_GPIO_Init+0x2d0>)
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	492c      	ldr	r1, [pc, #176]	@ (80012c0 <HAL_GPIO_Init+0x2d0>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	608b      	str	r3, [r1, #8]
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001216:	4b2a      	ldr	r3, [pc, #168]	@ (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	43db      	mvns	r3, r3
 800121e:	4928      	ldr	r1, [pc, #160]	@ (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001220:	4013      	ands	r3, r2
 8001222:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001230:	4b23      	ldr	r3, [pc, #140]	@ (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	4922      	ldr	r1, [pc, #136]	@ (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	60cb      	str	r3, [r1, #12]
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800123e:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	43db      	mvns	r3, r3
 8001246:	491e      	ldr	r1, [pc, #120]	@ (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001248:	4013      	ands	r3, r2
 800124a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d006      	beq.n	8001266 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001258:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <HAL_GPIO_Init+0x2d0>)
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	4918      	ldr	r1, [pc, #96]	@ (80012c0 <HAL_GPIO_Init+0x2d0>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	604b      	str	r3, [r1, #4]
 8001264:	e006      	b.n	8001274 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001266:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	43db      	mvns	r3, r3
 800126e:	4914      	ldr	r1, [pc, #80]	@ (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001270:	4013      	ands	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d021      	beq.n	80012c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	490e      	ldr	r1, [pc, #56]	@ (80012c0 <HAL_GPIO_Init+0x2d0>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	600b      	str	r3, [r1, #0]
 800128c:	e021      	b.n	80012d2 <HAL_GPIO_Init+0x2e2>
 800128e:	bf00      	nop
 8001290:	10320000 	.word	0x10320000
 8001294:	10310000 	.word	0x10310000
 8001298:	10220000 	.word	0x10220000
 800129c:	10210000 	.word	0x10210000
 80012a0:	10120000 	.word	0x10120000
 80012a4:	10110000 	.word	0x10110000
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010000 	.word	0x40010000
 80012b0:	40010800 	.word	0x40010800
 80012b4:	40010c00 	.word	0x40010c00
 80012b8:	40011000 	.word	0x40011000
 80012bc:	40011400 	.word	0x40011400
 80012c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <HAL_GPIO_Init+0x304>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	4909      	ldr	r1, [pc, #36]	@ (80012f4 <HAL_GPIO_Init+0x304>)
 80012ce:	4013      	ands	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	3301      	adds	r3, #1
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012de:	fa22 f303 	lsr.w	r3, r2, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f47f ae8e 	bne.w	8001004 <HAL_GPIO_Init+0x14>
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	372c      	adds	r7, #44	@ 0x2c
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	40010400 	.word	0x40010400

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	611a      	str	r2, [r3, #16]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001332:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001334:	695a      	ldr	r2, [r3, #20]
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	4013      	ands	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800133e:	4a05      	ldr	r2, [pc, #20]	@ (8001354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f806 	bl	8001358 <HAL_GPIO_EXTI_Callback>
  }
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40010400 	.word	0x40010400

08001358 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e272      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8087 	beq.w	800149a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800138c:	4b92      	ldr	r3, [pc, #584]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	2b04      	cmp	r3, #4
 8001396:	d00c      	beq.n	80013b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001398:	4b8f      	ldr	r3, [pc, #572]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d112      	bne.n	80013ca <HAL_RCC_OscConfig+0x5e>
 80013a4:	4b8c      	ldr	r3, [pc, #560]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013b0:	d10b      	bne.n	80013ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b2:	4b89      	ldr	r3, [pc, #548]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d06c      	beq.n	8001498 <HAL_RCC_OscConfig+0x12c>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d168      	bne.n	8001498 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e24c      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013d2:	d106      	bne.n	80013e2 <HAL_RCC_OscConfig+0x76>
 80013d4:	4b80      	ldr	r3, [pc, #512]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a7f      	ldr	r2, [pc, #508]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e02e      	b.n	8001440 <HAL_RCC_OscConfig+0xd4>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x98>
 80013ea:	4b7b      	ldr	r3, [pc, #492]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a7a      	ldr	r2, [pc, #488]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b78      	ldr	r3, [pc, #480]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a77      	ldr	r2, [pc, #476]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e01d      	b.n	8001440 <HAL_RCC_OscConfig+0xd4>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800140c:	d10c      	bne.n	8001428 <HAL_RCC_OscConfig+0xbc>
 800140e:	4b72      	ldr	r3, [pc, #456]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a71      	ldr	r2, [pc, #452]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b6f      	ldr	r3, [pc, #444]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a6e      	ldr	r2, [pc, #440]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e00b      	b.n	8001440 <HAL_RCC_OscConfig+0xd4>
 8001428:	4b6b      	ldr	r3, [pc, #428]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a6a      	ldr	r2, [pc, #424]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800142e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4b68      	ldr	r3, [pc, #416]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a67      	ldr	r2, [pc, #412]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800143a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800143e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d013      	beq.n	8001470 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff f9f6 	bl	8000838 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff f9f2 	bl	8000838 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	@ 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e200      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	4b5d      	ldr	r3, [pc, #372]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0xe4>
 800146e:	e014      	b.n	800149a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff f9e2 	bl	8000838 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff f9de 	bl	8000838 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	@ 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e1ec      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	4b53      	ldr	r3, [pc, #332]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x10c>
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d063      	beq.n	800156e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014a6:	4b4c      	ldr	r3, [pc, #304]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00b      	beq.n	80014ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014b2:	4b49      	ldr	r3, [pc, #292]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d11c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x18c>
 80014be:	4b46      	ldr	r3, [pc, #280]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d116      	bne.n	80014f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ca:	4b43      	ldr	r3, [pc, #268]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_RCC_OscConfig+0x176>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d001      	beq.n	80014e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e1c0      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e2:	4b3d      	ldr	r3, [pc, #244]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4939      	ldr	r1, [pc, #228]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f6:	e03a      	b.n	800156e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d020      	beq.n	8001542 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001500:	4b36      	ldr	r3, [pc, #216]	@ (80015dc <HAL_RCC_OscConfig+0x270>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7ff f997 	bl	8000838 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150e:	f7ff f993 	bl	8000838 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e1a1      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	4b2d      	ldr	r3, [pc, #180]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152c:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4927      	ldr	r1, [pc, #156]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 800153c:	4313      	orrs	r3, r2
 800153e:	600b      	str	r3, [r1, #0]
 8001540:	e015      	b.n	800156e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001542:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <HAL_RCC_OscConfig+0x270>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff f976 	bl	8000838 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001550:	f7ff f972 	bl	8000838 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e180      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001562:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d03a      	beq.n	80015f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d019      	beq.n	80015b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001582:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <HAL_RCC_OscConfig+0x274>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff f956 	bl	8000838 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001590:	f7ff f952 	bl	8000838 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e160      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f000 face 	bl	8001b50 <RCC_Delay>
 80015b4:	e01c      	b.n	80015f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_RCC_OscConfig+0x274>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015bc:	f7ff f93c 	bl	8000838 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c2:	e00f      	b.n	80015e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff f938 	bl	8000838 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d908      	bls.n	80015e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e146      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	42420000 	.word	0x42420000
 80015e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e4:	4b92      	ldr	r3, [pc, #584]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1e9      	bne.n	80015c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80a6 	beq.w	800174a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001602:	4b8b      	ldr	r3, [pc, #556]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10d      	bne.n	800162a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b88      	ldr	r3, [pc, #544]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a87      	ldr	r2, [pc, #540]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b85      	ldr	r3, [pc, #532]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001626:	2301      	movs	r3, #1
 8001628:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162a:	4b82      	ldr	r3, [pc, #520]	@ (8001834 <HAL_RCC_OscConfig+0x4c8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d118      	bne.n	8001668 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001636:	4b7f      	ldr	r3, [pc, #508]	@ (8001834 <HAL_RCC_OscConfig+0x4c8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a7e      	ldr	r2, [pc, #504]	@ (8001834 <HAL_RCC_OscConfig+0x4c8>)
 800163c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001642:	f7ff f8f9 	bl	8000838 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164a:	f7ff f8f5 	bl	8000838 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b64      	cmp	r3, #100	@ 0x64
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e103      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	4b75      	ldr	r3, [pc, #468]	@ (8001834 <HAL_RCC_OscConfig+0x4c8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d106      	bne.n	800167e <HAL_RCC_OscConfig+0x312>
 8001670:	4b6f      	ldr	r3, [pc, #444]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4a6e      	ldr	r2, [pc, #440]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6213      	str	r3, [r2, #32]
 800167c:	e02d      	b.n	80016da <HAL_RCC_OscConfig+0x36e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x334>
 8001686:	4b6a      	ldr	r3, [pc, #424]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4a69      	ldr	r2, [pc, #420]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6213      	str	r3, [r2, #32]
 8001692:	4b67      	ldr	r3, [pc, #412]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4a66      	ldr	r2, [pc, #408]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	f023 0304 	bic.w	r3, r3, #4
 800169c:	6213      	str	r3, [r2, #32]
 800169e:	e01c      	b.n	80016da <HAL_RCC_OscConfig+0x36e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b05      	cmp	r3, #5
 80016a6:	d10c      	bne.n	80016c2 <HAL_RCC_OscConfig+0x356>
 80016a8:	4b61      	ldr	r3, [pc, #388]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4a60      	ldr	r2, [pc, #384]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6213      	str	r3, [r2, #32]
 80016b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	e00b      	b.n	80016da <HAL_RCC_OscConfig+0x36e>
 80016c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6213      	str	r3, [r2, #32]
 80016ce:	4b58      	ldr	r3, [pc, #352]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4a57      	ldr	r2, [pc, #348]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	f023 0304 	bic.w	r3, r3, #4
 80016d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d015      	beq.n	800170e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7ff f8a9 	bl	8000838 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e8:	e00a      	b.n	8001700 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7ff f8a5 	bl	8000838 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e0b1      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001700:	4b4b      	ldr	r3, [pc, #300]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0ee      	beq.n	80016ea <HAL_RCC_OscConfig+0x37e>
 800170c:	e014      	b.n	8001738 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170e:	f7ff f893 	bl	8000838 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001714:	e00a      	b.n	800172c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7ff f88f 	bl	8000838 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001724:	4293      	cmp	r3, r2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e09b      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172c:	4b40      	ldr	r3, [pc, #256]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1ee      	bne.n	8001716 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d105      	bne.n	800174a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173e:	4b3c      	ldr	r3, [pc, #240]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a3b      	ldr	r2, [pc, #236]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001748:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 8087 	beq.w	8001862 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001754:	4b36      	ldr	r3, [pc, #216]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b08      	cmp	r3, #8
 800175e:	d061      	beq.n	8001824 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d146      	bne.n	80017f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001768:	4b33      	ldr	r3, [pc, #204]	@ (8001838 <HAL_RCC_OscConfig+0x4cc>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff f863 	bl	8000838 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001776:	f7ff f85f 	bl	8000838 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e06d      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001788:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f0      	bne.n	8001776 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800179c:	d108      	bne.n	80017b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800179e:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	4921      	ldr	r1, [pc, #132]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a19      	ldr	r1, [r3, #32]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c0:	430b      	orrs	r3, r1
 80017c2:	491b      	ldr	r1, [pc, #108]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <HAL_RCC_OscConfig+0x4cc>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff f833 	bl	8000838 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff f82f 	bl	8000838 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e03d      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x46a>
 80017f4:	e035      	b.n	8001862 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <HAL_RCC_OscConfig+0x4cc>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff f81c 	bl	8000838 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff f818 	bl	8000838 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e026      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x498>
 8001822:	e01e      	b.n	8001862 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e019      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
 8001830:	40021000 	.word	0x40021000
 8001834:	40007000 	.word	0x40007000
 8001838:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800183c:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <HAL_RCC_OscConfig+0x500>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	429a      	cmp	r2, r3
 800184e:	d106      	bne.n	800185e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000

08001870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0d0      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001884:	4b6a      	ldr	r3, [pc, #424]	@ (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d910      	bls.n	80018b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b67      	ldr	r3, [pc, #412]	@ (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 0207 	bic.w	r2, r3, #7
 800189a:	4965      	ldr	r1, [pc, #404]	@ (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b63      	ldr	r3, [pc, #396]	@ (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0b8      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d020      	beq.n	8001902 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018cc:	4b59      	ldr	r3, [pc, #356]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4a58      	ldr	r2, [pc, #352]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e4:	4b53      	ldr	r3, [pc, #332]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	4a52      	ldr	r2, [pc, #328]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f0:	4b50      	ldr	r3, [pc, #320]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	494d      	ldr	r1, [pc, #308]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d040      	beq.n	8001990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b47      	ldr	r3, [pc, #284]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d115      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e07f      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	4b41      	ldr	r3, [pc, #260]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e073      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e06b      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194e:	4b39      	ldr	r3, [pc, #228]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f023 0203 	bic.w	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4936      	ldr	r1, [pc, #216]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001960:	f7fe ff6a 	bl	8000838 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	e00a      	b.n	800197e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7fe ff66 	bl	8000838 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e053      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 020c 	and.w	r2, r3, #12
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	429a      	cmp	r2, r3
 800198e:	d1eb      	bne.n	8001968 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001990:	4b27      	ldr	r3, [pc, #156]	@ (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d210      	bcs.n	80019c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b24      	ldr	r3, [pc, #144]	@ (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 0207 	bic.w	r2, r3, #7
 80019a6:	4922      	ldr	r1, [pc, #136]	@ (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e032      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019cc:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	4916      	ldr	r1, [pc, #88]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ea:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	490e      	ldr	r1, [pc, #56]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019fe:	f000 f821 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 8001a02:	4602      	mov	r2, r0
 8001a04:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	490a      	ldr	r1, [pc, #40]	@ (8001a38 <HAL_RCC_ClockConfig+0x1c8>)
 8001a10:	5ccb      	ldrb	r3, [r1, r3]
 8001a12:	fa22 f303 	lsr.w	r3, r2, r3
 8001a16:	4a09      	ldr	r2, [pc, #36]	@ (8001a3c <HAL_RCC_ClockConfig+0x1cc>)
 8001a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <HAL_RCC_ClockConfig+0x1d0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fec8 	bl	80007b4 <HAL_InitTick>

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40022000 	.word	0x40022000
 8001a34:	40021000 	.word	0x40021000
 8001a38:	080027cc 	.word	0x080027cc
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	20000004 	.word	0x20000004

08001a44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d002      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x30>
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d003      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0x36>
 8001a72:	e027      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x98>)
 8001a76:	613b      	str	r3, [r7, #16]
      break;
 8001a78:	e027      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	0c9b      	lsrs	r3, r3, #18
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	4a17      	ldr	r2, [pc, #92]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a84:	5cd3      	ldrb	r3, [r2, r3]
 8001a86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d010      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a92:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	0c5b      	lsrs	r3, r3, #17
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	4a11      	ldr	r2, [pc, #68]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x98>)
 8001aa6:	fb03 f202 	mul.w	r2, r3, r2
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e004      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	613b      	str	r3, [r7, #16]
      break;
 8001ac2:	e002      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ac6:	613b      	str	r3, [r7, #16]
      break;
 8001ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aca:	693b      	ldr	r3, [r7, #16]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	007a1200 	.word	0x007a1200
 8001ae0:	080027e4 	.word	0x080027e4
 8001ae4:	080027f4 	.word	0x080027f4
 8001ae8:	003d0900 	.word	0x003d0900

08001aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b02      	ldr	r3, [pc, #8]	@ (8001afc <HAL_RCC_GetHCLKFreq+0x10>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	20000000 	.word	0x20000000

08001b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b04:	f7ff fff2 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	4903      	ldr	r1, [pc, #12]	@ (8001b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000
 8001b24:	080027dc 	.word	0x080027dc

08001b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b2c:	f7ff ffde 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	0adb      	lsrs	r3, r3, #11
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4903      	ldr	r1, [pc, #12]	@ (8001b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	080027dc 	.word	0x080027dc

08001b50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b58:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <RCC_Delay+0x34>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <RCC_Delay+0x38>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	0a5b      	lsrs	r3, r3, #9
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	fb02 f303 	mul.w	r3, r2, r3
 8001b6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b6c:	bf00      	nop
  }
  while (Delay --);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1e5a      	subs	r2, r3, #1
 8001b72:	60fa      	str	r2, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f9      	bne.n	8001b6c <RCC_Delay+0x1c>
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000000 	.word	0x20000000
 8001b88:	10624dd3 	.word	0x10624dd3

08001b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d07d      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bac:	4b4f      	ldr	r3, [pc, #316]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10d      	bne.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	4a4b      	ldr	r2, [pc, #300]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc2:	61d3      	str	r3, [r2, #28]
 8001bc4:	4b49      	ldr	r3, [pc, #292]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd4:	4b46      	ldr	r3, [pc, #280]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d118      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be0:	4b43      	ldr	r3, [pc, #268]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a42      	ldr	r2, [pc, #264]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bec:	f7fe fe24 	bl	8000838 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf2:	e008      	b.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf4:	f7fe fe20 	bl	8000838 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	@ 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e06d      	b.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c06:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c12:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d02e      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d027      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c30:	4b2e      	ldr	r3, [pc, #184]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c40:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c46:	4a29      	ldr	r2, [pc, #164]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d014      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7fe fdef 	bl	8000838 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7fe fdeb 	bl	8000838 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e036      	b.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ee      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c80:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4917      	ldr	r1, [pc, #92]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c98:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	4a13      	ldr	r2, [pc, #76]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ca2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	490b      	ldr	r1, [pc, #44]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cce:	4b07      	ldr	r3, [pc, #28]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	4904      	ldr	r1, [pc, #16]	@ (8001cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	42420440 	.word	0x42420440

08001cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e042      	b.n	8001d90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7fe fc36 	bl	8000590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2224      	movs	r2, #36	@ 0x24
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fc7f 	bl	8002640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b0ba      	sub	sp, #232	@ 0xe8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10f      	bne.n	8001dfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_UART_IRQHandler+0x66>
 8001dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fb63 	bl	80024c2 <UART_Receive_IT>
      return;
 8001dfc:	e25b      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80de 	beq.w	8001fc4 <HAL_UART_IRQHandler+0x22c>
 8001e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d106      	bne.n	8001e22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80d1 	beq.w	8001fc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_UART_IRQHandler+0xae>
 8001e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	f043 0201 	orr.w	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <HAL_UART_IRQHandler+0xd2>
 8001e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f043 0202 	orr.w	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HAL_UART_IRQHandler+0xf6>
 8001e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	f043 0204 	orr.w	r2, r3, #4
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d011      	beq.n	8001ebe <HAL_UART_IRQHandler+0x126>
 8001e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	f043 0208 	orr.w	r2, r3, #8
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 81f2 	beq.w	80022ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ecc:	f003 0320 	and.w	r3, r3, #32
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_UART_IRQHandler+0x14e>
 8001ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 faee 	bl	80024c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf14      	ite	ne
 8001ef4:	2301      	movne	r3, #1
 8001ef6:	2300      	moveq	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d103      	bne.n	8001f12 <HAL_UART_IRQHandler+0x17a>
 8001f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d04f      	beq.n	8001fb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f9f8 	bl	8002308 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d041      	beq.n	8001faa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3314      	adds	r3, #20
 8001f2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f34:	e853 3f00 	ldrex	r3, [r3]
 8001f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3314      	adds	r3, #20
 8001f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001f52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001f56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001f62:	e841 2300 	strex	r3, r2, [r1]
 8001f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1d9      	bne.n	8001f26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d013      	beq.n	8001fa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002178 <HAL_UART_IRQHandler+0x3e0>)
 8001f80:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe ffba 	bl	8000f00 <HAL_DMA_Abort_IT>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa0:	e00e      	b.n	8001fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f99c 	bl	80022e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa8:	e00a      	b.n	8001fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f998 	bl	80022e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb0:	e006      	b.n	8001fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f994 	bl	80022e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001fbe:	e175      	b.n	80022ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc0:	bf00      	nop
    return;
 8001fc2:	e173      	b.n	80022ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	f040 814f 	bne.w	800226c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 8148 	beq.w	800226c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8141 	beq.w	800226c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80b6 	beq.w	800217c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800201c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 8145 	beq.w	80022b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800202a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800202e:	429a      	cmp	r2, r3
 8002030:	f080 813e 	bcs.w	80022b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800203a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b20      	cmp	r3, #32
 8002044:	f000 8088 	beq.w	8002158 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	330c      	adds	r3, #12
 800204e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002052:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002056:	e853 3f00 	ldrex	r3, [r3]
 800205a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800205e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002062:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002066:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	330c      	adds	r3, #12
 8002070:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002074:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002078:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800207c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002080:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002084:	e841 2300 	strex	r3, r2, [r1]
 8002088:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800208c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1d9      	bne.n	8002048 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3314      	adds	r3, #20
 800209a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800209e:	e853 3f00 	ldrex	r3, [r3]
 80020a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80020a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3314      	adds	r3, #20
 80020b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80020bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80020c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80020c4:	e841 2300 	strex	r3, r2, [r1]
 80020c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80020ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1e1      	bne.n	8002094 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3314      	adds	r3, #20
 80020d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020da:	e853 3f00 	ldrex	r3, [r3]
 80020de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80020e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3314      	adds	r3, #20
 80020f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80020f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80020fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80020fc:	e841 2300 	strex	r3, r2, [r1]
 8002100:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002102:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e3      	bne.n	80020d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	330c      	adds	r3, #12
 800211c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800211e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002120:	e853 3f00 	ldrex	r3, [r3]
 8002124:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002128:	f023 0310 	bic.w	r3, r3, #16
 800212c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800213a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800213c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800213e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002140:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002142:	e841 2300 	strex	r3, r2, [r1]
 8002146:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e3      	bne.n	8002116 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fe99 	bl	8000e8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002166:	b29b      	uxth	r3, r3
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	b29b      	uxth	r3, r3
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8bf 	bl	80022f2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002174:	e09c      	b.n	80022b0 <HAL_UART_IRQHandler+0x518>
 8002176:	bf00      	nop
 8002178:	080023cd 	.word	0x080023cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002184:	b29b      	uxth	r3, r3
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 808e 	beq.w	80022b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8089 	beq.w	80022b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	330c      	adds	r3, #12
 80021a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ac:	e853 3f00 	ldrex	r3, [r3]
 80021b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80021b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80021b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	330c      	adds	r3, #12
 80021c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80021c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80021c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021ce:	e841 2300 	strex	r3, r2, [r1]
 80021d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80021d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1e3      	bne.n	80021a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3314      	adds	r3, #20
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	e853 3f00 	ldrex	r3, [r3]
 80021e8:	623b      	str	r3, [r7, #32]
   return(result);
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3314      	adds	r3, #20
 80021fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80021fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8002200:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002206:	e841 2300 	strex	r3, r2, [r1]
 800220a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800220c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1e3      	bne.n	80021da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	e853 3f00 	ldrex	r3, [r3]
 800222e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f023 0310 	bic.w	r3, r3, #16
 8002236:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	330c      	adds	r3, #12
 8002240:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002244:	61fa      	str	r2, [r7, #28]
 8002246:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002248:	69b9      	ldr	r1, [r7, #24]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	e841 2300 	strex	r3, r2, [r1]
 8002250:	617b      	str	r3, [r7, #20]
   return(result);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e3      	bne.n	8002220 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800225e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002262:	4619      	mov	r1, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f844 	bl	80022f2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800226a:	e023      	b.n	80022b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800226c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <HAL_UART_IRQHandler+0x4f4>
 8002278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800227c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f8b5 	bl	80023f4 <UART_Transmit_IT>
    return;
 800228a:	e014      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800228c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00e      	beq.n	80022b6 <HAL_UART_IRQHandler+0x51e>
 8002298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800229c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f8f4 	bl	8002492 <UART_EndTransmit_IT>
    return;
 80022aa:	e004      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80022ac:	bf00      	nop
 80022ae:	e002      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80022b0:	bf00      	nop
 80022b2:	e000      	b.n	80022b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80022b4:	bf00      	nop
  }
}
 80022b6:	37e8      	adds	r7, #232	@ 0xe8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002308:	b480      	push	{r7}
 800230a:	b095      	sub	sp, #84	@ 0x54
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	330c      	adds	r3, #12
 8002316:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231a:	e853 3f00 	ldrex	r3, [r3]
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002322:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	330c      	adds	r3, #12
 800232e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002330:	643a      	str	r2, [r7, #64]	@ 0x40
 8002332:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002334:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002336:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002338:	e841 2300 	strex	r3, r2, [r1]
 800233c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800233e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e5      	bne.n	8002310 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3314      	adds	r3, #20
 800234a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	e853 3f00 	ldrex	r3, [r3]
 8002352:	61fb      	str	r3, [r7, #28]
   return(result);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f023 0301 	bic.w	r3, r3, #1
 800235a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3314      	adds	r3, #20
 8002362:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002364:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002366:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002368:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800236a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800236c:	e841 2300 	strex	r3, r2, [r1]
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1e5      	bne.n	8002344 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237c:	2b01      	cmp	r3, #1
 800237e:	d119      	bne.n	80023b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	330c      	adds	r3, #12
 8002386:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	e853 3f00 	ldrex	r3, [r3]
 800238e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f023 0310 	bic.w	r3, r3, #16
 8002396:	647b      	str	r3, [r7, #68]	@ 0x44
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	330c      	adds	r3, #12
 800239e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023a0:	61ba      	str	r2, [r7, #24]
 80023a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a4:	6979      	ldr	r1, [r7, #20]
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	e841 2300 	strex	r3, r2, [r1]
 80023ac:	613b      	str	r3, [r7, #16]
   return(result);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1e5      	bne.n	8002380 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80023c2:	bf00      	nop
 80023c4:	3754      	adds	r7, #84	@ 0x54
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f7ff ff7a 	bl	80022e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b21      	cmp	r3, #33	@ 0x21
 8002406:	d13e      	bne.n	8002486 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002410:	d114      	bne.n	800243c <UART_Transmit_IT+0x48>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d110      	bne.n	800243c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800242e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	1c9a      	adds	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	621a      	str	r2, [r3, #32]
 800243a:	e008      	b.n	800244e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	1c59      	adds	r1, r3, #1
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6211      	str	r1, [r2, #32]
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29b      	uxth	r3, r3
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4619      	mov	r1, r3
 800245c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002470:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002480:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e000      	b.n	8002488 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002486:	2302      	movs	r3, #2
  }
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ff02 	bl	80022bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b08c      	sub	sp, #48	@ 0x30
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b22      	cmp	r3, #34	@ 0x22
 80024d4:	f040 80ae 	bne.w	8002634 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024e0:	d117      	bne.n	8002512 <UART_Receive_IT+0x50>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d113      	bne.n	8002512 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002500:	b29a      	uxth	r2, r3
 8002502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002504:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	1c9a      	adds	r2, r3, #2
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002510:	e026      	b.n	8002560 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002516:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002518:	2300      	movs	r3, #0
 800251a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002524:	d007      	beq.n	8002536 <UART_Receive_IT+0x74>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10a      	bne.n	8002544 <UART_Receive_IT+0x82>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e008      	b.n	8002556 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002550:	b2da      	uxtb	r2, r3
 8002552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002554:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29b      	uxth	r3, r3
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	4619      	mov	r1, r3
 800256e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002570:	2b00      	cmp	r3, #0
 8002572:	d15d      	bne.n	8002630 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0220 	bic.w	r2, r2, #32
 8002582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002592:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d135      	bne.n	8002626 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	330c      	adds	r3, #12
 80025c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	e853 3f00 	ldrex	r3, [r3]
 80025ce:	613b      	str	r3, [r7, #16]
   return(result);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f023 0310 	bic.w	r3, r3, #16
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	330c      	adds	r3, #12
 80025de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e0:	623a      	str	r2, [r7, #32]
 80025e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e4:	69f9      	ldr	r1, [r7, #28]
 80025e6:	6a3a      	ldr	r2, [r7, #32]
 80025e8:	e841 2300 	strex	r3, r2, [r1]
 80025ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1e5      	bne.n	80025c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d10a      	bne.n	8002618 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800261c:	4619      	mov	r1, r3
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff fe67 	bl	80022f2 <HAL_UARTEx_RxEventCallback>
 8002624:	e002      	b.n	800262c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff fe51 	bl	80022ce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	e002      	b.n	8002636 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e000      	b.n	8002636 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	3730      	adds	r7, #48	@ 0x30
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800267a:	f023 030c 	bic.w	r3, r3, #12
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	430b      	orrs	r3, r1
 8002686:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002754 <UART_SetConfig+0x114>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d103      	bne.n	80026b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026a8:	f7ff fa3e 	bl	8001b28 <HAL_RCC_GetPCLK2Freq>
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	e002      	b.n	80026b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026b0:	f7ff fa26 	bl	8001b00 <HAL_RCC_GetPCLK1Freq>
 80026b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	009a      	lsls	r2, r3, #2
 80026c0:	441a      	add	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026cc:	4a22      	ldr	r2, [pc, #136]	@ (8002758 <UART_SetConfig+0x118>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	0119      	lsls	r1, r3, #4
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	009a      	lsls	r2, r3, #2
 80026e0:	441a      	add	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002758 <UART_SetConfig+0x118>)
 80026ee:	fba3 0302 	umull	r0, r3, r3, r2
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	2064      	movs	r0, #100	@ 0x64
 80026f6:	fb00 f303 	mul.w	r3, r0, r3
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	3332      	adds	r3, #50	@ 0x32
 8002700:	4a15      	ldr	r2, [pc, #84]	@ (8002758 <UART_SetConfig+0x118>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800270c:	4419      	add	r1, r3
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	009a      	lsls	r2, r3, #2
 8002718:	441a      	add	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	fbb2 f2f3 	udiv	r2, r2, r3
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <UART_SetConfig+0x118>)
 8002726:	fba3 0302 	umull	r0, r3, r3, r2
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2064      	movs	r0, #100	@ 0x64
 800272e:	fb00 f303 	mul.w	r3, r0, r3
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	3332      	adds	r3, #50	@ 0x32
 8002738:	4a07      	ldr	r2, [pc, #28]	@ (8002758 <UART_SetConfig+0x118>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	f003 020f 	and.w	r2, r3, #15
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	440a      	add	r2, r1
 800274a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40013800 	.word	0x40013800
 8002758:	51eb851f 	.word	0x51eb851f

0800275c <memset>:
 800275c:	4603      	mov	r3, r0
 800275e:	4402      	add	r2, r0
 8002760:	4293      	cmp	r3, r2
 8002762:	d100      	bne.n	8002766 <memset+0xa>
 8002764:	4770      	bx	lr
 8002766:	f803 1b01 	strb.w	r1, [r3], #1
 800276a:	e7f9      	b.n	8002760 <memset+0x4>

0800276c <__libc_init_array>:
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	2600      	movs	r6, #0
 8002770:	4d0c      	ldr	r5, [pc, #48]	@ (80027a4 <__libc_init_array+0x38>)
 8002772:	4c0d      	ldr	r4, [pc, #52]	@ (80027a8 <__libc_init_array+0x3c>)
 8002774:	1b64      	subs	r4, r4, r5
 8002776:	10a4      	asrs	r4, r4, #2
 8002778:	42a6      	cmp	r6, r4
 800277a:	d109      	bne.n	8002790 <__libc_init_array+0x24>
 800277c:	f000 f81a 	bl	80027b4 <_init>
 8002780:	2600      	movs	r6, #0
 8002782:	4d0a      	ldr	r5, [pc, #40]	@ (80027ac <__libc_init_array+0x40>)
 8002784:	4c0a      	ldr	r4, [pc, #40]	@ (80027b0 <__libc_init_array+0x44>)
 8002786:	1b64      	subs	r4, r4, r5
 8002788:	10a4      	asrs	r4, r4, #2
 800278a:	42a6      	cmp	r6, r4
 800278c:	d105      	bne.n	800279a <__libc_init_array+0x2e>
 800278e:	bd70      	pop	{r4, r5, r6, pc}
 8002790:	f855 3b04 	ldr.w	r3, [r5], #4
 8002794:	4798      	blx	r3
 8002796:	3601      	adds	r6, #1
 8002798:	e7ee      	b.n	8002778 <__libc_init_array+0xc>
 800279a:	f855 3b04 	ldr.w	r3, [r5], #4
 800279e:	4798      	blx	r3
 80027a0:	3601      	adds	r6, #1
 80027a2:	e7f2      	b.n	800278a <__libc_init_array+0x1e>
 80027a4:	080027f8 	.word	0x080027f8
 80027a8:	080027f8 	.word	0x080027f8
 80027ac:	080027f8 	.word	0x080027f8
 80027b0:	080027fc 	.word	0x080027fc

080027b4 <_init>:
 80027b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b6:	bf00      	nop
 80027b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ba:	bc08      	pop	{r3}
 80027bc:	469e      	mov	lr, r3
 80027be:	4770      	bx	lr

080027c0 <_fini>:
 80027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c2:	bf00      	nop
 80027c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c6:	bc08      	pop	{r3}
 80027c8:	469e      	mov	lr, r3
 80027ca:	4770      	bx	lr
